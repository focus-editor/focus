// Stripped-down version of `glad_all.jai` from the standard `GL` module

GL_Procs :: struct #type_info_procedures_are_void_pointers #type_info_no_size_complaint {
    // Types:

    GLenum :: u32;
    GLboolean :: bool;  // s8?
    GLbitfield :: u32;
    GLbyte :: s8;
    GLshort :: s16;
    GLint :: s32;
    GLclampx :: s32;
    GLubyte :: u8;
    GLushort :: u16;
    GLuint :: u32;
    GLsizei :: u32;
    GLfloat :: float32;
    GLclampf :: float32;
    GLdouble :: float64;
    GLclampd :: float64;
    GLchar :: u8;
    GLcharARB :: u8;
    GLhandleARB :: u32;
    GLhalfARB :: u16;
    GLhalf :: u16;
    GLfixed :: s32;
    GLintptr :: s64;
    GLsizeiptr :: s64;
    GLint64 :: s64;
    GLuint64 :: u64;
    GLintptrARB :: s64;
    GLsizeiptrARB :: u64; // s64?
    GLint64EXT :: s64;
    GLuint64EXT :: u64;
    GLsync :: u64;
    GLhalfNV :: u16;

    GLDEBUGPROC    :: #type (GLenum, GLenum, GLuint, GLenum, GLsizei, *GLchar, *void) #c_call;
    GLDEBUGPROCKHR :: GLDEBUGPROC;
    GLDEBUGPROCARB :: GLDEBUGPROC;
    GLDEBUGPROCAMD :: #type (GLuint, GLenum, GLenum, GLsizei, *GLchar, *void) #c_call;

    // Version flags:

    gl_version_major : s32;
    gl_version_minor : s32;
    GL_VERSION_1_0 : bool;
    GL_VERSION_1_1 : bool;
    GL_VERSION_1_2 : bool;
    GL_VERSION_1_3 : bool;
    GL_VERSION_1_4 : bool;
    GL_VERSION_1_5 : bool;
    GL_VERSION_2_0 : bool;
    GL_VERSION_2_1 : bool;
    GL_VERSION_3_0 : bool;
    GL_VERSION_3_1 : bool;
    GL_VERSION_3_2 : bool;
    GL_VERSION_3_3 : bool;
    GL_VERSION_4_0 : bool;
    GL_VERSION_4_1 : bool;
    GL_VERSION_4_2 : bool;
    GL_VERSION_4_3 : bool;
    GL_VERSION_4_4 : bool;
    GL_VERSION_4_5 : bool;
    GL_VERSION_4_6 : bool;

    // Core enums:

    // GL_VERSION_1_0
    GL_DEPTH_BUFFER_BIT :: 0x00000100;
    GL_STENCIL_BUFFER_BIT :: 0x00000400;
    GL_COLOR_BUFFER_BIT :: 0x00004000;
    GL_FALSE :: false;
    GL_TRUE :: true;
    GL_POINTS :: 0x0000;
    GL_LINES :: 0x0001;
    GL_LINE_LOOP :: 0x0002;
    GL_LINE_STRIP :: 0x0003;
    GL_TRIANGLES :: 0x0004;
    GL_TRIANGLE_STRIP :: 0x0005;
    GL_TRIANGLE_FAN :: 0x0006;
    GL_QUADS :: 0x0007;
    GL_NEVER :: 0x0200;
    GL_LESS :: 0x0201;
    GL_EQUAL :: 0x0202;
    GL_LEQUAL :: 0x0203;
    GL_GREATER :: 0x0204;
    GL_NOTEQUAL :: 0x0205;
    GL_GEQUAL :: 0x0206;
    GL_ALWAYS :: 0x0207;
    GL_ZERO :: 0;
    GL_ONE :: 1;
    GL_SRC_COLOR :: 0x0300;
    GL_ONE_MINUS_SRC_COLOR :: 0x0301;
    GL_SRC_ALPHA :: 0x0302;
    GL_ONE_MINUS_SRC_ALPHA :: 0x0303;
    GL_DST_ALPHA :: 0x0304;
    GL_ONE_MINUS_DST_ALPHA :: 0x0305;
    GL_DST_COLOR :: 0x0306;
    GL_ONE_MINUS_DST_COLOR :: 0x0307;
    GL_SRC_ALPHA_SATURATE :: 0x0308;
    GL_NONE :: 0;
    GL_FRONT_LEFT :: 0x0400;
    GL_FRONT_RIGHT :: 0x0401;
    GL_BACK_LEFT :: 0x0402;
    GL_BACK_RIGHT :: 0x0403;
    GL_FRONT :: 0x0404;
    GL_BACK :: 0x0405;
    GL_LEFT :: 0x0406;
    GL_RIGHT :: 0x0407;
    GL_FRONT_AND_BACK :: 0x0408;
    GL_NO_ERROR :: 0;
    GL_INVALID_ENUM :: 0x0500;
    GL_INVALID_VALUE :: 0x0501;
    GL_INVALID_OPERATION :: 0x0502;
    GL_OUT_OF_MEMORY :: 0x0505;
    GL_CW :: 0x0900;
    GL_CCW :: 0x0901;
    GL_POINT_SIZE :: 0x0B11;
    GL_POINT_SIZE_RANGE :: 0x0B12;
    GL_POINT_SIZE_GRANULARITY :: 0x0B13;
    GL_LINE_SMOOTH :: 0x0B20;
    GL_LINE_WIDTH :: 0x0B21;
    GL_LINE_WIDTH_RANGE :: 0x0B22;
    GL_LINE_WIDTH_GRANULARITY :: 0x0B23;
    GL_POLYGON_MODE :: 0x0B40;
    GL_POLYGON_SMOOTH :: 0x0B41;
    GL_CULL_FACE :: 0x0B44;
    GL_CULL_FACE_MODE :: 0x0B45;
    GL_FRONT_FACE :: 0x0B46;
    GL_DEPTH_RANGE :: 0x0B70;
    GL_DEPTH_TEST :: 0x0B71;
    GL_DEPTH_WRITEMASK :: 0x0B72;
    GL_DEPTH_CLEAR_VALUE :: 0x0B73;
    GL_DEPTH_FUNC :: 0x0B74;
    GL_STENCIL_TEST :: 0x0B90;
    GL_STENCIL_CLEAR_VALUE :: 0x0B91;
    GL_STENCIL_FUNC :: 0x0B92;
    GL_STENCIL_VALUE_MASK :: 0x0B93;
    GL_STENCIL_FAIL :: 0x0B94;
    GL_STENCIL_PASS_DEPTH_FAIL :: 0x0B95;
    GL_STENCIL_PASS_DEPTH_PASS :: 0x0B96;
    GL_STENCIL_REF :: 0x0B97;
    GL_STENCIL_WRITEMASK :: 0x0B98;
    GL_VIEWPORT :: 0x0BA2;
    GL_DITHER :: 0x0BD0;
    GL_BLEND_DST :: 0x0BE0;
    GL_BLEND_SRC :: 0x0BE1;
    GL_BLEND :: 0x0BE2;
    GL_LOGIC_OP_MODE :: 0x0BF0;
    GL_DRAW_BUFFER :: 0x0C01;
    GL_READ_BUFFER :: 0x0C02;
    GL_SCISSOR_BOX :: 0x0C10;
    GL_SCISSOR_TEST :: 0x0C11;
    GL_COLOR_CLEAR_VALUE :: 0x0C22;
    GL_COLOR_WRITEMASK :: 0x0C23;
    GL_DOUBLEBUFFER :: 0x0C32;
    GL_STEREO :: 0x0C33;
    GL_LINE_SMOOTH_HINT :: 0x0C52;
    GL_POLYGON_SMOOTH_HINT :: 0x0C53;
    GL_UNPACK_SWAP_BYTES :: 0x0CF0;
    GL_UNPACK_LSB_FIRST :: 0x0CF1;
    GL_UNPACK_ROW_LENGTH :: 0x0CF2;
    GL_UNPACK_SKIP_ROWS :: 0x0CF3;
    GL_UNPACK_SKIP_PIXELS :: 0x0CF4;
    GL_UNPACK_ALIGNMENT :: 0x0CF5;
    GL_PACK_SWAP_BYTES :: 0x0D00;
    GL_PACK_LSB_FIRST :: 0x0D01;
    GL_PACK_ROW_LENGTH :: 0x0D02;
    GL_PACK_SKIP_ROWS :: 0x0D03;
    GL_PACK_SKIP_PIXELS :: 0x0D04;
    GL_PACK_ALIGNMENT :: 0x0D05;
    GL_MAX_TEXTURE_SIZE :: 0x0D33;
    GL_MAX_VIEWPORT_DIMS :: 0x0D3A;
    GL_SUBPIXEL_BITS :: 0x0D50;
    GL_TEXTURE_1D :: 0x0DE0;
    GL_TEXTURE_2D :: 0x0DE1;
    GL_TEXTURE_WIDTH :: 0x1000;
    GL_TEXTURE_HEIGHT :: 0x1001;
    GL_TEXTURE_BORDER_COLOR :: 0x1004;
    GL_DONT_CARE :: 0x1100;
    GL_FASTEST :: 0x1101;
    GL_NICEST :: 0x1102;
    GL_BYTE :: 0x1400;
    GL_UNSIGNED_BYTE :: 0x1401;
    GL_SHORT :: 0x1402;
    GL_UNSIGNED_SHORT :: 0x1403;
    GL_INT :: 0x1404;
    GL_UNSIGNED_INT :: 0x1405;
    GL_FLOAT :: 0x1406;
    GL_STACK_OVERFLOW :: 0x0503;
    GL_STACK_UNDERFLOW :: 0x0504;
    GL_CLEAR :: 0x1500;
    GL_AND :: 0x1501;
    GL_AND_REVERSE :: 0x1502;
    GL_COPY :: 0x1503;
    GL_AND_INVERTED :: 0x1504;
    GL_NOOP :: 0x1505;
    GL_XOR :: 0x1506;
    GL_OR :: 0x1507;
    GL_NOR :: 0x1508;
    GL_EQUIV :: 0x1509;
    GL_INVERT :: 0x150A;
    GL_OR_REVERSE :: 0x150B;
    GL_COPY_INVERTED :: 0x150C;
    GL_OR_INVERTED :: 0x150D;
    GL_NAND :: 0x150E;
    GL_SET :: 0x150F;
    GL_TEXTURE :: 0x1702;
    GL_COLOR :: 0x1800;
    GL_DEPTH :: 0x1801;
    GL_STENCIL :: 0x1802;
    GL_STENCIL_INDEX :: 0x1901;
    GL_DEPTH_COMPONENT :: 0x1902;
    GL_RED :: 0x1903;
    GL_GREEN :: 0x1904;
    GL_BLUE :: 0x1905;
    GL_ALPHA :: 0x1906;
    GL_RGB :: 0x1907;
    GL_RGBA :: 0x1908;
    GL_POINT :: 0x1B00;
    GL_LINE :: 0x1B01;
    GL_FILL :: 0x1B02;
    GL_KEEP :: 0x1E00;
    GL_REPLACE :: 0x1E01;
    GL_INCR :: 0x1E02;
    GL_DECR :: 0x1E03;
    GL_VENDOR :: 0x1F00;
    GL_RENDERER :: 0x1F01;
    GL_VERSION :: 0x1F02;
    GL_EXTENSIONS :: 0x1F03;
    GL_NEAREST :: 0x2600;
    GL_LINEAR :: 0x2601;
    GL_NEAREST_MIPMAP_NEAREST :: 0x2700;
    GL_LINEAR_MIPMAP_NEAREST :: 0x2701;
    GL_NEAREST_MIPMAP_LINEAR :: 0x2702;
    GL_LINEAR_MIPMAP_LINEAR :: 0x2703;
    GL_TEXTURE_MAG_FILTER :: 0x2800;
    GL_TEXTURE_MIN_FILTER :: 0x2801;
    GL_TEXTURE_WRAP_S :: 0x2802;
    GL_TEXTURE_WRAP_T :: 0x2803;
    GL_REPEAT :: 0x2901;
    GL_CURRENT_BIT :: 0x00000001;
    GL_POINT_BIT :: 0x00000002;
    GL_LINE_BIT :: 0x00000004;
    GL_POLYGON_BIT :: 0x00000008;
    GL_POLYGON_STIPPLE_BIT :: 0x00000010;
    GL_PIXEL_MODE_BIT :: 0x00000020;
    GL_LIGHTING_BIT :: 0x00000040;
    GL_FOG_BIT :: 0x00000080;
    GL_ACCUM_BUFFER_BIT :: 0x00000200;
    GL_VIEWPORT_BIT :: 0x00000800;
    GL_TRANSFORM_BIT :: 0x00001000;
    GL_ENABLE_BIT :: 0x00002000;
    GL_HINT_BIT :: 0x00008000;
    GL_EVAL_BIT :: 0x00010000;
    GL_LIST_BIT :: 0x00020000;
    GL_TEXTURE_BIT :: 0x00040000;
    GL_SCISSOR_BIT :: 0x00080000;
    GL_ALL_ATTRIB_BITS :: 0xFFFFFFFF;
    GL_QUAD_STRIP :: 0x0008;
    GL_POLYGON :: 0x0009;
    GL_ACCUM :: 0x0100;
    GL_LOAD :: 0x0101;
    GL_RETURN :: 0x0102;
    GL_MULT :: 0x0103;
    GL_ADD :: 0x0104;
    GL_AUX0 :: 0x0409;
    GL_AUX1 :: 0x040A;
    GL_AUX2 :: 0x040B;
    GL_AUX3 :: 0x040C;
    GL_2D :: 0x0600;
    GL_3D :: 0x0601;
    GL_3D_COLOR :: 0x0602;
    GL_3D_COLOR_TEXTURE :: 0x0603;
    GL_4D_COLOR_TEXTURE :: 0x0604;
    GL_PASS_THROUGH_TOKEN :: 0x0700;
    GL_POINT_TOKEN :: 0x0701;
    GL_LINE_TOKEN :: 0x0702;
    GL_POLYGON_TOKEN :: 0x0703;
    GL_BITMAP_TOKEN :: 0x0704;
    GL_DRAW_PIXEL_TOKEN :: 0x0705;
    GL_COPY_PIXEL_TOKEN :: 0x0706;
    GL_LINE_RESET_TOKEN :: 0x0707;
    GL_EXP :: 0x0800;
    GL_EXP2 :: 0x0801;
    GL_COEFF :: 0x0A00;
    GL_ORDER :: 0x0A01;
    GL_DOMAIN :: 0x0A02;
    GL_PIXEL_MAP_I_TO_I :: 0x0C70;
    GL_PIXEL_MAP_S_TO_S :: 0x0C71;
    GL_PIXEL_MAP_I_TO_R :: 0x0C72;
    GL_PIXEL_MAP_I_TO_G :: 0x0C73;
    GL_PIXEL_MAP_I_TO_B :: 0x0C74;
    GL_PIXEL_MAP_I_TO_A :: 0x0C75;
    GL_PIXEL_MAP_R_TO_R :: 0x0C76;
    GL_PIXEL_MAP_G_TO_G :: 0x0C77;
    GL_PIXEL_MAP_B_TO_B :: 0x0C78;
    GL_PIXEL_MAP_A_TO_A :: 0x0C79;
    GL_CURRENT_COLOR :: 0x0B00;
    GL_CURRENT_INDEX :: 0x0B01;
    GL_CURRENT_NORMAL :: 0x0B02;
    GL_CURRENT_TEXTURE_COORDS :: 0x0B03;
    GL_CURRENT_RASTER_COLOR :: 0x0B04;
    GL_CURRENT_RASTER_INDEX :: 0x0B05;
    GL_CURRENT_RASTER_TEXTURE_COORDS :: 0x0B06;
    GL_CURRENT_RASTER_POSITION :: 0x0B07;
    GL_CURRENT_RASTER_POSITION_VALID :: 0x0B08;
    GL_CURRENT_RASTER_DISTANCE :: 0x0B09;
    GL_POINT_SMOOTH :: 0x0B10;
    GL_LINE_STIPPLE :: 0x0B24;
    GL_LINE_STIPPLE_PATTERN :: 0x0B25;
    GL_LINE_STIPPLE_REPEAT :: 0x0B26;
    GL_LIST_MODE :: 0x0B30;
    GL_MAX_LIST_NESTING :: 0x0B31;
    GL_LIST_BASE :: 0x0B32;
    GL_LIST_INDEX :: 0x0B33;
    GL_POLYGON_STIPPLE :: 0x0B42;
    GL_EDGE_FLAG :: 0x0B43;
    GL_LIGHTING :: 0x0B50;
    GL_LIGHT_MODEL_LOCAL_VIEWER :: 0x0B51;
    GL_LIGHT_MODEL_TWO_SIDE :: 0x0B52;
    GL_LIGHT_MODEL_AMBIENT :: 0x0B53;
    GL_SHADE_MODEL :: 0x0B54;
    GL_COLOR_MATERIAL_FACE :: 0x0B55;
    GL_COLOR_MATERIAL_PARAMETER :: 0x0B56;
    GL_COLOR_MATERIAL :: 0x0B57;
    GL_FOG :: 0x0B60;
    GL_FOG_INDEX :: 0x0B61;
    GL_FOG_DENSITY :: 0x0B62;
    GL_FOG_START :: 0x0B63;
    GL_FOG_END :: 0x0B64;
    GL_FOG_MODE :: 0x0B65;
    GL_FOG_COLOR :: 0x0B66;
    GL_ACCUM_CLEAR_VALUE :: 0x0B80;
    GL_MATRIX_MODE :: 0x0BA0;
    GL_NORMALIZE :: 0x0BA1;
    GL_MODELVIEW_STACK_DEPTH :: 0x0BA3;
    GL_PROJECTION_STACK_DEPTH :: 0x0BA4;
    GL_TEXTURE_STACK_DEPTH :: 0x0BA5;
    GL_MODELVIEW_MATRIX :: 0x0BA6;
    GL_PROJECTION_MATRIX :: 0x0BA7;
    GL_TEXTURE_MATRIX :: 0x0BA8;
    GL_ATTRIB_STACK_DEPTH :: 0x0BB0;
    GL_ALPHA_TEST :: 0x0BC0;
    GL_ALPHA_TEST_FUNC :: 0x0BC1;
    GL_ALPHA_TEST_REF :: 0x0BC2;
    GL_LOGIC_OP :: 0x0BF1;
    GL_AUX_BUFFERS :: 0x0C00;
    GL_INDEX_CLEAR_VALUE :: 0x0C20;
    GL_INDEX_WRITEMASK :: 0x0C21;
    GL_INDEX_MODE :: 0x0C30;
    GL_RGBA_MODE :: 0x0C31;
    GL_RENDER_MODE :: 0x0C40;
    GL_PERSPECTIVE_CORRECTION_HINT :: 0x0C50;
    GL_POINT_SMOOTH_HINT :: 0x0C51;
    GL_FOG_HINT :: 0x0C54;
    GL_TEXTURE_GEN_S :: 0x0C60;
    GL_TEXTURE_GEN_T :: 0x0C61;
    GL_TEXTURE_GEN_R :: 0x0C62;
    GL_TEXTURE_GEN_Q :: 0x0C63;
    GL_PIXEL_MAP_I_TO_I_SIZE :: 0x0CB0;
    GL_PIXEL_MAP_S_TO_S_SIZE :: 0x0CB1;
    GL_PIXEL_MAP_I_TO_R_SIZE :: 0x0CB2;
    GL_PIXEL_MAP_I_TO_G_SIZE :: 0x0CB3;
    GL_PIXEL_MAP_I_TO_B_SIZE :: 0x0CB4;
    GL_PIXEL_MAP_I_TO_A_SIZE :: 0x0CB5;
    GL_PIXEL_MAP_R_TO_R_SIZE :: 0x0CB6;
    GL_PIXEL_MAP_G_TO_G_SIZE :: 0x0CB7;
    GL_PIXEL_MAP_B_TO_B_SIZE :: 0x0CB8;
    GL_PIXEL_MAP_A_TO_A_SIZE :: 0x0CB9;
    GL_MAP_COLOR :: 0x0D10;
    GL_MAP_STENCIL :: 0x0D11;
    GL_INDEX_SHIFT :: 0x0D12;
    GL_INDEX_OFFSET :: 0x0D13;
    GL_RED_SCALE :: 0x0D14;
    GL_RED_BIAS :: 0x0D15;
    GL_ZOOM_X :: 0x0D16;
    GL_ZOOM_Y :: 0x0D17;
    GL_GREEN_SCALE :: 0x0D18;
    GL_GREEN_BIAS :: 0x0D19;
    GL_BLUE_SCALE :: 0x0D1A;
    GL_BLUE_BIAS :: 0x0D1B;
    GL_ALPHA_SCALE :: 0x0D1C;
    GL_ALPHA_BIAS :: 0x0D1D;
    GL_DEPTH_SCALE :: 0x0D1E;
    GL_DEPTH_BIAS :: 0x0D1F;
    GL_MAX_EVAL_ORDER :: 0x0D30;
    GL_MAX_LIGHTS :: 0x0D31;
    GL_MAX_CLIP_PLANES :: 0x0D32;
    GL_MAX_PIXEL_MAP_TABLE :: 0x0D34;
    GL_MAX_ATTRIB_STACK_DEPTH :: 0x0D35;
    GL_MAX_MODELVIEW_STACK_DEPTH :: 0x0D36;
    GL_MAX_NAME_STACK_DEPTH :: 0x0D37;
    GL_MAX_PROJECTION_STACK_DEPTH :: 0x0D38;
    GL_MAX_TEXTURE_STACK_DEPTH :: 0x0D39;
    GL_INDEX_BITS :: 0x0D51;
    GL_RED_BITS :: 0x0D52;
    GL_GREEN_BITS :: 0x0D53;
    GL_BLUE_BITS :: 0x0D54;
    GL_ALPHA_BITS :: 0x0D55;
    GL_DEPTH_BITS :: 0x0D56;
    GL_STENCIL_BITS :: 0x0D57;
    GL_ACCUM_RED_BITS :: 0x0D58;
    GL_ACCUM_GREEN_BITS :: 0x0D59;
    GL_ACCUM_BLUE_BITS :: 0x0D5A;
    GL_ACCUM_ALPHA_BITS :: 0x0D5B;
    GL_NAME_STACK_DEPTH :: 0x0D70;
    GL_AUTO_NORMAL :: 0x0D80;
    GL_MAP1_COLOR_4 :: 0x0D90;
    GL_MAP1_INDEX :: 0x0D91;
    GL_MAP1_NORMAL :: 0x0D92;
    GL_MAP1_TEXTURE_COORD_1 :: 0x0D93;
    GL_MAP1_TEXTURE_COORD_2 :: 0x0D94;
    GL_MAP1_TEXTURE_COORD_3 :: 0x0D95;
    GL_MAP1_TEXTURE_COORD_4 :: 0x0D96;
    GL_MAP1_VERTEX_3 :: 0x0D97;
    GL_MAP1_VERTEX_4 :: 0x0D98;
    GL_MAP2_COLOR_4 :: 0x0DB0;
    GL_MAP2_INDEX :: 0x0DB1;
    GL_MAP2_NORMAL :: 0x0DB2;
    GL_MAP2_TEXTURE_COORD_1 :: 0x0DB3;
    GL_MAP2_TEXTURE_COORD_2 :: 0x0DB4;
    GL_MAP2_TEXTURE_COORD_3 :: 0x0DB5;
    GL_MAP2_TEXTURE_COORD_4 :: 0x0DB6;
    GL_MAP2_VERTEX_3 :: 0x0DB7;
    GL_MAP2_VERTEX_4 :: 0x0DB8;
    GL_MAP1_GRID_DOMAIN :: 0x0DD0;
    GL_MAP1_GRID_SEGMENTS :: 0x0DD1;
    GL_MAP2_GRID_DOMAIN :: 0x0DD2;
    GL_MAP2_GRID_SEGMENTS :: 0x0DD3;
    GL_TEXTURE_COMPONENTS :: 0x1003;
    GL_TEXTURE_BORDER :: 0x1005;
    GL_AMBIENT :: 0x1200;
    GL_DIFFUSE :: 0x1201;
    GL_SPECULAR :: 0x1202;
    GL_POSITION :: 0x1203;
    GL_SPOT_DIRECTION :: 0x1204;
    GL_SPOT_EXPONENT :: 0x1205;
    GL_SPOT_CUTOFF :: 0x1206;
    GL_CONSTANT_ATTENUATION :: 0x1207;
    GL_LINEAR_ATTENUATION :: 0x1208;
    GL_QUADRATIC_ATTENUATION :: 0x1209;
    GL_COMPILE :: 0x1300;
    GL_COMPILE_AND_EXECUTE :: 0x1301;
    GL_2_BYTES :: 0x1407;
    GL_3_BYTES :: 0x1408;
    GL_4_BYTES :: 0x1409;
    GL_EMISSION :: 0x1600;
    GL_SHININESS :: 0x1601;
    GL_AMBIENT_AND_DIFFUSE :: 0x1602;
    GL_COLOR_INDEXES :: 0x1603;
    GL_MODELVIEW :: 0x1700;
    GL_PROJECTION :: 0x1701;
    GL_COLOR_INDEX :: 0x1900;
    GL_LUMINANCE :: 0x1909;
    GL_LUMINANCE_ALPHA :: 0x190A;
    GL_BITMAP :: 0x1A00;
    GL_RENDER :: 0x1C00;
    GL_FEEDBACK :: 0x1C01;
    GL_SELECT :: 0x1C02;
    GL_FLAT :: 0x1D00;
    GL_SMOOTH :: 0x1D01;
    GL_S :: 0x2000;
    GL_T :: 0x2001;
    GL_R :: 0x2002;
    GL_Q :: 0x2003;
    GL_MODULATE :: 0x2100;
    GL_DECAL :: 0x2101;
    GL_TEXTURE_ENV_MODE :: 0x2200;
    GL_TEXTURE_ENV_COLOR :: 0x2201;
    GL_TEXTURE_ENV :: 0x2300;
    GL_EYE_LINEAR :: 0x2400;
    GL_OBJECT_LINEAR :: 0x2401;
    GL_SPHERE_MAP :: 0x2402;
    GL_TEXTURE_GEN_MODE :: 0x2500;
    GL_OBJECT_PLANE :: 0x2501;
    GL_EYE_PLANE :: 0x2502;
    GL_CLAMP :: 0x2900;
    GL_CLIP_PLANE0 :: 0x3000;
    GL_CLIP_PLANE1 :: 0x3001;
    GL_CLIP_PLANE2 :: 0x3002;
    GL_CLIP_PLANE3 :: 0x3003;
    GL_CLIP_PLANE4 :: 0x3004;
    GL_CLIP_PLANE5 :: 0x3005;
    GL_LIGHT0 :: 0x4000;
    GL_LIGHT1 :: 0x4001;
    GL_LIGHT2 :: 0x4002;
    GL_LIGHT3 :: 0x4003;
    GL_LIGHT4 :: 0x4004;
    GL_LIGHT5 :: 0x4005;
    GL_LIGHT6 :: 0x4006;
    GL_LIGHT7 :: 0x4007;

    // GL_VERSION_1_1
    GL_COLOR_LOGIC_OP :: 0x0BF2;
    GL_POLYGON_OFFSET_UNITS :: 0x2A00;
    GL_POLYGON_OFFSET_POINT :: 0x2A01;
    GL_POLYGON_OFFSET_LINE :: 0x2A02;
    GL_POLYGON_OFFSET_FILL :: 0x8037;
    GL_POLYGON_OFFSET_FACTOR :: 0x8038;
    GL_TEXTURE_BINDING_1D :: 0x8068;
    GL_TEXTURE_BINDING_2D :: 0x8069;
    GL_TEXTURE_INTERNAL_FORMAT :: 0x1003;
    GL_TEXTURE_RED_SIZE :: 0x805C;
    GL_TEXTURE_GREEN_SIZE :: 0x805D;
    GL_TEXTURE_BLUE_SIZE :: 0x805E;
    GL_TEXTURE_ALPHA_SIZE :: 0x805F;
    GL_DOUBLE :: 0x140A;
    GL_PROXY_TEXTURE_1D :: 0x8063;
    GL_PROXY_TEXTURE_2D :: 0x8064;
    GL_R3_G3_B2 :: 0x2A10;
    GL_RGB4 :: 0x804F;
    GL_RGB5 :: 0x8050;
    GL_RGB8 :: 0x8051;
    GL_RGB10 :: 0x8052;
    GL_RGB12 :: 0x8053;
    GL_RGB16 :: 0x8054;
    GL_RGBA2 :: 0x8055;
    GL_RGBA4 :: 0x8056;
    GL_RGB5_A1 :: 0x8057;
    GL_RGBA8 :: 0x8058;
    GL_RGB10_A2 :: 0x8059;
    GL_RGBA12 :: 0x805A;
    GL_RGBA16 :: 0x805B;
    GL_CLIENT_PIXEL_STORE_BIT :: 0x00000001;
    GL_CLIENT_VERTEX_ARRAY_BIT :: 0x00000002;
    GL_CLIENT_ALL_ATTRIB_BITS :: 0xFFFFFFFF;
    GL_VERTEX_ARRAY_POINTER :: 0x808E;
    GL_NORMAL_ARRAY_POINTER :: 0x808F;
    GL_COLOR_ARRAY_POINTER :: 0x8090;
    GL_INDEX_ARRAY_POINTER :: 0x8091;
    GL_TEXTURE_COORD_ARRAY_POINTER :: 0x8092;
    GL_EDGE_FLAG_ARRAY_POINTER :: 0x8093;
    GL_FEEDBACK_BUFFER_POINTER :: 0x0DF0;
    GL_SELECTION_BUFFER_POINTER :: 0x0DF3;
    GL_CLIENT_ATTRIB_STACK_DEPTH :: 0x0BB1;
    GL_INDEX_LOGIC_OP :: 0x0BF1;
    GL_MAX_CLIENT_ATTRIB_STACK_DEPTH :: 0x0D3B;
    GL_FEEDBACK_BUFFER_SIZE :: 0x0DF1;
    GL_FEEDBACK_BUFFER_TYPE :: 0x0DF2;
    GL_SELECTION_BUFFER_SIZE :: 0x0DF4;
    GL_VERTEX_ARRAY :: 0x8074;
    GL_NORMAL_ARRAY :: 0x8075;
    GL_COLOR_ARRAY :: 0x8076;
    GL_INDEX_ARRAY :: 0x8077;
    GL_TEXTURE_COORD_ARRAY :: 0x8078;
    GL_EDGE_FLAG_ARRAY :: 0x8079;
    GL_VERTEX_ARRAY_SIZE :: 0x807A;
    GL_VERTEX_ARRAY_TYPE :: 0x807B;
    GL_VERTEX_ARRAY_STRIDE :: 0x807C;
    GL_NORMAL_ARRAY_TYPE :: 0x807E;
    GL_NORMAL_ARRAY_STRIDE :: 0x807F;
    GL_COLOR_ARRAY_SIZE :: 0x8081;
    GL_COLOR_ARRAY_TYPE :: 0x8082;
    GL_COLOR_ARRAY_STRIDE :: 0x8083;
    GL_INDEX_ARRAY_TYPE :: 0x8085;
    GL_INDEX_ARRAY_STRIDE :: 0x8086;
    GL_TEXTURE_COORD_ARRAY_SIZE :: 0x8088;
    GL_TEXTURE_COORD_ARRAY_TYPE :: 0x8089;
    GL_TEXTURE_COORD_ARRAY_STRIDE :: 0x808A;
    GL_EDGE_FLAG_ARRAY_STRIDE :: 0x808C;
    GL_TEXTURE_LUMINANCE_SIZE :: 0x8060;
    GL_TEXTURE_INTENSITY_SIZE :: 0x8061;
    GL_TEXTURE_PRIORITY :: 0x8066;
    GL_TEXTURE_RESIDENT :: 0x8067;
    GL_ALPHA4 :: 0x803B;
    GL_ALPHA8 :: 0x803C;
    GL_ALPHA12 :: 0x803D;
    GL_ALPHA16 :: 0x803E;
    GL_LUMINANCE4 :: 0x803F;
    GL_LUMINANCE8 :: 0x8040;
    GL_LUMINANCE12 :: 0x8041;
    GL_LUMINANCE16 :: 0x8042;
    GL_LUMINANCE4_ALPHA4 :: 0x8043;
    GL_LUMINANCE6_ALPHA2 :: 0x8044;
    GL_LUMINANCE8_ALPHA8 :: 0x8045;
    GL_LUMINANCE12_ALPHA4 :: 0x8046;
    GL_LUMINANCE12_ALPHA12 :: 0x8047;
    GL_LUMINANCE16_ALPHA16 :: 0x8048;
    GL_INTENSITY :: 0x8049;
    GL_INTENSITY4 :: 0x804A;
    GL_INTENSITY8 :: 0x804B;
    GL_INTENSITY12 :: 0x804C;
    GL_INTENSITY16 :: 0x804D;
    GL_V2F :: 0x2A20;
    GL_V3F :: 0x2A21;
    GL_C4UB_V2F :: 0x2A22;
    GL_C4UB_V3F :: 0x2A23;
    GL_C3F_V3F :: 0x2A24;
    GL_N3F_V3F :: 0x2A25;
    GL_C4F_N3F_V3F :: 0x2A26;
    GL_T2F_V3F :: 0x2A27;
    GL_T4F_V4F :: 0x2A28;
    GL_T2F_C4UB_V3F :: 0x2A29;
    GL_T2F_C3F_V3F :: 0x2A2A;
    GL_T2F_N3F_V3F :: 0x2A2B;
    GL_T2F_C4F_N3F_V3F :: 0x2A2C;
    GL_T4F_C4F_N3F_V4F :: 0x2A2D;

    // GL_VERSION_1_2
    GL_UNSIGNED_BYTE_3_3_2 :: 0x8032;
    GL_UNSIGNED_SHORT_4_4_4_4 :: 0x8033;
    GL_UNSIGNED_SHORT_5_5_5_1 :: 0x8034;
    GL_UNSIGNED_INT_8_8_8_8 :: 0x8035;
    GL_UNSIGNED_INT_10_10_10_2 :: 0x8036;
    GL_TEXTURE_BINDING_3D :: 0x806A;
    GL_PACK_SKIP_IMAGES :: 0x806B;
    GL_PACK_IMAGE_HEIGHT :: 0x806C;
    GL_UNPACK_SKIP_IMAGES :: 0x806D;
    GL_UNPACK_IMAGE_HEIGHT :: 0x806E;
    GL_TEXTURE_3D :: 0x806F;
    GL_PROXY_TEXTURE_3D :: 0x8070;
    GL_TEXTURE_DEPTH :: 0x8071;
    GL_TEXTURE_WRAP_R :: 0x8072;
    GL_MAX_3D_TEXTURE_SIZE :: 0x8073;
    GL_UNSIGNED_BYTE_2_3_3_REV :: 0x8362;
    GL_UNSIGNED_SHORT_5_6_5 :: 0x8363;
    GL_UNSIGNED_SHORT_5_6_5_REV :: 0x8364;
    GL_UNSIGNED_SHORT_4_4_4_4_REV :: 0x8365;
    GL_UNSIGNED_SHORT_1_5_5_5_REV :: 0x8366;
    GL_UNSIGNED_INT_8_8_8_8_REV :: 0x8367;
    GL_UNSIGNED_INT_2_10_10_10_REV :: 0x8368;
    GL_BGR :: 0x80E0;
    GL_BGRA :: 0x80E1;
    GL_MAX_ELEMENTS_VERTICES :: 0x80E8;
    GL_MAX_ELEMENTS_INDICES :: 0x80E9;
    GL_CLAMP_TO_EDGE :: 0x812F;
    GL_TEXTURE_MIN_LOD :: 0x813A;
    GL_TEXTURE_MAX_LOD :: 0x813B;
    GL_TEXTURE_BASE_LEVEL :: 0x813C;
    GL_TEXTURE_MAX_LEVEL :: 0x813D;
    GL_SMOOTH_POINT_SIZE_RANGE :: 0x0B12;
    GL_SMOOTH_POINT_SIZE_GRANULARITY :: 0x0B13;
    GL_SMOOTH_LINE_WIDTH_RANGE :: 0x0B22;
    GL_SMOOTH_LINE_WIDTH_GRANULARITY :: 0x0B23;
    GL_ALIASED_LINE_WIDTH_RANGE :: 0x846E;
    GL_RESCALE_NORMAL :: 0x803A;
    GL_LIGHT_MODEL_COLOR_CONTROL :: 0x81F8;
    GL_SINGLE_COLOR :: 0x81F9;
    GL_SEPARATE_SPECULAR_COLOR :: 0x81FA;
    GL_ALIASED_POINT_SIZE_RANGE :: 0x846D;

    // GL_VERSION_1_3
    GL_TEXTURE0 :: 0x84C0;
    GL_TEXTURE1 :: 0x84C1;
    GL_TEXTURE2 :: 0x84C2;
    GL_TEXTURE3 :: 0x84C3;
    GL_TEXTURE4 :: 0x84C4;
    GL_TEXTURE5 :: 0x84C5;
    GL_TEXTURE6 :: 0x84C6;
    GL_TEXTURE7 :: 0x84C7;
    GL_TEXTURE8 :: 0x84C8;
    GL_TEXTURE9 :: 0x84C9;
    GL_TEXTURE10 :: 0x84CA;
    GL_TEXTURE11 :: 0x84CB;
    GL_TEXTURE12 :: 0x84CC;
    GL_TEXTURE13 :: 0x84CD;
    GL_TEXTURE14 :: 0x84CE;
    GL_TEXTURE15 :: 0x84CF;
    GL_TEXTURE16 :: 0x84D0;
    GL_TEXTURE17 :: 0x84D1;
    GL_TEXTURE18 :: 0x84D2;
    GL_TEXTURE19 :: 0x84D3;
    GL_TEXTURE20 :: 0x84D4;
    GL_TEXTURE21 :: 0x84D5;
    GL_TEXTURE22 :: 0x84D6;
    GL_TEXTURE23 :: 0x84D7;
    GL_TEXTURE24 :: 0x84D8;
    GL_TEXTURE25 :: 0x84D9;
    GL_TEXTURE26 :: 0x84DA;
    GL_TEXTURE27 :: 0x84DB;
    GL_TEXTURE28 :: 0x84DC;
    GL_TEXTURE29 :: 0x84DD;
    GL_TEXTURE30 :: 0x84DE;
    GL_TEXTURE31 :: 0x84DF;
    GL_ACTIVE_TEXTURE :: 0x84E0;
    GL_MULTISAMPLE :: 0x809D;
    GL_SAMPLE_ALPHA_TO_COVERAGE :: 0x809E;
    GL_SAMPLE_ALPHA_TO_ONE :: 0x809F;
    GL_SAMPLE_COVERAGE :: 0x80A0;
    GL_SAMPLE_BUFFERS :: 0x80A8;
    GL_SAMPLES :: 0x80A9;
    GL_SAMPLE_COVERAGE_VALUE :: 0x80AA;
    GL_SAMPLE_COVERAGE_INVERT :: 0x80AB;
    GL_TEXTURE_CUBE_MAP :: 0x8513;
    GL_TEXTURE_BINDING_CUBE_MAP :: 0x8514;
    GL_TEXTURE_CUBE_MAP_POSITIVE_X :: 0x8515;
    GL_TEXTURE_CUBE_MAP_NEGATIVE_X :: 0x8516;
    GL_TEXTURE_CUBE_MAP_POSITIVE_Y :: 0x8517;
    GL_TEXTURE_CUBE_MAP_NEGATIVE_Y :: 0x8518;
    GL_TEXTURE_CUBE_MAP_POSITIVE_Z :: 0x8519;
    GL_TEXTURE_CUBE_MAP_NEGATIVE_Z :: 0x851A;
    GL_PROXY_TEXTURE_CUBE_MAP :: 0x851B;
    GL_MAX_CUBE_MAP_TEXTURE_SIZE :: 0x851C;
    GL_COMPRESSED_RGB :: 0x84ED;
    GL_COMPRESSED_RGBA :: 0x84EE;
    GL_TEXTURE_COMPRESSION_HINT :: 0x84EF;
    GL_TEXTURE_COMPRESSED_IMAGE_SIZE :: 0x86A0;
    GL_TEXTURE_COMPRESSED :: 0x86A1;
    GL_NUM_COMPRESSED_TEXTURE_FORMATS :: 0x86A2;
    GL_COMPRESSED_TEXTURE_FORMATS :: 0x86A3;
    GL_CLAMP_TO_BORDER :: 0x812D;
    GL_CLIENT_ACTIVE_TEXTURE :: 0x84E1;
    GL_MAX_TEXTURE_UNITS :: 0x84E2;
    GL_TRANSPOSE_MODELVIEW_MATRIX :: 0x84E3;
    GL_TRANSPOSE_PROJECTION_MATRIX :: 0x84E4;
    GL_TRANSPOSE_TEXTURE_MATRIX :: 0x84E5;
    GL_TRANSPOSE_COLOR_MATRIX :: 0x84E6;
    GL_MULTISAMPLE_BIT :: 0x20000000;
    GL_NORMAL_MAP :: 0x8511;
    GL_REFLECTION_MAP :: 0x8512;
    GL_COMPRESSED_ALPHA :: 0x84E9;
    GL_COMPRESSED_LUMINANCE :: 0x84EA;
    GL_COMPRESSED_LUMINANCE_ALPHA :: 0x84EB;
    GL_COMPRESSED_INTENSITY :: 0x84EC;
    GL_COMBINE :: 0x8570;
    GL_COMBINE_RGB :: 0x8571;
    GL_COMBINE_ALPHA :: 0x8572;
    GL_SOURCE0_RGB :: 0x8580;
    GL_SOURCE1_RGB :: 0x8581;
    GL_SOURCE2_RGB :: 0x8582;
    GL_SOURCE0_ALPHA :: 0x8588;
    GL_SOURCE1_ALPHA :: 0x8589;
    GL_SOURCE2_ALPHA :: 0x858A;
    GL_OPERAND0_RGB :: 0x8590;
    GL_OPERAND1_RGB :: 0x8591;
    GL_OPERAND2_RGB :: 0x8592;
    GL_OPERAND0_ALPHA :: 0x8598;
    GL_OPERAND1_ALPHA :: 0x8599;
    GL_OPERAND2_ALPHA :: 0x859A;
    GL_RGB_SCALE :: 0x8573;
    GL_ADD_SIGNED :: 0x8574;
    GL_INTERPOLATE :: 0x8575;
    GL_SUBTRACT :: 0x84E7;
    GL_CONSTANT :: 0x8576;
    GL_PRIMARY_COLOR :: 0x8577;
    GL_PREVIOUS :: 0x8578;
    GL_DOT3_RGB :: 0x86AE;
    GL_DOT3_RGBA :: 0x86AF;

    // GL_VERSION_1_4
    GL_BLEND_DST_RGB :: 0x80C8;
    GL_BLEND_SRC_RGB :: 0x80C9;
    GL_BLEND_DST_ALPHA :: 0x80CA;
    GL_BLEND_SRC_ALPHA :: 0x80CB;
    GL_POINT_FADE_THRESHOLD_SIZE :: 0x8128;
    GL_DEPTH_COMPONENT16 :: 0x81A5;
    GL_DEPTH_COMPONENT24 :: 0x81A6;
    GL_DEPTH_COMPONENT32 :: 0x81A7;
    GL_MIRRORED_REPEAT :: 0x8370;
    GL_MAX_TEXTURE_LOD_BIAS :: 0x84FD;
    GL_TEXTURE_LOD_BIAS :: 0x8501;
    GL_INCR_WRAP :: 0x8507;
    GL_DECR_WRAP :: 0x8508;
    GL_TEXTURE_DEPTH_SIZE :: 0x884A;
    GL_TEXTURE_COMPARE_MODE :: 0x884C;
    GL_TEXTURE_COMPARE_FUNC :: 0x884D;
    GL_POINT_SIZE_MIN :: 0x8126;
    GL_POINT_SIZE_MAX :: 0x8127;
    GL_POINT_DISTANCE_ATTENUATION :: 0x8129;
    GL_GENERATE_MIPMAP :: 0x8191;
    GL_GENERATE_MIPMAP_HINT :: 0x8192;
    GL_FOG_COORDINATE_SOURCE :: 0x8450;
    GL_FOG_COORDINATE :: 0x8451;
    GL_FRAGMENT_DEPTH :: 0x8452;
    GL_CURRENT_FOG_COORDINATE :: 0x8453;
    GL_FOG_COORDINATE_ARRAY_TYPE :: 0x8454;
    GL_FOG_COORDINATE_ARRAY_STRIDE :: 0x8455;
    GL_FOG_COORDINATE_ARRAY_POINTER :: 0x8456;
    GL_FOG_COORDINATE_ARRAY :: 0x8457;
    GL_COLOR_SUM :: 0x8458;
    GL_CURRENT_SECONDARY_COLOR :: 0x8459;
    GL_SECONDARY_COLOR_ARRAY_SIZE :: 0x845A;
    GL_SECONDARY_COLOR_ARRAY_TYPE :: 0x845B;
    GL_SECONDARY_COLOR_ARRAY_STRIDE :: 0x845C;
    GL_SECONDARY_COLOR_ARRAY_POINTER :: 0x845D;
    GL_SECONDARY_COLOR_ARRAY :: 0x845E;
    GL_TEXTURE_FILTER_CONTROL :: 0x8500;
    GL_DEPTH_TEXTURE_MODE :: 0x884B;
    GL_COMPARE_R_TO_TEXTURE :: 0x884E;
    GL_BLEND_COLOR :: 0x8005;
    GL_BLEND_EQUATION :: 0x8009;
    GL_CONSTANT_COLOR :: 0x8001;
    GL_ONE_MINUS_CONSTANT_COLOR :: 0x8002;
    GL_CONSTANT_ALPHA :: 0x8003;
    GL_ONE_MINUS_CONSTANT_ALPHA :: 0x8004;
    GL_FUNC_ADD :: 0x8006;
    GL_FUNC_REVERSE_SUBTRACT :: 0x800B;
    GL_FUNC_SUBTRACT :: 0x800A;
    GL_MIN :: 0x8007;
    GL_MAX :: 0x8008;

    // GL_VERSION_1_5
    GL_BUFFER_SIZE :: 0x8764;
    GL_BUFFER_USAGE :: 0x8765;
    GL_QUERY_COUNTER_BITS :: 0x8864;
    GL_CURRENT_QUERY :: 0x8865;
    GL_QUERY_RESULT :: 0x8866;
    GL_QUERY_RESULT_AVAILABLE :: 0x8867;
    GL_ARRAY_BUFFER :: 0x8892;
    GL_ELEMENT_ARRAY_BUFFER :: 0x8893;
    GL_ARRAY_BUFFER_BINDING :: 0x8894;
    GL_ELEMENT_ARRAY_BUFFER_BINDING :: 0x8895;
    GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING :: 0x889F;
    GL_READ_ONLY :: 0x88B8;
    GL_WRITE_ONLY :: 0x88B9;
    GL_READ_WRITE :: 0x88BA;
    GL_BUFFER_ACCESS :: 0x88BB;
    GL_BUFFER_MAPPED :: 0x88BC;
    GL_BUFFER_MAP_POINTER :: 0x88BD;
    GL_STREAM_DRAW :: 0x88E0;
    GL_STREAM_READ :: 0x88E1;
    GL_STREAM_COPY :: 0x88E2;
    GL_STATIC_DRAW :: 0x88E4;
    GL_STATIC_READ :: 0x88E5;
    GL_STATIC_COPY :: 0x88E6;
    GL_DYNAMIC_DRAW :: 0x88E8;
    GL_DYNAMIC_READ :: 0x88E9;
    GL_DYNAMIC_COPY :: 0x88EA;
    GL_SAMPLES_PASSED :: 0x8914;
    GL_SRC1_ALPHA :: 0x8589;
    GL_VERTEX_ARRAY_BUFFER_BINDING :: 0x8896;
    GL_NORMAL_ARRAY_BUFFER_BINDING :: 0x8897;
    GL_COLOR_ARRAY_BUFFER_BINDING :: 0x8898;
    GL_INDEX_ARRAY_BUFFER_BINDING :: 0x8899;
    GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING :: 0x889A;
    GL_EDGE_FLAG_ARRAY_BUFFER_BINDING :: 0x889B;
    GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING :: 0x889C;
    GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING :: 0x889D;
    GL_WEIGHT_ARRAY_BUFFER_BINDING :: 0x889E;
    GL_FOG_COORD_SRC :: 0x8450;
    GL_FOG_COORD :: 0x8451;
    GL_CURRENT_FOG_COORD :: 0x8453;
    GL_FOG_COORD_ARRAY_TYPE :: 0x8454;
    GL_FOG_COORD_ARRAY_STRIDE :: 0x8455;
    GL_FOG_COORD_ARRAY_POINTER :: 0x8456;
    GL_FOG_COORD_ARRAY :: 0x8457;
    GL_FOG_COORD_ARRAY_BUFFER_BINDING :: 0x889D;
    GL_SRC0_RGB :: 0x8580;
    GL_SRC1_RGB :: 0x8581;
    GL_SRC2_RGB :: 0x8582;
    GL_SRC0_ALPHA :: 0x8588;
    GL_SRC2_ALPHA :: 0x858A;

    // GL_VERSION_2_0
    GL_BLEND_EQUATION_RGB :: 0x8009;
    GL_VERTEX_ATTRIB_ARRAY_ENABLED :: 0x8622;
    GL_VERTEX_ATTRIB_ARRAY_SIZE :: 0x8623;
    GL_VERTEX_ATTRIB_ARRAY_STRIDE :: 0x8624;
    GL_VERTEX_ATTRIB_ARRAY_TYPE :: 0x8625;
    GL_CURRENT_VERTEX_ATTRIB :: 0x8626;
    GL_VERTEX_PROGRAM_POINT_SIZE :: 0x8642;
    GL_VERTEX_ATTRIB_ARRAY_POINTER :: 0x8645;
    GL_STENCIL_BACK_FUNC :: 0x8800;
    GL_STENCIL_BACK_FAIL :: 0x8801;
    GL_STENCIL_BACK_PASS_DEPTH_FAIL :: 0x8802;
    GL_STENCIL_BACK_PASS_DEPTH_PASS :: 0x8803;
    GL_MAX_DRAW_BUFFERS :: 0x8824;
    GL_DRAW_BUFFER0 :: 0x8825;
    GL_DRAW_BUFFER1 :: 0x8826;
    GL_DRAW_BUFFER2 :: 0x8827;
    GL_DRAW_BUFFER3 :: 0x8828;
    GL_DRAW_BUFFER4 :: 0x8829;
    GL_DRAW_BUFFER5 :: 0x882A;
    GL_DRAW_BUFFER6 :: 0x882B;
    GL_DRAW_BUFFER7 :: 0x882C;
    GL_DRAW_BUFFER8 :: 0x882D;
    GL_DRAW_BUFFER9 :: 0x882E;
    GL_DRAW_BUFFER10 :: 0x882F;
    GL_DRAW_BUFFER11 :: 0x8830;
    GL_DRAW_BUFFER12 :: 0x8831;
    GL_DRAW_BUFFER13 :: 0x8832;
    GL_DRAW_BUFFER14 :: 0x8833;
    GL_DRAW_BUFFER15 :: 0x8834;
    GL_BLEND_EQUATION_ALPHA :: 0x883D;
    GL_MAX_VERTEX_ATTRIBS :: 0x8869;
    GL_VERTEX_ATTRIB_ARRAY_NORMALIZED :: 0x886A;
    GL_MAX_TEXTURE_IMAGE_UNITS :: 0x8872;
    GL_FRAGMENT_SHADER :: 0x8B30;
    GL_VERTEX_SHADER :: 0x8B31;
    GL_MAX_FRAGMENT_UNIFORM_COMPONENTS :: 0x8B49;
    GL_MAX_VERTEX_UNIFORM_COMPONENTS :: 0x8B4A;
    GL_MAX_VARYING_FLOATS :: 0x8B4B;
    GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS :: 0x8B4C;
    GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS :: 0x8B4D;
    GL_SHADER_TYPE :: 0x8B4F;
    GL_FLOAT_VEC2 :: 0x8B50;
    GL_FLOAT_VEC3 :: 0x8B51;
    GL_FLOAT_VEC4 :: 0x8B52;
    GL_INT_VEC2 :: 0x8B53;
    GL_INT_VEC3 :: 0x8B54;
    GL_INT_VEC4 :: 0x8B55;
    GL_BOOL :: 0x8B56;
    GL_BOOL_VEC2 :: 0x8B57;
    GL_BOOL_VEC3 :: 0x8B58;
    GL_BOOL_VEC4 :: 0x8B59;
    GL_FLOAT_MAT2 :: 0x8B5A;
    GL_FLOAT_MAT3 :: 0x8B5B;
    GL_FLOAT_MAT4 :: 0x8B5C;
    GL_SAMPLER_1D :: 0x8B5D;
    GL_SAMPLER_2D :: 0x8B5E;
    GL_SAMPLER_3D :: 0x8B5F;
    GL_SAMPLER_CUBE :: 0x8B60;
    GL_SAMPLER_1D_SHADOW :: 0x8B61;
    GL_SAMPLER_2D_SHADOW :: 0x8B62;
    GL_DELETE_STATUS :: 0x8B80;
    GL_COMPILE_STATUS :: 0x8B81;
    GL_LINK_STATUS :: 0x8B82;
    GL_VALIDATE_STATUS :: 0x8B83;
    GL_INFO_LOG_LENGTH :: 0x8B84;
    GL_ATTACHED_SHADERS :: 0x8B85;
    GL_ACTIVE_UNIFORMS :: 0x8B86;
    GL_ACTIVE_UNIFORM_MAX_LENGTH :: 0x8B87;
    GL_SHADER_SOURCE_LENGTH :: 0x8B88;
    GL_ACTIVE_ATTRIBUTES :: 0x8B89;
    GL_ACTIVE_ATTRIBUTE_MAX_LENGTH :: 0x8B8A;
    GL_FRAGMENT_SHADER_DERIVATIVE_HINT :: 0x8B8B;
    GL_SHADING_LANGUAGE_VERSION :: 0x8B8C;
    GL_CURRENT_PROGRAM :: 0x8B8D;
    GL_POINT_SPRITE_COORD_ORIGIN :: 0x8CA0;
    GL_LOWER_LEFT :: 0x8CA1;
    GL_UPPER_LEFT :: 0x8CA2;
    GL_STENCIL_BACK_REF :: 0x8CA3;
    GL_STENCIL_BACK_VALUE_MASK :: 0x8CA4;
    GL_STENCIL_BACK_WRITEMASK :: 0x8CA5;
    GL_VERTEX_PROGRAM_TWO_SIDE :: 0x8643;
    GL_POINT_SPRITE :: 0x8861;
    GL_COORD_REPLACE :: 0x8862;
    GL_MAX_TEXTURE_COORDS :: 0x8871;

    // GL_VERSION_2_1
    GL_PIXEL_PACK_BUFFER :: 0x88EB;
    GL_PIXEL_UNPACK_BUFFER :: 0x88EC;
    GL_PIXEL_PACK_BUFFER_BINDING :: 0x88ED;
    GL_PIXEL_UNPACK_BUFFER_BINDING :: 0x88EF;
    GL_FLOAT_MAT2x3 :: 0x8B65;
    GL_FLOAT_MAT2x4 :: 0x8B66;
    GL_FLOAT_MAT3x2 :: 0x8B67;
    GL_FLOAT_MAT3x4 :: 0x8B68;
    GL_FLOAT_MAT4x2 :: 0x8B69;
    GL_FLOAT_MAT4x3 :: 0x8B6A;
    GL_SRGB :: 0x8C40;
    GL_SRGB8 :: 0x8C41;
    GL_SRGB_ALPHA :: 0x8C42;
    GL_SRGB8_ALPHA8 :: 0x8C43;
    GL_COMPRESSED_SRGB :: 0x8C48;
    GL_COMPRESSED_SRGB_ALPHA :: 0x8C49;
    GL_CURRENT_RASTER_SECONDARY_COLOR :: 0x845F;
    GL_SLUMINANCE_ALPHA :: 0x8C44;
    GL_SLUMINANCE8_ALPHA8 :: 0x8C45;
    GL_SLUMINANCE :: 0x8C46;
    GL_SLUMINANCE8 :: 0x8C47;
    GL_COMPRESSED_SLUMINANCE :: 0x8C4A;
    GL_COMPRESSED_SLUMINANCE_ALPHA :: 0x8C4B;

    // GL_VERSION_3_0
    GL_COMPARE_REF_TO_TEXTURE :: 0x884E;
    GL_CLIP_DISTANCE0 :: 0x3000;
    GL_CLIP_DISTANCE1 :: 0x3001;
    GL_CLIP_DISTANCE2 :: 0x3002;
    GL_CLIP_DISTANCE3 :: 0x3003;
    GL_CLIP_DISTANCE4 :: 0x3004;
    GL_CLIP_DISTANCE5 :: 0x3005;
    GL_CLIP_DISTANCE6 :: 0x3006;
    GL_CLIP_DISTANCE7 :: 0x3007;
    GL_MAX_CLIP_DISTANCES :: 0x0D32;
    GL_MAJOR_VERSION :: 0x821B;
    GL_MINOR_VERSION :: 0x821C;
    GL_NUM_EXTENSIONS :: 0x821D;
    GL_CONTEXT_FLAGS :: 0x821E;
    GL_COMPRESSED_RED :: 0x8225;
    GL_COMPRESSED_RG :: 0x8226;
    GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT :: 0x00000001;
    GL_RGBA32F :: 0x8814;
    GL_RGB32F :: 0x8815;
    GL_RGBA16F :: 0x881A;
    GL_RGB16F :: 0x881B;
    GL_VERTEX_ATTRIB_ARRAY_INTEGER :: 0x88FD;
    GL_MAX_ARRAY_TEXTURE_LAYERS :: 0x88FF;
    GL_MIN_PROGRAM_TEXEL_OFFSET :: 0x8904;
    GL_MAX_PROGRAM_TEXEL_OFFSET :: 0x8905;
    GL_CLAMP_READ_COLOR :: 0x891C;
    GL_FIXED_ONLY :: 0x891D;
    GL_MAX_VARYING_COMPONENTS :: 0x8B4B;
    GL_TEXTURE_1D_ARRAY :: 0x8C18;
    GL_PROXY_TEXTURE_1D_ARRAY :: 0x8C19;
    GL_TEXTURE_2D_ARRAY :: 0x8C1A;
    GL_PROXY_TEXTURE_2D_ARRAY :: 0x8C1B;
    GL_TEXTURE_BINDING_1D_ARRAY :: 0x8C1C;
    GL_TEXTURE_BINDING_2D_ARRAY :: 0x8C1D;
    GL_R11F_G11F_B10F :: 0x8C3A;
    GL_UNSIGNED_INT_10F_11F_11F_REV :: 0x8C3B;
    GL_RGB9_E5 :: 0x8C3D;
    GL_UNSIGNED_INT_5_9_9_9_REV :: 0x8C3E;
    GL_TEXTURE_SHARED_SIZE :: 0x8C3F;
    GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH :: 0x8C76;
    GL_TRANSFORM_FEEDBACK_BUFFER_MODE :: 0x8C7F;
    GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS :: 0x8C80;
    GL_TRANSFORM_FEEDBACK_VARYINGS :: 0x8C83;
    GL_TRANSFORM_FEEDBACK_BUFFER_START :: 0x8C84;
    GL_TRANSFORM_FEEDBACK_BUFFER_SIZE :: 0x8C85;
    GL_PRIMITIVES_GENERATED :: 0x8C87;
    GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN :: 0x8C88;
    GL_RASTERIZER_DISCARD :: 0x8C89;
    GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS :: 0x8C8A;
    GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS :: 0x8C8B;
    GL_INTERLEAVED_ATTRIBS :: 0x8C8C;
    GL_SEPARATE_ATTRIBS :: 0x8C8D;
    GL_TRANSFORM_FEEDBACK_BUFFER :: 0x8C8E;
    GL_TRANSFORM_FEEDBACK_BUFFER_BINDING :: 0x8C8F;
    GL_RGBA32UI :: 0x8D70;
    GL_RGB32UI :: 0x8D71;
    GL_RGBA16UI :: 0x8D76;
    GL_RGB16UI :: 0x8D77;
    GL_RGBA8UI :: 0x8D7C;
    GL_RGB8UI :: 0x8D7D;
    GL_RGBA32I :: 0x8D82;
    GL_RGB32I :: 0x8D83;
    GL_RGBA16I :: 0x8D88;
    GL_RGB16I :: 0x8D89;
    GL_RGBA8I :: 0x8D8E;
    GL_RGB8I :: 0x8D8F;
    GL_RED_INTEGER :: 0x8D94;
    GL_GREEN_INTEGER :: 0x8D95;
    GL_BLUE_INTEGER :: 0x8D96;
    GL_RGB_INTEGER :: 0x8D98;
    GL_RGBA_INTEGER :: 0x8D99;
    GL_BGR_INTEGER :: 0x8D9A;
    GL_BGRA_INTEGER :: 0x8D9B;
    GL_SAMPLER_1D_ARRAY :: 0x8DC0;
    GL_SAMPLER_2D_ARRAY :: 0x8DC1;
    GL_SAMPLER_1D_ARRAY_SHADOW :: 0x8DC3;
    GL_SAMPLER_2D_ARRAY_SHADOW :: 0x8DC4;
    GL_SAMPLER_CUBE_SHADOW :: 0x8DC5;
    GL_UNSIGNED_INT_VEC2 :: 0x8DC6;
    GL_UNSIGNED_INT_VEC3 :: 0x8DC7;
    GL_UNSIGNED_INT_VEC4 :: 0x8DC8;
    GL_INT_SAMPLER_1D :: 0x8DC9;
    GL_INT_SAMPLER_2D :: 0x8DCA;
    GL_INT_SAMPLER_3D :: 0x8DCB;
    GL_INT_SAMPLER_CUBE :: 0x8DCC;
    GL_INT_SAMPLER_1D_ARRAY :: 0x8DCE;
    GL_INT_SAMPLER_2D_ARRAY :: 0x8DCF;
    GL_UNSIGNED_INT_SAMPLER_1D :: 0x8DD1;
    GL_UNSIGNED_INT_SAMPLER_2D :: 0x8DD2;
    GL_UNSIGNED_INT_SAMPLER_3D :: 0x8DD3;
    GL_UNSIGNED_INT_SAMPLER_CUBE :: 0x8DD4;
    GL_UNSIGNED_INT_SAMPLER_1D_ARRAY :: 0x8DD6;
    GL_UNSIGNED_INT_SAMPLER_2D_ARRAY :: 0x8DD7;
    GL_QUERY_WAIT :: 0x8E13;
    GL_QUERY_NO_WAIT :: 0x8E14;
    GL_QUERY_BY_REGION_WAIT :: 0x8E15;
    GL_QUERY_BY_REGION_NO_WAIT :: 0x8E16;
    GL_BUFFER_ACCESS_FLAGS :: 0x911F;
    GL_BUFFER_MAP_LENGTH :: 0x9120;
    GL_BUFFER_MAP_OFFSET :: 0x9121;
    GL_DEPTH_COMPONENT32F :: 0x8CAC;
    GL_DEPTH32F_STENCIL8 :: 0x8CAD;
    GL_FLOAT_32_UNSIGNED_INT_24_8_REV :: 0x8DAD;
    GL_INVALID_FRAMEBUFFER_OPERATION :: 0x0506;
    GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING :: 0x8210;
    GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE :: 0x8211;
    GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE :: 0x8212;
    GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE :: 0x8213;
    GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE :: 0x8214;
    GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE :: 0x8215;
    GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE :: 0x8216;
    GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE :: 0x8217;
    GL_FRAMEBUFFER_DEFAULT :: 0x8218;
    GL_FRAMEBUFFER_UNDEFINED :: 0x8219;
    GL_DEPTH_STENCIL_ATTACHMENT :: 0x821A;
    GL_MAX_RENDERBUFFER_SIZE :: 0x84E8;
    GL_DEPTH_STENCIL :: 0x84F9;
    GL_UNSIGNED_INT_24_8 :: 0x84FA;
    GL_DEPTH24_STENCIL8 :: 0x88F0;
    GL_TEXTURE_STENCIL_SIZE :: 0x88F1;
    GL_TEXTURE_RED_TYPE :: 0x8C10;
    GL_TEXTURE_GREEN_TYPE :: 0x8C11;
    GL_TEXTURE_BLUE_TYPE :: 0x8C12;
    GL_TEXTURE_ALPHA_TYPE :: 0x8C13;
    GL_TEXTURE_DEPTH_TYPE :: 0x8C16;
    GL_UNSIGNED_NORMALIZED :: 0x8C17;
    GL_FRAMEBUFFER_BINDING :: 0x8CA6;
    GL_DRAW_FRAMEBUFFER_BINDING :: 0x8CA6;
    GL_RENDERBUFFER_BINDING :: 0x8CA7;
    GL_READ_FRAMEBUFFER :: 0x8CA8;
    GL_DRAW_FRAMEBUFFER :: 0x8CA9;
    GL_READ_FRAMEBUFFER_BINDING :: 0x8CAA;
    GL_RENDERBUFFER_SAMPLES :: 0x8CAB;
    GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE :: 0x8CD0;
    GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME :: 0x8CD1;
    GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL :: 0x8CD2;
    GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE :: 0x8CD3;
    GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER :: 0x8CD4;
    GL_FRAMEBUFFER_COMPLETE :: 0x8CD5;
    GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT :: 0x8CD6;
    GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT :: 0x8CD7;
    GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER :: 0x8CDB;
    GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER :: 0x8CDC;
    GL_FRAMEBUFFER_UNSUPPORTED :: 0x8CDD;
    GL_MAX_COLOR_ATTACHMENTS :: 0x8CDF;
    GL_COLOR_ATTACHMENT0 :: 0x8CE0;
    GL_COLOR_ATTACHMENT1 :: 0x8CE1;
    GL_COLOR_ATTACHMENT2 :: 0x8CE2;
    GL_COLOR_ATTACHMENT3 :: 0x8CE3;
    GL_COLOR_ATTACHMENT4 :: 0x8CE4;
    GL_COLOR_ATTACHMENT5 :: 0x8CE5;
    GL_COLOR_ATTACHMENT6 :: 0x8CE6;
    GL_COLOR_ATTACHMENT7 :: 0x8CE7;
    GL_COLOR_ATTACHMENT8 :: 0x8CE8;
    GL_COLOR_ATTACHMENT9 :: 0x8CE9;
    GL_COLOR_ATTACHMENT10 :: 0x8CEA;
    GL_COLOR_ATTACHMENT11 :: 0x8CEB;
    GL_COLOR_ATTACHMENT12 :: 0x8CEC;
    GL_COLOR_ATTACHMENT13 :: 0x8CED;
    GL_COLOR_ATTACHMENT14 :: 0x8CEE;
    GL_COLOR_ATTACHMENT15 :: 0x8CEF;
    GL_COLOR_ATTACHMENT16 :: 0x8CF0;
    GL_COLOR_ATTACHMENT17 :: 0x8CF1;
    GL_COLOR_ATTACHMENT18 :: 0x8CF2;
    GL_COLOR_ATTACHMENT19 :: 0x8CF3;
    GL_COLOR_ATTACHMENT20 :: 0x8CF4;
    GL_COLOR_ATTACHMENT21 :: 0x8CF5;
    GL_COLOR_ATTACHMENT22 :: 0x8CF6;
    GL_COLOR_ATTACHMENT23 :: 0x8CF7;
    GL_COLOR_ATTACHMENT24 :: 0x8CF8;
    GL_COLOR_ATTACHMENT25 :: 0x8CF9;
    GL_COLOR_ATTACHMENT26 :: 0x8CFA;
    GL_COLOR_ATTACHMENT27 :: 0x8CFB;
    GL_COLOR_ATTACHMENT28 :: 0x8CFC;
    GL_COLOR_ATTACHMENT29 :: 0x8CFD;
    GL_COLOR_ATTACHMENT30 :: 0x8CFE;
    GL_COLOR_ATTACHMENT31 :: 0x8CFF;
    GL_DEPTH_ATTACHMENT :: 0x8D00;
    GL_STENCIL_ATTACHMENT :: 0x8D20;
    GL_FRAMEBUFFER :: 0x8D40;
    GL_RENDERBUFFER :: 0x8D41;
    GL_RENDERBUFFER_WIDTH :: 0x8D42;
    GL_RENDERBUFFER_HEIGHT :: 0x8D43;
    GL_RENDERBUFFER_INTERNAL_FORMAT :: 0x8D44;
    GL_STENCIL_INDEX1 :: 0x8D46;
    GL_STENCIL_INDEX4 :: 0x8D47;
    GL_STENCIL_INDEX8 :: 0x8D48;
    GL_STENCIL_INDEX16 :: 0x8D49;
    GL_RENDERBUFFER_RED_SIZE :: 0x8D50;
    GL_RENDERBUFFER_GREEN_SIZE :: 0x8D51;
    GL_RENDERBUFFER_BLUE_SIZE :: 0x8D52;
    GL_RENDERBUFFER_ALPHA_SIZE :: 0x8D53;
    GL_RENDERBUFFER_DEPTH_SIZE :: 0x8D54;
    GL_RENDERBUFFER_STENCIL_SIZE :: 0x8D55;
    GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE :: 0x8D56;
    GL_MAX_SAMPLES :: 0x8D57;
    GL_INDEX :: 0x8222;
    GL_TEXTURE_LUMINANCE_TYPE :: 0x8C14;
    GL_TEXTURE_INTENSITY_TYPE :: 0x8C15;
    GL_FRAMEBUFFER_SRGB :: 0x8DB9;
    GL_HALF_FLOAT :: 0x140B;
    GL_MAP_READ_BIT :: 0x0001;
    GL_MAP_WRITE_BIT :: 0x0002;
    GL_MAP_INVALIDATE_RANGE_BIT :: 0x0004;
    GL_MAP_INVALIDATE_BUFFER_BIT :: 0x0008;
    GL_MAP_FLUSH_EXPLICIT_BIT :: 0x0010;
    GL_MAP_UNSYNCHRONIZED_BIT :: 0x0020;
    GL_COMPRESSED_RED_RGTC1 :: 0x8DBB;
    GL_COMPRESSED_SIGNED_RED_RGTC1 :: 0x8DBC;
    GL_COMPRESSED_RG_RGTC2 :: 0x8DBD;
    GL_COMPRESSED_SIGNED_RG_RGTC2 :: 0x8DBE;
    GL_RG :: 0x8227;
    GL_RG_INTEGER :: 0x8228;
    GL_R8 :: 0x8229;
    GL_R16 :: 0x822A;
    GL_RG8 :: 0x822B;
    GL_RG16 :: 0x822C;
    GL_R16F :: 0x822D;
    GL_R32F :: 0x822E;
    GL_RG16F :: 0x822F;
    GL_RG32F :: 0x8230;
    GL_R8I :: 0x8231;
    GL_R8UI :: 0x8232;
    GL_R16I :: 0x8233;
    GL_R16UI :: 0x8234;
    GL_R32I :: 0x8235;
    GL_R32UI :: 0x8236;
    GL_RG8I :: 0x8237;
    GL_RG8UI :: 0x8238;
    GL_RG16I :: 0x8239;
    GL_RG16UI :: 0x823A;
    GL_RG32I :: 0x823B;
    GL_RG32UI :: 0x823C;
    GL_VERTEX_ARRAY_BINDING :: 0x85B5;
    GL_CLAMP_VERTEX_COLOR :: 0x891A;
    GL_CLAMP_FRAGMENT_COLOR :: 0x891B;
    GL_ALPHA_INTEGER :: 0x8D97;

    // GL_VERSION_3_1
    GL_SAMPLER_2D_RECT :: 0x8B63;
    GL_SAMPLER_2D_RECT_SHADOW :: 0x8B64;
    GL_SAMPLER_BUFFER :: 0x8DC2;
    GL_INT_SAMPLER_2D_RECT :: 0x8DCD;
    GL_INT_SAMPLER_BUFFER :: 0x8DD0;
    GL_UNSIGNED_INT_SAMPLER_2D_RECT :: 0x8DD5;
    GL_UNSIGNED_INT_SAMPLER_BUFFER :: 0x8DD8;
    GL_TEXTURE_BUFFER :: 0x8C2A;
    GL_MAX_TEXTURE_BUFFER_SIZE :: 0x8C2B;
    GL_TEXTURE_BINDING_BUFFER :: 0x8C2C;
    GL_TEXTURE_BUFFER_DATA_STORE_BINDING :: 0x8C2D;
    GL_TEXTURE_RECTANGLE :: 0x84F5;
    GL_TEXTURE_BINDING_RECTANGLE :: 0x84F6;
    GL_PROXY_TEXTURE_RECTANGLE :: 0x84F7;
    GL_MAX_RECTANGLE_TEXTURE_SIZE :: 0x84F8;
    GL_R8_SNORM :: 0x8F94;
    GL_RG8_SNORM :: 0x8F95;
    GL_RGB8_SNORM :: 0x8F96;
    GL_RGBA8_SNORM :: 0x8F97;
    GL_R16_SNORM :: 0x8F98;
    GL_RG16_SNORM :: 0x8F99;
    GL_RGB16_SNORM :: 0x8F9A;
    GL_RGBA16_SNORM :: 0x8F9B;
    GL_SIGNED_NORMALIZED :: 0x8F9C;
    GL_PRIMITIVE_RESTART :: 0x8F9D;
    GL_PRIMITIVE_RESTART_INDEX :: 0x8F9E;
    GL_COPY_READ_BUFFER :: 0x8F36;
    GL_COPY_WRITE_BUFFER :: 0x8F37;
    GL_UNIFORM_BUFFER :: 0x8A11;
    GL_UNIFORM_BUFFER_BINDING :: 0x8A28;
    GL_UNIFORM_BUFFER_START :: 0x8A29;
    GL_UNIFORM_BUFFER_SIZE :: 0x8A2A;
    GL_MAX_VERTEX_UNIFORM_BLOCKS :: 0x8A2B;
    GL_MAX_GEOMETRY_UNIFORM_BLOCKS :: 0x8A2C;
    GL_MAX_FRAGMENT_UNIFORM_BLOCKS :: 0x8A2D;
    GL_MAX_COMBINED_UNIFORM_BLOCKS :: 0x8A2E;
    GL_MAX_UNIFORM_BUFFER_BINDINGS :: 0x8A2F;
    GL_MAX_UNIFORM_BLOCK_SIZE :: 0x8A30;
    GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS :: 0x8A31;
    GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS :: 0x8A32;
    GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS :: 0x8A33;
    GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT :: 0x8A34;
    GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH :: 0x8A35;
    GL_ACTIVE_UNIFORM_BLOCKS :: 0x8A36;
    GL_UNIFORM_TYPE :: 0x8A37;
    GL_UNIFORM_SIZE :: 0x8A38;
    GL_UNIFORM_NAME_LENGTH :: 0x8A39;
    GL_UNIFORM_BLOCK_INDEX :: 0x8A3A;
    GL_UNIFORM_OFFSET :: 0x8A3B;
    GL_UNIFORM_ARRAY_STRIDE :: 0x8A3C;
    GL_UNIFORM_MATRIX_STRIDE :: 0x8A3D;
    GL_UNIFORM_IS_ROW_MAJOR :: 0x8A3E;
    GL_UNIFORM_BLOCK_BINDING :: 0x8A3F;
    GL_UNIFORM_BLOCK_DATA_SIZE :: 0x8A40;
    GL_UNIFORM_BLOCK_NAME_LENGTH :: 0x8A41;
    GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS :: 0x8A42;
    GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES :: 0x8A43;
    GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER :: 0x8A44;
    GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER :: 0x8A45;
    GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER :: 0x8A46;
    GL_INVALID_INDEX :: 0xFFFFFFFF;

    // GL_VERSION_3_2
    GL_CONTEXT_CORE_PROFILE_BIT :: 0x00000001;
    GL_CONTEXT_COMPATIBILITY_PROFILE_BIT :: 0x00000002;
    GL_LINES_ADJACENCY :: 0x000A;
    GL_LINE_STRIP_ADJACENCY :: 0x000B;
    GL_TRIANGLES_ADJACENCY :: 0x000C;
    GL_TRIANGLE_STRIP_ADJACENCY :: 0x000D;
    GL_PROGRAM_POINT_SIZE :: 0x8642;
    GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS :: 0x8C29;
    GL_FRAMEBUFFER_ATTACHMENT_LAYERED :: 0x8DA7;
    GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS :: 0x8DA8;
    GL_GEOMETRY_SHADER :: 0x8DD9;
    GL_GEOMETRY_VERTICES_OUT :: 0x8916;
    GL_GEOMETRY_INPUT_TYPE :: 0x8917;
    GL_GEOMETRY_OUTPUT_TYPE :: 0x8918;
    GL_MAX_GEOMETRY_UNIFORM_COMPONENTS :: 0x8DDF;
    GL_MAX_GEOMETRY_OUTPUT_VERTICES :: 0x8DE0;
    GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS :: 0x8DE1;
    GL_MAX_VERTEX_OUTPUT_COMPONENTS :: 0x9122;
    GL_MAX_GEOMETRY_INPUT_COMPONENTS :: 0x9123;
    GL_MAX_GEOMETRY_OUTPUT_COMPONENTS :: 0x9124;
    GL_MAX_FRAGMENT_INPUT_COMPONENTS :: 0x9125;
    GL_CONTEXT_PROFILE_MASK :: 0x9126;
    GL_DEPTH_CLAMP :: 0x864F;
    GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION :: 0x8E4C;
    GL_FIRST_VERTEX_CONVENTION :: 0x8E4D;
    GL_LAST_VERTEX_CONVENTION :: 0x8E4E;
    GL_PROVOKING_VERTEX :: 0x8E4F;
    GL_TEXTURE_CUBE_MAP_SEAMLESS :: 0x884F;
    GL_MAX_SERVER_WAIT_TIMEOUT :: 0x9111;
    GL_OBJECT_TYPE :: 0x9112;
    GL_SYNC_CONDITION :: 0x9113;
    GL_SYNC_STATUS :: 0x9114;
    GL_SYNC_FLAGS :: 0x9115;
    GL_SYNC_FENCE :: 0x9116;
    GL_SYNC_GPU_COMMANDS_COMPLETE :: 0x9117;
    GL_UNSIGNALED :: 0x9118;
    GL_SIGNALED :: 0x9119;
    GL_ALREADY_SIGNALED :: 0x911A;
    GL_TIMEOUT_EXPIRED :: 0x911B;
    GL_CONDITION_SATISFIED :: 0x911C;
    GL_WAIT_FAILED :: 0x911D;
    GL_TIMEOUT_IGNORED :: 0xFFFFFFFFFFFFFFFF;
    GL_SYNC_FLUSH_COMMANDS_BIT :: 0x00000001;
    GL_SAMPLE_POSITION :: 0x8E50;
    GL_SAMPLE_MASK :: 0x8E51;
    GL_SAMPLE_MASK_VALUE :: 0x8E52;
    GL_MAX_SAMPLE_MASK_WORDS :: 0x8E59;
    GL_TEXTURE_2D_MULTISAMPLE :: 0x9100;
    GL_PROXY_TEXTURE_2D_MULTISAMPLE :: 0x9101;
    GL_TEXTURE_2D_MULTISAMPLE_ARRAY :: 0x9102;
    GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY :: 0x9103;
    GL_TEXTURE_BINDING_2D_MULTISAMPLE :: 0x9104;
    GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY :: 0x9105;
    GL_TEXTURE_SAMPLES :: 0x9106;
    GL_TEXTURE_FIXED_SAMPLE_LOCATIONS :: 0x9107;
    GL_SAMPLER_2D_MULTISAMPLE :: 0x9108;
    GL_INT_SAMPLER_2D_MULTISAMPLE :: 0x9109;
    GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE :: 0x910A;
    GL_SAMPLER_2D_MULTISAMPLE_ARRAY :: 0x910B;
    GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY :: 0x910C;
    GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY :: 0x910D;
    GL_MAX_COLOR_TEXTURE_SAMPLES :: 0x910E;
    GL_MAX_DEPTH_TEXTURE_SAMPLES :: 0x910F;
    GL_MAX_INTEGER_SAMPLES :: 0x9110;

    // GL_VERSION_3_3
    GL_VERTEX_ATTRIB_ARRAY_DIVISOR :: 0x88FE;
    GL_SRC1_COLOR :: 0x88F9;
    GL_ONE_MINUS_SRC1_COLOR :: 0x88FA;
    GL_ONE_MINUS_SRC1_ALPHA :: 0x88FB;
    GL_MAX_DUAL_SOURCE_DRAW_BUFFERS :: 0x88FC;
    GL_ANY_SAMPLES_PASSED :: 0x8C2F;
    GL_SAMPLER_BINDING :: 0x8919;
    GL_RGB10_A2UI :: 0x906F;
    GL_TEXTURE_SWIZZLE_R :: 0x8E42;
    GL_TEXTURE_SWIZZLE_G :: 0x8E43;
    GL_TEXTURE_SWIZZLE_B :: 0x8E44;
    GL_TEXTURE_SWIZZLE_A :: 0x8E45;
    GL_TEXTURE_SWIZZLE_RGBA :: 0x8E46;
    GL_TIME_ELAPSED :: 0x88BF;
    GL_TIMESTAMP :: 0x8E28;
    GL_INT_2_10_10_10_REV :: 0x8D9F;

    // GL_VERSION_4_0
    GL_SAMPLE_SHADING :: 0x8C36;
    GL_MIN_SAMPLE_SHADING_VALUE :: 0x8C37;
    GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET :: 0x8E5E;
    GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET :: 0x8E5F;
    GL_TEXTURE_CUBE_MAP_ARRAY :: 0x9009;
    GL_TEXTURE_BINDING_CUBE_MAP_ARRAY :: 0x900A;
    GL_PROXY_TEXTURE_CUBE_MAP_ARRAY :: 0x900B;
    GL_SAMPLER_CUBE_MAP_ARRAY :: 0x900C;
    GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW :: 0x900D;
    GL_INT_SAMPLER_CUBE_MAP_ARRAY :: 0x900E;
    GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY :: 0x900F;
    GL_DRAW_INDIRECT_BUFFER :: 0x8F3F;
    GL_DRAW_INDIRECT_BUFFER_BINDING :: 0x8F43;
    GL_GEOMETRY_SHADER_INVOCATIONS :: 0x887F;
    GL_MAX_GEOMETRY_SHADER_INVOCATIONS :: 0x8E5A;
    GL_MIN_FRAGMENT_INTERPOLATION_OFFSET :: 0x8E5B;
    GL_MAX_FRAGMENT_INTERPOLATION_OFFSET :: 0x8E5C;
    GL_FRAGMENT_INTERPOLATION_OFFSET_BITS :: 0x8E5D;
    GL_MAX_VERTEX_STREAMS :: 0x8E71;
    GL_DOUBLE_VEC2 :: 0x8FFC;
    GL_DOUBLE_VEC3 :: 0x8FFD;
    GL_DOUBLE_VEC4 :: 0x8FFE;
    GL_DOUBLE_MAT2 :: 0x8F46;
    GL_DOUBLE_MAT3 :: 0x8F47;
    GL_DOUBLE_MAT4 :: 0x8F48;
    GL_DOUBLE_MAT2x3 :: 0x8F49;
    GL_DOUBLE_MAT2x4 :: 0x8F4A;
    GL_DOUBLE_MAT3x2 :: 0x8F4B;
    GL_DOUBLE_MAT3x4 :: 0x8F4C;
    GL_DOUBLE_MAT4x2 :: 0x8F4D;
    GL_DOUBLE_MAT4x3 :: 0x8F4E;
    GL_ACTIVE_SUBROUTINES :: 0x8DE5;
    GL_ACTIVE_SUBROUTINE_UNIFORMS :: 0x8DE6;
    GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS :: 0x8E47;
    GL_ACTIVE_SUBROUTINE_MAX_LENGTH :: 0x8E48;
    GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH :: 0x8E49;
    GL_MAX_SUBROUTINES :: 0x8DE7;
    GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS :: 0x8DE8;
    GL_NUM_COMPATIBLE_SUBROUTINES :: 0x8E4A;
    GL_COMPATIBLE_SUBROUTINES :: 0x8E4B;
    GL_PATCHES :: 0x000E;
    GL_PATCH_VERTICES :: 0x8E72;
    GL_PATCH_DEFAULT_INNER_LEVEL :: 0x8E73;
    GL_PATCH_DEFAULT_OUTER_LEVEL :: 0x8E74;
    GL_TESS_CONTROL_OUTPUT_VERTICES :: 0x8E75;
    GL_TESS_GEN_MODE :: 0x8E76;
    GL_TESS_GEN_SPACING :: 0x8E77;
    GL_TESS_GEN_VERTEX_ORDER :: 0x8E78;
    GL_TESS_GEN_POINT_MODE :: 0x8E79;
    GL_ISOLINES :: 0x8E7A;
    // GL_QUADS :: 0x0007;
    GL_FRACTIONAL_ODD :: 0x8E7B;
    GL_FRACTIONAL_EVEN :: 0x8E7C;
    GL_MAX_PATCH_VERTICES :: 0x8E7D;
    GL_MAX_TESS_GEN_LEVEL :: 0x8E7E;
    GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS :: 0x8E7F;
    GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS :: 0x8E80;
    GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS :: 0x8E81;
    GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS :: 0x8E82;
    GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS :: 0x8E83;
    GL_MAX_TESS_PATCH_COMPONENTS :: 0x8E84;
    GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS :: 0x8E85;
    GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS :: 0x8E86;
    GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS :: 0x8E89;
    GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS :: 0x8E8A;
    GL_MAX_TESS_CONTROL_INPUT_COMPONENTS :: 0x886C;
    GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS :: 0x886D;
    GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS :: 0x8E1E;
    GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS :: 0x8E1F;
    GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER :: 0x84F0;
    GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER :: 0x84F1;
    GL_TESS_EVALUATION_SHADER :: 0x8E87;
    GL_TESS_CONTROL_SHADER :: 0x8E88;
    GL_TRANSFORM_FEEDBACK :: 0x8E22;
    GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED :: 0x8E23;
    GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE :: 0x8E24;
    GL_TRANSFORM_FEEDBACK_BINDING :: 0x8E25;
    GL_MAX_TRANSFORM_FEEDBACK_BUFFERS :: 0x8E70;
    // GL_MAX_VERTEX_STREAMS :: 0x8E71;

    // GL_VERSION_4_1
    GL_FIXED :: 0x140C;
    GL_IMPLEMENTATION_COLOR_READ_TYPE :: 0x8B9A;
    GL_IMPLEMENTATION_COLOR_READ_FORMAT :: 0x8B9B;
    GL_LOW_FLOAT :: 0x8DF0;
    GL_MEDIUM_FLOAT :: 0x8DF1;
    GL_HIGH_FLOAT :: 0x8DF2;
    GL_LOW_INT :: 0x8DF3;
    GL_MEDIUM_INT :: 0x8DF4;
    GL_HIGH_INT :: 0x8DF5;
    GL_SHADER_COMPILER :: 0x8DFA;
    GL_SHADER_BINARY_FORMATS :: 0x8DF8;
    GL_NUM_SHADER_BINARY_FORMATS :: 0x8DF9;
    GL_MAX_VERTEX_UNIFORM_VECTORS :: 0x8DFB;
    GL_MAX_VARYING_VECTORS :: 0x8DFC;
    GL_MAX_FRAGMENT_UNIFORM_VECTORS :: 0x8DFD;
    GL_RGB565 :: 0x8D62;
    GL_PROGRAM_BINARY_RETRIEVABLE_HINT :: 0x8257;
    GL_PROGRAM_BINARY_LENGTH :: 0x8741;
    GL_NUM_PROGRAM_BINARY_FORMATS :: 0x87FE;
    GL_PROGRAM_BINARY_FORMATS :: 0x87FF;
    GL_VERTEX_SHADER_BIT :: 0x00000001;
    GL_FRAGMENT_SHADER_BIT :: 0x00000002;
    GL_GEOMETRY_SHADER_BIT :: 0x00000004;
    GL_TESS_CONTROL_SHADER_BIT :: 0x00000008;
    GL_TESS_EVALUATION_SHADER_BIT :: 0x00000010;
    GL_ALL_SHADER_BITS :: 0xFFFFFFFF;
    GL_PROGRAM_SEPARABLE :: 0x8258;
    GL_ACTIVE_PROGRAM :: 0x8259;
    GL_PROGRAM_PIPELINE_BINDING :: 0x825A;
    GL_MAX_VIEWPORTS :: 0x825B;
    GL_VIEWPORT_SUBPIXEL_BITS :: 0x825C;
    GL_VIEWPORT_BOUNDS_RANGE :: 0x825D;
    GL_LAYER_PROVOKING_VERTEX :: 0x825E;
    GL_VIEWPORT_INDEX_PROVOKING_VERTEX :: 0x825F;
    GL_UNDEFINED_VERTEX :: 0x8260;

    // GL_VERSION_4_2
    GL_COPY_READ_BUFFER_BINDING :: 0x8F36;
    GL_COPY_WRITE_BUFFER_BINDING :: 0x8F37;
    GL_TRANSFORM_FEEDBACK_ACTIVE :: 0x8E24;
    GL_TRANSFORM_FEEDBACK_PAUSED :: 0x8E23;
    GL_UNPACK_COMPRESSED_BLOCK_WIDTH :: 0x9127;
    GL_UNPACK_COMPRESSED_BLOCK_HEIGHT :: 0x9128;
    GL_UNPACK_COMPRESSED_BLOCK_DEPTH :: 0x9129;
    GL_UNPACK_COMPRESSED_BLOCK_SIZE :: 0x912A;
    GL_PACK_COMPRESSED_BLOCK_WIDTH :: 0x912B;
    GL_PACK_COMPRESSED_BLOCK_HEIGHT :: 0x912C;
    GL_PACK_COMPRESSED_BLOCK_DEPTH :: 0x912D;
    GL_PACK_COMPRESSED_BLOCK_SIZE :: 0x912E;
    GL_NUM_SAMPLE_COUNTS :: 0x9380;
    GL_MIN_MAP_BUFFER_ALIGNMENT :: 0x90BC;
    GL_ATOMIC_COUNTER_BUFFER :: 0x92C0;
    GL_ATOMIC_COUNTER_BUFFER_BINDING :: 0x92C1;
    GL_ATOMIC_COUNTER_BUFFER_START :: 0x92C2;
    GL_ATOMIC_COUNTER_BUFFER_SIZE :: 0x92C3;
    GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE :: 0x92C4;
    GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS :: 0x92C5;
    GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES :: 0x92C6;
    GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER :: 0x92C7;
    GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER :: 0x92C8;
    GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER :: 0x92C9;
    GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER :: 0x92CA;
    GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER :: 0x92CB;
    GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS :: 0x92CC;
    GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS :: 0x92CD;
    GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS :: 0x92CE;
    GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS :: 0x92CF;
    GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS :: 0x92D0;
    GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS :: 0x92D1;
    GL_MAX_VERTEX_ATOMIC_COUNTERS :: 0x92D2;
    GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS :: 0x92D3;
    GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS :: 0x92D4;
    GL_MAX_GEOMETRY_ATOMIC_COUNTERS :: 0x92D5;
    GL_MAX_FRAGMENT_ATOMIC_COUNTERS :: 0x92D6;
    GL_MAX_COMBINED_ATOMIC_COUNTERS :: 0x92D7;
    GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE :: 0x92D8;
    GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS :: 0x92DC;
    GL_ACTIVE_ATOMIC_COUNTER_BUFFERS :: 0x92D9;
    GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX :: 0x92DA;
    GL_UNSIGNED_INT_ATOMIC_COUNTER :: 0x92DB;
    GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT :: 0x00000001;
    GL_ELEMENT_ARRAY_BARRIER_BIT :: 0x00000002;
    GL_UNIFORM_BARRIER_BIT :: 0x00000004;
    GL_TEXTURE_FETCH_BARRIER_BIT :: 0x00000008;
    GL_SHADER_IMAGE_ACCESS_BARRIER_BIT :: 0x00000020;
    GL_COMMAND_BARRIER_BIT :: 0x00000040;
    GL_PIXEL_BUFFER_BARRIER_BIT :: 0x00000080;
    GL_TEXTURE_UPDATE_BARRIER_BIT :: 0x00000100;
    GL_BUFFER_UPDATE_BARRIER_BIT :: 0x00000200;
    GL_FRAMEBUFFER_BARRIER_BIT :: 0x00000400;
    GL_TRANSFORM_FEEDBACK_BARRIER_BIT :: 0x00000800;
    GL_ATOMIC_COUNTER_BARRIER_BIT :: 0x00001000;
    GL_ALL_BARRIER_BITS :: 0xFFFFFFFF;
    GL_MAX_IMAGE_UNITS :: 0x8F38;
    GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS :: 0x8F39;
    GL_IMAGE_BINDING_NAME :: 0x8F3A;
    GL_IMAGE_BINDING_LEVEL :: 0x8F3B;
    GL_IMAGE_BINDING_LAYERED :: 0x8F3C;
    GL_IMAGE_BINDING_LAYER :: 0x8F3D;
    GL_IMAGE_BINDING_ACCESS :: 0x8F3E;
    GL_IMAGE_1D :: 0x904C;
    GL_IMAGE_2D :: 0x904D;
    GL_IMAGE_3D :: 0x904E;
    GL_IMAGE_2D_RECT :: 0x904F;
    GL_IMAGE_CUBE :: 0x9050;
    GL_IMAGE_BUFFER :: 0x9051;
    GL_IMAGE_1D_ARRAY :: 0x9052;
    GL_IMAGE_2D_ARRAY :: 0x9053;
    GL_IMAGE_CUBE_MAP_ARRAY :: 0x9054;
    GL_IMAGE_2D_MULTISAMPLE :: 0x9055;
    GL_IMAGE_2D_MULTISAMPLE_ARRAY :: 0x9056;
    GL_INT_IMAGE_1D :: 0x9057;
    GL_INT_IMAGE_2D :: 0x9058;
    GL_INT_IMAGE_3D :: 0x9059;
    GL_INT_IMAGE_2D_RECT :: 0x905A;
    GL_INT_IMAGE_CUBE :: 0x905B;
    GL_INT_IMAGE_BUFFER :: 0x905C;
    GL_INT_IMAGE_1D_ARRAY :: 0x905D;
    GL_INT_IMAGE_2D_ARRAY :: 0x905E;
    GL_INT_IMAGE_CUBE_MAP_ARRAY :: 0x905F;
    GL_INT_IMAGE_2D_MULTISAMPLE :: 0x9060;
    GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY :: 0x9061;
    GL_UNSIGNED_INT_IMAGE_1D :: 0x9062;
    GL_UNSIGNED_INT_IMAGE_2D :: 0x9063;
    GL_UNSIGNED_INT_IMAGE_3D :: 0x9064;
    GL_UNSIGNED_INT_IMAGE_2D_RECT :: 0x9065;
    GL_UNSIGNED_INT_IMAGE_CUBE :: 0x9066;
    GL_UNSIGNED_INT_IMAGE_BUFFER :: 0x9067;
    GL_UNSIGNED_INT_IMAGE_1D_ARRAY :: 0x9068;
    GL_UNSIGNED_INT_IMAGE_2D_ARRAY :: 0x9069;
    GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY :: 0x906A;
    GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE :: 0x906B;
    GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY :: 0x906C;
    GL_MAX_IMAGE_SAMPLES :: 0x906D;
    GL_IMAGE_BINDING_FORMAT :: 0x906E;
    GL_IMAGE_FORMAT_COMPATIBILITY_TYPE :: 0x90C7;
    GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE :: 0x90C8;
    GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS :: 0x90C9;
    GL_MAX_VERTEX_IMAGE_UNIFORMS :: 0x90CA;
    GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS :: 0x90CB;
    GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS :: 0x90CC;
    GL_MAX_GEOMETRY_IMAGE_UNIFORMS :: 0x90CD;
    GL_MAX_FRAGMENT_IMAGE_UNIFORMS :: 0x90CE;
    GL_MAX_COMBINED_IMAGE_UNIFORMS :: 0x90CF;
    GL_COMPRESSED_RGBA_BPTC_UNORM :: 0x8E8C;
    GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM :: 0x8E8D;
    GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT :: 0x8E8E;
    GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT :: 0x8E8F;
    GL_TEXTURE_IMMUTABLE_FORMAT :: 0x912F;

    // GL_VERSION_4_3
    GL_NUM_SHADING_LANGUAGE_VERSIONS :: 0x82E9;
    GL_VERTEX_ATTRIB_ARRAY_LONG :: 0x874E;
    GL_COMPRESSED_RGB8_ETC2 :: 0x9274;
    GL_COMPRESSED_SRGB8_ETC2 :: 0x9275;
    GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 :: 0x9276;
    GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 :: 0x9277;
    GL_COMPRESSED_RGBA8_ETC2_EAC :: 0x9278;
    GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC :: 0x9279;
    GL_COMPRESSED_R11_EAC :: 0x9270;
    GL_COMPRESSED_SIGNED_R11_EAC :: 0x9271;
    GL_COMPRESSED_RG11_EAC :: 0x9272;
    GL_COMPRESSED_SIGNED_RG11_EAC :: 0x9273;
    GL_PRIMITIVE_RESTART_FIXED_INDEX :: 0x8D69;
    GL_ANY_SAMPLES_PASSED_CONSERVATIVE :: 0x8D6A;
    GL_MAX_ELEMENT_INDEX :: 0x8D6B;
    GL_COMPUTE_SHADER :: 0x91B9;
    GL_MAX_COMPUTE_UNIFORM_BLOCKS :: 0x91BB;
    GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS :: 0x91BC;
    GL_MAX_COMPUTE_IMAGE_UNIFORMS :: 0x91BD;
    GL_MAX_COMPUTE_SHARED_MEMORY_SIZE :: 0x8262;
    GL_MAX_COMPUTE_UNIFORM_COMPONENTS :: 0x8263;
    GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS :: 0x8264;
    GL_MAX_COMPUTE_ATOMIC_COUNTERS :: 0x8265;
    GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS :: 0x8266;
    GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS :: 0x90EB;
    GL_MAX_COMPUTE_WORK_GROUP_COUNT :: 0x91BE;
    GL_MAX_COMPUTE_WORK_GROUP_SIZE :: 0x91BF;
    GL_COMPUTE_WORK_GROUP_SIZE :: 0x8267;
    GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER :: 0x90EC;
    GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER :: 0x90ED;
    GL_DISPATCH_INDIRECT_BUFFER :: 0x90EE;
    GL_DISPATCH_INDIRECT_BUFFER_BINDING :: 0x90EF;
    GL_COMPUTE_SHADER_BIT :: 0x00000020;
    GL_DEBUG_OUTPUT_SYNCHRONOUS :: 0x8242;
    GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH :: 0x8243;
    GL_DEBUG_CALLBACK_FUNCTION :: 0x8244;
    GL_DEBUG_CALLBACK_USER_PARAM :: 0x8245;
    GL_DEBUG_SOURCE_API :: 0x8246;
    GL_DEBUG_SOURCE_WINDOW_SYSTEM :: 0x8247;
    GL_DEBUG_SOURCE_SHADER_COMPILER :: 0x8248;
    GL_DEBUG_SOURCE_THIRD_PARTY :: 0x8249;
    GL_DEBUG_SOURCE_APPLICATION :: 0x824A;
    GL_DEBUG_SOURCE_OTHER :: 0x824B;
    GL_DEBUG_TYPE_ERROR :: 0x824C;
    GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR :: 0x824D;
    GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR :: 0x824E;
    GL_DEBUG_TYPE_PORTABILITY :: 0x824F;
    GL_DEBUG_TYPE_PERFORMANCE :: 0x8250;
    GL_DEBUG_TYPE_OTHER :: 0x8251;
    GL_MAX_DEBUG_MESSAGE_LENGTH :: 0x9143;
    GL_MAX_DEBUG_LOGGED_MESSAGES :: 0x9144;
    GL_DEBUG_LOGGED_MESSAGES :: 0x9145;
    GL_DEBUG_SEVERITY_HIGH :: 0x9146;
    GL_DEBUG_SEVERITY_MEDIUM :: 0x9147;
    GL_DEBUG_SEVERITY_LOW :: 0x9148;
    GL_DEBUG_TYPE_MARKER :: 0x8268;
    GL_DEBUG_TYPE_PUSH_GROUP :: 0x8269;
    GL_DEBUG_TYPE_POP_GROUP :: 0x826A;
    GL_DEBUG_SEVERITY_NOTIFICATION :: 0x826B;
    GL_MAX_DEBUG_GROUP_STACK_DEPTH :: 0x826C;
    GL_DEBUG_GROUP_STACK_DEPTH :: 0x826D;
    GL_BUFFER :: 0x82E0;
    GL_SHADER :: 0x82E1;
    GL_PROGRAM :: 0x82E2;
    // GL_VERTEX_ARRAY :: 0x8074;
    GL_QUERY :: 0x82E3;
    GL_PROGRAM_PIPELINE :: 0x82E4;
    GL_SAMPLER :: 0x82E6;
    GL_MAX_LABEL_LENGTH :: 0x82E8;
    GL_DEBUG_OUTPUT :: 0x92E0;
    GL_CONTEXT_FLAG_DEBUG_BIT :: 0x00000002;
    GL_MAX_UNIFORM_LOCATIONS :: 0x826E;
    GL_FRAMEBUFFER_DEFAULT_WIDTH :: 0x9310;
    GL_FRAMEBUFFER_DEFAULT_HEIGHT :: 0x9311;
    GL_FRAMEBUFFER_DEFAULT_LAYERS :: 0x9312;
    GL_FRAMEBUFFER_DEFAULT_SAMPLES :: 0x9313;
    GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS :: 0x9314;
    GL_MAX_FRAMEBUFFER_WIDTH :: 0x9315;
    GL_MAX_FRAMEBUFFER_HEIGHT :: 0x9316;
    GL_MAX_FRAMEBUFFER_LAYERS :: 0x9317;
    GL_MAX_FRAMEBUFFER_SAMPLES :: 0x9318;
    GL_INTERNALFORMAT_SUPPORTED :: 0x826F;
    GL_INTERNALFORMAT_PREFERRED :: 0x8270;
    GL_INTERNALFORMAT_RED_SIZE :: 0x8271;
    GL_INTERNALFORMAT_GREEN_SIZE :: 0x8272;
    GL_INTERNALFORMAT_BLUE_SIZE :: 0x8273;
    GL_INTERNALFORMAT_ALPHA_SIZE :: 0x8274;
    GL_INTERNALFORMAT_DEPTH_SIZE :: 0x8275;
    GL_INTERNALFORMAT_STENCIL_SIZE :: 0x8276;
    GL_INTERNALFORMAT_SHARED_SIZE :: 0x8277;
    GL_INTERNALFORMAT_RED_TYPE :: 0x8278;
    GL_INTERNALFORMAT_GREEN_TYPE :: 0x8279;
    GL_INTERNALFORMAT_BLUE_TYPE :: 0x827A;
    GL_INTERNALFORMAT_ALPHA_TYPE :: 0x827B;
    GL_INTERNALFORMAT_DEPTH_TYPE :: 0x827C;
    GL_INTERNALFORMAT_STENCIL_TYPE :: 0x827D;
    GL_MAX_WIDTH :: 0x827E;
    GL_MAX_HEIGHT :: 0x827F;
    GL_MAX_DEPTH :: 0x8280;
    GL_MAX_LAYERS :: 0x8281;
    GL_MAX_COMBINED_DIMENSIONS :: 0x8282;
    GL_COLOR_COMPONENTS :: 0x8283;
    GL_DEPTH_COMPONENTS :: 0x8284;
    GL_STENCIL_COMPONENTS :: 0x8285;
    GL_COLOR_RENDERABLE :: 0x8286;
    GL_DEPTH_RENDERABLE :: 0x8287;
    GL_STENCIL_RENDERABLE :: 0x8288;
    GL_FRAMEBUFFER_RENDERABLE :: 0x8289;
    GL_FRAMEBUFFER_RENDERABLE_LAYERED :: 0x828A;
    GL_FRAMEBUFFER_BLEND :: 0x828B;
    GL_READ_PIXELS :: 0x828C;
    GL_READ_PIXELS_FORMAT :: 0x828D;
    GL_READ_PIXELS_TYPE :: 0x828E;
    GL_TEXTURE_IMAGE_FORMAT :: 0x828F;
    GL_TEXTURE_IMAGE_TYPE :: 0x8290;
    GL_GET_TEXTURE_IMAGE_FORMAT :: 0x8291;
    GL_GET_TEXTURE_IMAGE_TYPE :: 0x8292;
    GL_MIPMAP :: 0x8293;
    GL_MANUAL_GENERATE_MIPMAP :: 0x8294;
    GL_AUTO_GENERATE_MIPMAP :: 0x8295;
    GL_COLOR_ENCODING :: 0x8296;
    GL_SRGB_READ :: 0x8297;
    GL_SRGB_WRITE :: 0x8298;
    GL_FILTER :: 0x829A;
    GL_VERTEX_TEXTURE :: 0x829B;
    GL_TESS_CONTROL_TEXTURE :: 0x829C;
    GL_TESS_EVALUATION_TEXTURE :: 0x829D;
    GL_GEOMETRY_TEXTURE :: 0x829E;
    GL_FRAGMENT_TEXTURE :: 0x829F;
    GL_COMPUTE_TEXTURE :: 0x82A0;
    GL_TEXTURE_SHADOW :: 0x82A1;
    GL_TEXTURE_GATHER :: 0x82A2;
    GL_TEXTURE_GATHER_SHADOW :: 0x82A3;
    GL_SHADER_IMAGE_LOAD :: 0x82A4;
    GL_SHADER_IMAGE_STORE :: 0x82A5;
    GL_SHADER_IMAGE_ATOMIC :: 0x82A6;
    GL_IMAGE_TEXEL_SIZE :: 0x82A7;
    GL_IMAGE_COMPATIBILITY_CLASS :: 0x82A8;
    GL_IMAGE_PIXEL_FORMAT :: 0x82A9;
    GL_IMAGE_PIXEL_TYPE :: 0x82AA;
    GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST :: 0x82AC;
    GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST :: 0x82AD;
    GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE :: 0x82AE;
    GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE :: 0x82AF;
    GL_TEXTURE_COMPRESSED_BLOCK_WIDTH :: 0x82B1;
    GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT :: 0x82B2;
    GL_TEXTURE_COMPRESSED_BLOCK_SIZE :: 0x82B3;
    GL_CLEAR_BUFFER :: 0x82B4;
    GL_TEXTURE_VIEW :: 0x82B5;
    GL_VIEW_COMPATIBILITY_CLASS :: 0x82B6;
    GL_FULL_SUPPORT :: 0x82B7;
    GL_CAVEAT_SUPPORT :: 0x82B8;
    GL_IMAGE_CLASS_4_X_32 :: 0x82B9;
    GL_IMAGE_CLASS_2_X_32 :: 0x82BA;
    GL_IMAGE_CLASS_1_X_32 :: 0x82BB;
    GL_IMAGE_CLASS_4_X_16 :: 0x82BC;
    GL_IMAGE_CLASS_2_X_16 :: 0x82BD;
    GL_IMAGE_CLASS_1_X_16 :: 0x82BE;
    GL_IMAGE_CLASS_4_X_8 :: 0x82BF;
    GL_IMAGE_CLASS_2_X_8 :: 0x82C0;
    GL_IMAGE_CLASS_1_X_8 :: 0x82C1;
    GL_IMAGE_CLASS_11_11_10 :: 0x82C2;
    GL_IMAGE_CLASS_10_10_10_2 :: 0x82C3;
    GL_VIEW_CLASS_128_BITS :: 0x82C4;
    GL_VIEW_CLASS_96_BITS :: 0x82C5;
    GL_VIEW_CLASS_64_BITS :: 0x82C6;
    GL_VIEW_CLASS_48_BITS :: 0x82C7;
    GL_VIEW_CLASS_32_BITS :: 0x82C8;
    GL_VIEW_CLASS_24_BITS :: 0x82C9;
    GL_VIEW_CLASS_16_BITS :: 0x82CA;
    GL_VIEW_CLASS_8_BITS :: 0x82CB;
    GL_VIEW_CLASS_S3TC_DXT1_RGB :: 0x82CC;
    GL_VIEW_CLASS_S3TC_DXT1_RGBA :: 0x82CD;
    GL_VIEW_CLASS_S3TC_DXT3_RGBA :: 0x82CE;
    GL_VIEW_CLASS_S3TC_DXT5_RGBA :: 0x82CF;
    GL_VIEW_CLASS_RGTC1_RED :: 0x82D0;
    GL_VIEW_CLASS_RGTC2_RG :: 0x82D1;
    GL_VIEW_CLASS_BPTC_UNORM :: 0x82D2;
    GL_VIEW_CLASS_BPTC_FLOAT :: 0x82D3;
    GL_UNIFORM :: 0x92E1;
    GL_UNIFORM_BLOCK :: 0x92E2;
    GL_PROGRAM_INPUT :: 0x92E3;
    GL_PROGRAM_OUTPUT :: 0x92E4;
    GL_BUFFER_VARIABLE :: 0x92E5;
    GL_SHADER_STORAGE_BLOCK :: 0x92E6;
    GL_VERTEX_SUBROUTINE :: 0x92E8;
    GL_TESS_CONTROL_SUBROUTINE :: 0x92E9;
    GL_TESS_EVALUATION_SUBROUTINE :: 0x92EA;
    GL_GEOMETRY_SUBROUTINE :: 0x92EB;
    GL_FRAGMENT_SUBROUTINE :: 0x92EC;
    GL_COMPUTE_SUBROUTINE :: 0x92ED;
    GL_VERTEX_SUBROUTINE_UNIFORM :: 0x92EE;
    GL_TESS_CONTROL_SUBROUTINE_UNIFORM :: 0x92EF;
    GL_TESS_EVALUATION_SUBROUTINE_UNIFORM :: 0x92F0;
    GL_GEOMETRY_SUBROUTINE_UNIFORM :: 0x92F1;
    GL_FRAGMENT_SUBROUTINE_UNIFORM :: 0x92F2;
    GL_COMPUTE_SUBROUTINE_UNIFORM :: 0x92F3;
    GL_TRANSFORM_FEEDBACK_VARYING :: 0x92F4;
    GL_ACTIVE_RESOURCES :: 0x92F5;
    GL_MAX_NAME_LENGTH :: 0x92F6;
    GL_MAX_NUM_ACTIVE_VARIABLES :: 0x92F7;
    GL_MAX_NUM_COMPATIBLE_SUBROUTINES :: 0x92F8;
    GL_NAME_LENGTH :: 0x92F9;
    GL_TYPE :: 0x92FA;
    GL_ARRAY_SIZE :: 0x92FB;
    GL_OFFSET :: 0x92FC;
    GL_BLOCK_INDEX :: 0x92FD;
    GL_ARRAY_STRIDE :: 0x92FE;
    GL_MATRIX_STRIDE :: 0x92FF;
    GL_IS_ROW_MAJOR :: 0x9300;
    GL_ATOMIC_COUNTER_BUFFER_INDEX :: 0x9301;
    GL_BUFFER_BINDING :: 0x9302;
    GL_BUFFER_DATA_SIZE :: 0x9303;
    GL_NUM_ACTIVE_VARIABLES :: 0x9304;
    GL_ACTIVE_VARIABLES :: 0x9305;
    GL_REFERENCED_BY_VERTEX_SHADER :: 0x9306;
    GL_REFERENCED_BY_TESS_CONTROL_SHADER :: 0x9307;
    GL_REFERENCED_BY_TESS_EVALUATION_SHADER :: 0x9308;
    GL_REFERENCED_BY_GEOMETRY_SHADER :: 0x9309;
    GL_REFERENCED_BY_FRAGMENT_SHADER :: 0x930A;
    GL_REFERENCED_BY_COMPUTE_SHADER :: 0x930B;
    GL_TOP_LEVEL_ARRAY_SIZE :: 0x930C;
    GL_TOP_LEVEL_ARRAY_STRIDE :: 0x930D;
    GL_LOCATION :: 0x930E;
    GL_LOCATION_INDEX :: 0x930F;
    GL_IS_PER_PATCH :: 0x92E7;
    GL_SHADER_STORAGE_BUFFER :: 0x90D2;
    GL_SHADER_STORAGE_BUFFER_BINDING :: 0x90D3;
    GL_SHADER_STORAGE_BUFFER_START :: 0x90D4;
    GL_SHADER_STORAGE_BUFFER_SIZE :: 0x90D5;
    GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS :: 0x90D6;
    GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS :: 0x90D7;
    GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS :: 0x90D8;
    GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS :: 0x90D9;
    GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS :: 0x90DA;
    GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS :: 0x90DB;
    GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS :: 0x90DC;
    GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS :: 0x90DD;
    GL_MAX_SHADER_STORAGE_BLOCK_SIZE :: 0x90DE;
    GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT :: 0x90DF;
    GL_SHADER_STORAGE_BARRIER_BIT :: 0x00002000;
    GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES :: 0x8F39;
    GL_DEPTH_STENCIL_TEXTURE_MODE :: 0x90EA;
    GL_TEXTURE_BUFFER_OFFSET :: 0x919D;
    GL_TEXTURE_BUFFER_SIZE :: 0x919E;
    GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT :: 0x919F;
    GL_TEXTURE_VIEW_MIN_LEVEL :: 0x82DB;
    GL_TEXTURE_VIEW_NUM_LEVELS :: 0x82DC;
    GL_TEXTURE_VIEW_MIN_LAYER :: 0x82DD;
    GL_TEXTURE_VIEW_NUM_LAYERS :: 0x82DE;
    GL_TEXTURE_IMMUTABLE_LEVELS :: 0x82DF;
    GL_VERTEX_ATTRIB_BINDING :: 0x82D4;
    GL_VERTEX_ATTRIB_RELATIVE_OFFSET :: 0x82D5;
    GL_VERTEX_BINDING_DIVISOR :: 0x82D6;
    GL_VERTEX_BINDING_OFFSET :: 0x82D7;
    GL_VERTEX_BINDING_STRIDE :: 0x82D8;
    GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET :: 0x82D9;
    GL_MAX_VERTEX_ATTRIB_BINDINGS :: 0x82DA;
    GL_VERTEX_BINDING_BUFFER :: 0x8F4F;
    GL_DISPLAY_LIST :: 0x82E7;
    // GL_STACK_UNDERFLOW :: 0x0504;
    // GL_STACK_OVERFLOW :: 0x0503;

    // GL_VERSION_4_4
    GL_MAX_VERTEX_ATTRIB_STRIDE :: 0x82E5;
    GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED :: 0x8221;
    GL_TEXTURE_BUFFER_BINDING :: 0x8C2A;
    // GL_MAP_READ_BIT :: 0x0001;
    // GL_MAP_WRITE_BIT :: 0x0002;
    GL_MAP_PERSISTENT_BIT :: 0x0040;
    GL_MAP_COHERENT_BIT :: 0x0080;
    GL_DYNAMIC_STORAGE_BIT :: 0x0100;
    GL_CLIENT_STORAGE_BIT :: 0x0200;
    GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT :: 0x00004000;
    GL_BUFFER_IMMUTABLE_STORAGE :: 0x821F;
    GL_BUFFER_STORAGE_FLAGS :: 0x8220;
    GL_CLEAR_TEXTURE :: 0x9365;
    GL_LOCATION_COMPONENT :: 0x934A;
    // GL_TRANSFORM_FEEDBACK_BUFFER :: 0x8C8E;
    GL_TRANSFORM_FEEDBACK_BUFFER_INDEX :: 0x934B;
    GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE :: 0x934C;
    GL_QUERY_BUFFER :: 0x9192;
    GL_QUERY_BUFFER_BARRIER_BIT :: 0x00008000;
    GL_QUERY_BUFFER_BINDING :: 0x9193;
    GL_QUERY_RESULT_NO_WAIT :: 0x9194;
    GL_MIRROR_CLAMP_TO_EDGE :: 0x8743;
    // GL_STENCIL_INDEX :: 0x1901;
    // GL_STENCIL_INDEX8 :: 0x8D48;
    // GL_UNSIGNED_INT_10F_11F_11F_REV :: 0x8C3B;

    // GL_VERSION_4_5
    GL_CONTEXT_LOST :: 0x0507;
    // GL_LOWER_LEFT :: 0x8CA1;
    // GL_UPPER_LEFT :: 0x8CA2;
    GL_NEGATIVE_ONE_TO_ONE :: 0x935E;
    GL_ZERO_TO_ONE :: 0x935F;
    GL_CLIP_ORIGIN :: 0x935C;
    GL_CLIP_DEPTH_MODE :: 0x935D;
    GL_QUERY_WAIT_INVERTED :: 0x8E17;
    GL_QUERY_NO_WAIT_INVERTED :: 0x8E18;
    GL_QUERY_BY_REGION_WAIT_INVERTED :: 0x8E19;
    GL_QUERY_BY_REGION_NO_WAIT_INVERTED :: 0x8E1A;
    GL_MAX_CULL_DISTANCES :: 0x82F9;
    GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES :: 0x82FA;
    GL_TEXTURE_TARGET :: 0x1006;
    GL_QUERY_TARGET :: 0x82EA;
    // GL_TEXTURE_BINDING_1D :: 0x8068;
    // GL_TEXTURE_BINDING_1D_ARRAY :: 0x8C1C;
    // GL_TEXTURE_BINDING_2D :: 0x8069;
    // GL_TEXTURE_BINDING_2D_ARRAY :: 0x8C1D;
    // GL_TEXTURE_BINDING_2D_MULTISAMPLE :: 0x9104;
    // GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY :: 0x9105;
    // GL_TEXTURE_BINDING_3D :: 0x806A;
    // GL_TEXTURE_BINDING_BUFFER :: 0x8C2C;
    // GL_TEXTURE_BINDING_CUBE_MAP :: 0x8514;
    // GL_TEXTURE_BINDING_CUBE_MAP_ARRAY :: 0x900A;
    // GL_TEXTURE_BINDING_RECTANGLE :: 0x84F6;
    // GL_BACK :: 0x0405;
    // GL_NO_ERROR :: 0;
    GL_GUILTY_CONTEXT_RESET :: 0x8253;
    GL_INNOCENT_CONTEXT_RESET :: 0x8254;
    GL_UNKNOWN_CONTEXT_RESET :: 0x8255;
    GL_RESET_NOTIFICATION_STRATEGY :: 0x8256;
    GL_LOSE_CONTEXT_ON_RESET :: 0x8252;
    GL_NO_RESET_NOTIFICATION :: 0x8261;
    GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT :: 0x00000004;
    // GL_CONTEXT_LOST :: 0x0507;
    GL_CONTEXT_RELEASE_BEHAVIOR :: 0x82FB;
    // GL_NONE :: 0;
    GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH :: 0x82FC;

    // GL_VERSION_4_6
    // GL_CONTEXT_RELEASE_BEHAVIOR :: 0x82FB;
    // GL_NONE :: 0;
    // GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH :: 0x82FC;
    GL_SHADER_BINARY_FORMAT_SPIR_V :: 0x9551;
    GL_SPIR_V_BINARY :: 0x9552;
    GL_PARAMETER_BUFFER :: 0x80EE;
    GL_PARAMETER_BUFFER_BINDING :: 0x80EF;
    GL_CONTEXT_FLAG_NO_ERROR_BIT :: 0x00000008;
    GL_VERTICES_SUBMITTED :: 0x82EE;
    GL_PRIMITIVES_SUBMITTED :: 0x82EF;
    GL_VERTEX_SHADER_INVOCATIONS :: 0x82F0;
    GL_TESS_CONTROL_SHADER_PATCHES :: 0x82F1;
    GL_TESS_EVALUATION_SHADER_INVOCATIONS :: 0x82F2;
    // GL_GEOMETRY_SHADER_INVOCATIONS :: 0x887F;
    GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED :: 0x82F3;
    GL_FRAGMENT_SHADER_INVOCATIONS :: 0x82F4;
    GL_COMPUTE_SHADER_INVOCATIONS :: 0x82F5;
    GL_CLIPPING_INPUT_PRIMITIVES :: 0x82F6;
    GL_CLIPPING_OUTPUT_PRIMITIVES :: 0x82F7;
    GL_POLYGON_OFFSET_CLAMP :: 0x8E1B;
    GL_SPIR_V_EXTENSIONS :: 0x9553;
    GL_NUM_SPIR_V_EXTENSIONS :: 0x9554;
    GL_TEXTURE_MAX_ANISOTROPY :: 0x84FE;
    GL_MAX_TEXTURE_MAX_ANISOTROPY :: 0x84FF;
    GL_TRANSFORM_FEEDBACK_OVERFLOW :: 0x82EC;
    GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW :: 0x82ED;

    // Core functions:

    // GL_VERSION_1_0
    glCullFace : (mode: GLenum) #c_call;
    glFrontFace : (mode: GLenum) #c_call;
    glHint : (target: GLenum, mode: GLenum) #c_call;
    glLineWidth : (width: GLfloat) #c_call;
    glPointSize : (size: GLfloat) #c_call;
    glPolygonMode : (face: GLenum, mode: GLenum) #c_call;
    glScissor : (x: GLint, y: GLint, width: GLsizei, height: GLsizei) #c_call;
    glTexParameterf : (target: GLenum, pname: GLenum, param: GLfloat) #c_call;
    glTexParameterfv : (target: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glTexParameteri : (target: GLenum, pname: GLenum, param: GLint) #c_call;
    glTexParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glTexImage1D : (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glTexImage2D : (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glDrawBuffer : (buf: GLenum) #c_call;
    glClear : (mask: GLbitfield) #c_call;
    glClearColor : (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) #c_call;
    glClearStencil : (s: GLint) #c_call;
    glClearDepth : (depth: GLdouble) #c_call;
    glStencilMask : (mask: GLuint) #c_call;
    glColorMask : (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) #c_call;
    glDepthMask : (flag: GLboolean) #c_call;
    glDisable : (cap: GLenum) #c_call;
    glEnable : (cap: GLenum) #c_call;
    glFinish : () #c_call;
    glFlush : () #c_call;
    glBlendFunc : (sfactor: GLenum, dfactor: GLenum) #c_call;
    glLogicOp : (opcode: GLenum) #c_call;
    glStencilFunc : (func: GLenum, ref: GLint, mask: GLuint) #c_call;
    glStencilOp : (fail: GLenum, zfail: GLenum, zpass: GLenum) #c_call;
    glDepthFunc : (func: GLenum) #c_call;
    glPixelStoref : (pname: GLenum, param: GLfloat) #c_call;
    glPixelStorei : (pname: GLenum, param: GLint) #c_call;
    glReadBuffer : (src: GLenum) #c_call;
    glReadPixels : (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glGetBooleanv : (pname: GLenum, data: *GLboolean) #c_call;
    glGetDoublev : (pname: GLenum, data: *GLdouble) #c_call;
    glGetError : () -> GLenum #c_call;
    glGetFloatv : (pname: GLenum, data: *GLfloat) #c_call;
    glGetIntegerv : (pname: GLenum, data: *GLint) #c_call;
    glGetString : (name: GLenum) -> *GLubyte #c_call;
    glGetTexImage : (target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glGetTexParameterfv : (target: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetTexParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetTexLevelParameterfv : (target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) #c_call;
    glGetTexLevelParameteriv : (target: GLenum, level: GLint, pname: GLenum, params: *GLint) #c_call;
    glIsEnabled : (cap: GLenum) -> GLboolean #c_call;
    glDepthRange : (near: GLdouble, far: GLdouble) #c_call;
    glViewport : (x: GLint, y: GLint, width: GLsizei, height: GLsizei) #c_call;
    glNewList : (list: GLuint, mode: GLenum) #c_call;
    glEndList : () #c_call;
    glCallList : (list: GLuint) #c_call;
    glCallLists : (n: GLsizei, type: GLenum, lists: *void) #c_call;
    glDeleteLists : (list: GLuint, range: GLsizei) #c_call;
    glGenLists : (range: GLsizei) -> GLuint #c_call;
    glListBase : (base: GLuint) #c_call;
    glBegin : (mode: GLenum) #c_call;
    glBitmap : (width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: *GLubyte) #c_call;
    glColor3b : (red: GLbyte, green: GLbyte, blue: GLbyte) #c_call;
    glColor3bv : (v: *GLbyte) #c_call;
    glColor3d : (red: GLdouble, green: GLdouble, blue: GLdouble) #c_call;
    glColor3dv : (v: *GLdouble) #c_call;
    glColor3f : (red: GLfloat, green: GLfloat, blue: GLfloat) #c_call;
    glColor3fv : (v: *GLfloat) #c_call;
    glColor3i : (red: GLint, green: GLint, blue: GLint) #c_call;
    glColor3iv : (v: *GLint) #c_call;
    glColor3s : (red: GLshort, green: GLshort, blue: GLshort) #c_call;
    glColor3sv : (v: *GLshort) #c_call;
    glColor3ub : (red: GLubyte, green: GLubyte, blue: GLubyte) #c_call;
    glColor3ubv : (v: *GLubyte) #c_call;
    glColor3ui : (red: GLuint, green: GLuint, blue: GLuint) #c_call;
    glColor3uiv : (v: *GLuint) #c_call;
    glColor3us : (red: GLushort, green: GLushort, blue: GLushort) #c_call;
    glColor3usv : (v: *GLushort) #c_call;
    glColor4b : (red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) #c_call;
    glColor4bv : (v: *GLbyte) #c_call;
    glColor4d : (red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) #c_call;
    glColor4dv : (v: *GLdouble) #c_call;
    glColor4f : (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) #c_call;
    glColor4fv : (v: *GLfloat) #c_call;
    glColor4i : (red: GLint, green: GLint, blue: GLint, alpha: GLint) #c_call;
    glColor4iv : (v: *GLint) #c_call;
    glColor4s : (red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) #c_call;
    glColor4sv : (v: *GLshort) #c_call;
    glColor4ub : (red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) #c_call;
    glColor4ubv : (v: *GLubyte) #c_call;
    glColor4ui : (red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) #c_call;
    glColor4uiv : (v: *GLuint) #c_call;
    glColor4us : (red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) #c_call;
    glColor4usv : (v: *GLushort) #c_call;
    glEdgeFlag : (flag: GLboolean) #c_call;
    glEdgeFlagv : (flag: *GLboolean) #c_call;
    glEnd : () #c_call;
    glIndexd : (c: GLdouble) #c_call;
    glIndexdv : (c: *GLdouble) #c_call;
    glIndexf : (c: GLfloat) #c_call;
    glIndexfv : (c: *GLfloat) #c_call;
    glIndexi : (c: GLint) #c_call;
    glIndexiv : (c: *GLint) #c_call;
    glIndexs : (c: GLshort) #c_call;
    glIndexsv : (c: *GLshort) #c_call;
    glNormal3b : (nx: GLbyte, ny: GLbyte, nz: GLbyte) #c_call;
    glNormal3bv : (v: *GLbyte) #c_call;
    glNormal3d : (nx: GLdouble, ny: GLdouble, nz: GLdouble) #c_call;
    glNormal3dv : (v: *GLdouble) #c_call;
    glNormal3f : (nx: GLfloat, ny: GLfloat, nz: GLfloat) #c_call;
    glNormal3fv : (v: *GLfloat) #c_call;
    glNormal3i : (nx: GLint, ny: GLint, nz: GLint) #c_call;
    glNormal3iv : (v: *GLint) #c_call;
    glNormal3s : (nx: GLshort, ny: GLshort, nz: GLshort) #c_call;
    glNormal3sv : (v: *GLshort) #c_call;
    glRasterPos2d : (x: GLdouble, y: GLdouble) #c_call;
    glRasterPos2dv : (v: *GLdouble) #c_call;
    glRasterPos2f : (x: GLfloat, y: GLfloat) #c_call;
    glRasterPos2fv : (v: *GLfloat) #c_call;
    glRasterPos2i : (x: GLint, y: GLint) #c_call;
    glRasterPos2iv : (v: *GLint) #c_call;
    glRasterPos2s : (x: GLshort, y: GLshort) #c_call;
    glRasterPos2sv : (v: *GLshort) #c_call;
    glRasterPos3d : (x: GLdouble, y: GLdouble, z: GLdouble) #c_call;
    glRasterPos3dv : (v: *GLdouble) #c_call;
    glRasterPos3f : (x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glRasterPos3fv : (v: *GLfloat) #c_call;
    glRasterPos3i : (x: GLint, y: GLint, z: GLint) #c_call;
    glRasterPos3iv : (v: *GLint) #c_call;
    glRasterPos3s : (x: GLshort, y: GLshort, z: GLshort) #c_call;
    glRasterPos3sv : (v: *GLshort) #c_call;
    glRasterPos4d : (x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #c_call;
    glRasterPos4dv : (v: *GLdouble) #c_call;
    glRasterPos4f : (x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #c_call;
    glRasterPos4fv : (v: *GLfloat) #c_call;
    glRasterPos4i : (x: GLint, y: GLint, z: GLint, w: GLint) #c_call;
    glRasterPos4iv : (v: *GLint) #c_call;
    glRasterPos4s : (x: GLshort, y: GLshort, z: GLshort, w: GLshort) #c_call;
    glRasterPos4sv : (v: *GLshort) #c_call;
    glRectd : (x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) #c_call;
    glRectdv : (v1: *GLdouble, v2: *GLdouble) #c_call;
    glRectf : (x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) #c_call;
    glRectfv : (v1: *GLfloat, v2: *GLfloat) #c_call;
    glRecti : (x1: GLint, y1: GLint, x2: GLint, y2: GLint) #c_call;
    glRectiv : (v1: *GLint, v2: *GLint) #c_call;
    glRects : (x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) #c_call;
    glRectsv : (v1: *GLshort, v2: *GLshort) #c_call;
    glTexCoord1d : (s: GLdouble) #c_call;
    glTexCoord1dv : (v: *GLdouble) #c_call;
    glTexCoord1f : (s: GLfloat) #c_call;
    glTexCoord1fv : (v: *GLfloat) #c_call;
    glTexCoord1i : (s: GLint) #c_call;
    glTexCoord1iv : (v: *GLint) #c_call;
    glTexCoord1s : (s: GLshort) #c_call;
    glTexCoord1sv : (v: *GLshort) #c_call;
    glTexCoord2d : (s: GLdouble, t: GLdouble) #c_call;
    glTexCoord2dv : (v: *GLdouble) #c_call;
    glTexCoord2f : (s: GLfloat, t: GLfloat) #c_call;
    glTexCoord2fv : (v: *GLfloat) #c_call;
    glTexCoord2i : (s: GLint, t: GLint) #c_call;
    glTexCoord2iv : (v: *GLint) #c_call;
    glTexCoord2s : (s: GLshort, t: GLshort) #c_call;
    glTexCoord2sv : (v: *GLshort) #c_call;
    glTexCoord3d : (s: GLdouble, t: GLdouble, r: GLdouble) #c_call;
    glTexCoord3dv : (v: *GLdouble) #c_call;
    glTexCoord3f : (s: GLfloat, t: GLfloat, r: GLfloat) #c_call;
    glTexCoord3fv : (v: *GLfloat) #c_call;
    glTexCoord3i : (s: GLint, t: GLint, r: GLint) #c_call;
    glTexCoord3iv : (v: *GLint) #c_call;
    glTexCoord3s : (s: GLshort, t: GLshort, r: GLshort) #c_call;
    glTexCoord3sv : (v: *GLshort) #c_call;
    glTexCoord4d : (s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) #c_call;
    glTexCoord4dv : (v: *GLdouble) #c_call;
    glTexCoord4f : (s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) #c_call;
    glTexCoord4fv : (v: *GLfloat) #c_call;
    glTexCoord4i : (s: GLint, t: GLint, r: GLint, q: GLint) #c_call;
    glTexCoord4iv : (v: *GLint) #c_call;
    glTexCoord4s : (s: GLshort, t: GLshort, r: GLshort, q: GLshort) #c_call;
    glTexCoord4sv : (v: *GLshort) #c_call;
    glVertex2d : (x: GLdouble, y: GLdouble) #c_call;
    glVertex2dv : (v: *GLdouble) #c_call;
    glVertex2f : (x: GLfloat, y: GLfloat) #c_call;
    glVertex2fv : (v: *GLfloat) #c_call;
    glVertex2i : (x: GLint, y: GLint) #c_call;
    glVertex2iv : (v: *GLint) #c_call;
    glVertex2s : (x: GLshort, y: GLshort) #c_call;
    glVertex2sv : (v: *GLshort) #c_call;
    glVertex3d : (x: GLdouble, y: GLdouble, z: GLdouble) #c_call;
    glVertex3dv : (v: *GLdouble) #c_call;
    glVertex3f : (x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glVertex3fv : (v: *GLfloat) #c_call;
    glVertex3i : (x: GLint, y: GLint, z: GLint) #c_call;
    glVertex3iv : (v: *GLint) #c_call;
    glVertex3s : (x: GLshort, y: GLshort, z: GLshort) #c_call;
    glVertex3sv : (v: *GLshort) #c_call;
    glVertex4d : (x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #c_call;
    glVertex4dv : (v: *GLdouble) #c_call;
    glVertex4f : (x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #c_call;
    glVertex4fv : (v: *GLfloat) #c_call;
    glVertex4i : (x: GLint, y: GLint, z: GLint, w: GLint) #c_call;
    glVertex4iv : (v: *GLint) #c_call;
    glVertex4s : (x: GLshort, y: GLshort, z: GLshort, w: GLshort) #c_call;
    glVertex4sv : (v: *GLshort) #c_call;
    glClipPlane : (plane: GLenum, equation: *GLdouble) #c_call;
    glColorMaterial : (face: GLenum, mode: GLenum) #c_call;
    glFogf : (pname: GLenum, param: GLfloat) #c_call;
    glFogfv : (pname: GLenum, params: *GLfloat) #c_call;
    glFogi : (pname: GLenum, param: GLint) #c_call;
    glFogiv : (pname: GLenum, params: *GLint) #c_call;
    glLightf : (light: GLenum, pname: GLenum, param: GLfloat) #c_call;
    glLightfv : (light: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glLighti : (light: GLenum, pname: GLenum, param: GLint) #c_call;
    glLightiv : (light: GLenum, pname: GLenum, params: *GLint) #c_call;
    glLightModelf : (pname: GLenum, param: GLfloat) #c_call;
    glLightModelfv : (pname: GLenum, params: *GLfloat) #c_call;
    glLightModeli : (pname: GLenum, param: GLint) #c_call;
    glLightModeliv : (pname: GLenum, params: *GLint) #c_call;
    glLineStipple : (factor: GLint, pattern: GLushort) #c_call;
    glMaterialf : (face: GLenum, pname: GLenum, param: GLfloat) #c_call;
    glMaterialfv : (face: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glMateriali : (face: GLenum, pname: GLenum, param: GLint) #c_call;
    glMaterialiv : (face: GLenum, pname: GLenum, params: *GLint) #c_call;
    glPolygonStipple : (mask: *GLubyte) #c_call;
    glShadeModel : (mode: GLenum) #c_call;
    glTexEnvf : (target: GLenum, pname: GLenum, param: GLfloat) #c_call;
    glTexEnvfv : (target: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glTexEnvi : (target: GLenum, pname: GLenum, param: GLint) #c_call;
    glTexEnviv : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glTexGend : (coord: GLenum, pname: GLenum, param: GLdouble) #c_call;
    glTexGendv : (coord: GLenum, pname: GLenum, params: *GLdouble) #c_call;
    glTexGenf : (coord: GLenum, pname: GLenum, param: GLfloat) #c_call;
    glTexGenfv : (coord: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glTexGeni : (coord: GLenum, pname: GLenum, param: GLint) #c_call;
    glTexGeniv : (coord: GLenum, pname: GLenum, params: *GLint) #c_call;
    glFeedbackBuffer : (size: GLsizei, type: GLenum, buffer: *GLfloat) #c_call;
    glSelectBuffer : (size: GLsizei, buffer: *GLuint) #c_call;
    glRenderMode : (mode: GLenum) -> GLint #c_call;
    glInitNames : () #c_call;
    glLoadName : (name: GLuint) #c_call;
    glPassThrough : (token: GLfloat) #c_call;
    glPopName : () #c_call;
    glPushName : (name: GLuint) #c_call;
    glClearAccum : (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) #c_call;
    glClearIndex : (c: GLfloat) #c_call;
    glIndexMask : (mask: GLuint) #c_call;
    glAccum : (op: GLenum, value: GLfloat) #c_call;
    glPopAttrib : () #c_call;
    glPushAttrib : (mask: GLbitfield) #c_call;
    glMap1d : (target: GLenum, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: *GLdouble) #c_call;
    glMap1f : (target: GLenum, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: *GLfloat) #c_call;
    glMap2d : (target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: *GLdouble) #c_call;
    glMap2f : (target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: *GLfloat) #c_call;
    glMapGrid1d : (un: GLint, u1: GLdouble, u2: GLdouble) #c_call;
    glMapGrid1f : (un: GLint, u1: GLfloat, u2: GLfloat) #c_call;
    glMapGrid2d : (un: GLint, u1: GLdouble, u2: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) #c_call;
    glMapGrid2f : (un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) #c_call;
    glEvalCoord1d : (u: GLdouble) #c_call;
    glEvalCoord1dv : (u: *GLdouble) #c_call;
    glEvalCoord1f : (u: GLfloat) #c_call;
    glEvalCoord1fv : (u: *GLfloat) #c_call;
    glEvalCoord2d : (u: GLdouble, v: GLdouble) #c_call;
    glEvalCoord2dv : (u: *GLdouble) #c_call;
    glEvalCoord2f : (u: GLfloat, v: GLfloat) #c_call;
    glEvalCoord2fv : (u: *GLfloat) #c_call;
    glEvalMesh1 : (mode: GLenum, i1: GLint, i2: GLint) #c_call;
    glEvalPoint1 : (i: GLint) #c_call;
    glEvalMesh2 : (mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint) #c_call;
    glEvalPoint2 : (i: GLint, j: GLint) #c_call;
    glAlphaFunc : (func: GLenum, ref: GLfloat) #c_call;
    glPixelZoom : (xfactor: GLfloat, yfactor: GLfloat) #c_call;
    glPixelTransferf : (pname: GLenum, param: GLfloat) #c_call;
    glPixelTransferi : (pname: GLenum, param: GLint) #c_call;
    glPixelMapfv : (map: GLenum, mapsize: GLsizei, values: *GLfloat) #c_call;
    glPixelMapuiv : (map: GLenum, mapsize: GLsizei, values: *GLuint) #c_call;
    glPixelMapusv : (map: GLenum, mapsize: GLsizei, values: *GLushort) #c_call;
    glCopyPixels : (x: GLint, y: GLint, width: GLsizei, height: GLsizei, type: GLenum) #c_call;
    glDrawPixels : (width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glGetClipPlane : (plane: GLenum, equation: *GLdouble) #c_call;
    glGetLightfv : (light: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetLightiv : (light: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetMapdv : (target: GLenum, query: GLenum, v: *GLdouble) #c_call;
    glGetMapfv : (target: GLenum, query: GLenum, v: *GLfloat) #c_call;
    glGetMapiv : (target: GLenum, query: GLenum, v: *GLint) #c_call;
    glGetMaterialfv : (face: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetMaterialiv : (face: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetPixelMapfv : (map: GLenum, values: *GLfloat) #c_call;
    glGetPixelMapuiv : (map: GLenum, values: *GLuint) #c_call;
    glGetPixelMapusv : (map: GLenum, values: *GLushort) #c_call;
    glGetPolygonStipple : (mask: *GLubyte) #c_call;
    glGetTexEnvfv : (target: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetTexEnviv : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetTexGendv : (coord: GLenum, pname: GLenum, params: *GLdouble) #c_call;
    glGetTexGenfv : (coord: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetTexGeniv : (coord: GLenum, pname: GLenum, params: *GLint) #c_call;
    glIsList : (list: GLuint) -> GLboolean #c_call;
    glFrustum : (left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) #c_call;
    glLoadIdentity : () #c_call;
    glLoadMatrixf : (m: *GLfloat) #c_call;
    glLoadMatrixd : (m: *GLdouble) #c_call;
    glMatrixMode : (mode: GLenum) #c_call;
    glMultMatrixf : (m: *GLfloat) #c_call;
    glMultMatrixd : (m: *GLdouble) #c_call;
    glOrtho : (left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) #c_call;
    glPopMatrix : () #c_call;
    glPushMatrix : () #c_call;
    glRotated : (angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) #c_call;
    glRotatef : (angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glScaled : (x: GLdouble, y: GLdouble, z: GLdouble) #c_call;
    glScalef : (x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glTranslated : (x: GLdouble, y: GLdouble, z: GLdouble) #c_call;
    glTranslatef : (x: GLfloat, y: GLfloat, z: GLfloat) #c_call;

    glDrawArrays : (mode: GLenum, first: GLint, count: GLsizei) #c_call;
    glDrawElements : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void) #c_call;
    glGetPointerv : (pname: GLenum, params: **void) #c_call;
    glPolygonOffset : (factor: GLfloat, units: GLfloat) #c_call;
    glCopyTexImage1D : (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) #c_call;
    glCopyTexImage2D : (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) #c_call;
    glCopyTexSubImage1D : (target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) #c_call;
    glCopyTexSubImage2D : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #c_call;
    glTexSubImage1D : (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glTexSubImage2D : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glBindTexture : (target: GLenum, texture: GLuint) #c_call;
    glDeleteTextures : (n: GLsizei, textures: *GLuint) #c_call;
    glGenTextures : (n: GLsizei, textures: *GLuint) #c_call;
    glIsTexture : (texture: GLuint) -> GLboolean #c_call;
    glArrayElement : (i: GLint) #c_call;
    glColorPointer : (size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #c_call;
    glDisableClientState : (array: GLenum) #c_call;
    glEdgeFlagPointer : (stride: GLsizei, pointer: *void) #c_call;
    glEnableClientState : (array: GLenum) #c_call;
    glIndexPointer : (type: GLenum, stride: GLsizei, pointer: *void) #c_call;
    glInterleavedArrays : (format: GLenum, stride: GLsizei, pointer: *void) #c_call;
    glNormalPointer : (type: GLenum, stride: GLsizei, pointer: *void) #c_call;
    glTexCoordPointer : (size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #c_call;
    glVertexPointer : (size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #c_call;
    glAreTexturesResident : (n: GLsizei, textures: *GLuint, residences: *GLboolean) -> GLboolean #c_call;
    glPrioritizeTextures : (n: GLsizei, textures: *GLuint, priorities: *GLfloat) #c_call;
    glIndexub : (c: GLubyte) #c_call;
    glIndexubv : (c: *GLubyte) #c_call;
    glPopClientAttrib : () #c_call;
    glPushClientAttrib : (mask: GLbitfield) #c_call;

    // GL_VERSION_1_2
    glDrawRangeElements : (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: *void) #c_call;
    glTexImage3D : (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glTexSubImage3D : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glCopyTexSubImage3D : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #c_call;

    // GL_VERSION_1_3
    glActiveTexture : (texture: GLenum) #c_call;
    glSampleCoverage : (value: GLfloat, invert: GLboolean) #c_call;
    glCompressedTexImage3D : (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *void) #c_call;
    glCompressedTexImage2D : (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *void) #c_call;
    glCompressedTexImage1D : (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *void) #c_call;
    glCompressedTexSubImage3D : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #c_call;
    glCompressedTexSubImage2D : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #c_call;
    glCompressedTexSubImage1D : (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #c_call;
    glGetCompressedTexImage : (target: GLenum, level: GLint, img: *void) #c_call;
    glClientActiveTexture : (texture: GLenum) #c_call;
    glMultiTexCoord1d : (target: GLenum, s: GLdouble) #c_call;
    glMultiTexCoord1dv : (target: GLenum, v: *GLdouble) #c_call;
    glMultiTexCoord1f : (target: GLenum, s: GLfloat) #c_call;
    glMultiTexCoord1fv : (target: GLenum, v: *GLfloat) #c_call;
    glMultiTexCoord1i : (target: GLenum, s: GLint) #c_call;
    glMultiTexCoord1iv : (target: GLenum, v: *GLint) #c_call;
    glMultiTexCoord1s : (target: GLenum, s: GLshort) #c_call;
    glMultiTexCoord1sv : (target: GLenum, v: *GLshort) #c_call;
    glMultiTexCoord2d : (target: GLenum, s: GLdouble, t: GLdouble) #c_call;
    glMultiTexCoord2dv : (target: GLenum, v: *GLdouble) #c_call;
    glMultiTexCoord2f : (target: GLenum, s: GLfloat, t: GLfloat) #c_call;
    glMultiTexCoord2fv : (target: GLenum, v: *GLfloat) #c_call;
    glMultiTexCoord2i : (target: GLenum, s: GLint, t: GLint) #c_call;
    glMultiTexCoord2iv : (target: GLenum, v: *GLint) #c_call;
    glMultiTexCoord2s : (target: GLenum, s: GLshort, t: GLshort) #c_call;
    glMultiTexCoord2sv : (target: GLenum, v: *GLshort) #c_call;
    glMultiTexCoord3d : (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) #c_call;
    glMultiTexCoord3dv : (target: GLenum, v: *GLdouble) #c_call;
    glMultiTexCoord3f : (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) #c_call;
    glMultiTexCoord3fv : (target: GLenum, v: *GLfloat) #c_call;
    glMultiTexCoord3i : (target: GLenum, s: GLint, t: GLint, r: GLint) #c_call;
    glMultiTexCoord3iv : (target: GLenum, v: *GLint) #c_call;
    glMultiTexCoord3s : (target: GLenum, s: GLshort, t: GLshort, r: GLshort) #c_call;
    glMultiTexCoord3sv : (target: GLenum, v: *GLshort) #c_call;
    glMultiTexCoord4d : (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) #c_call;
    glMultiTexCoord4dv : (target: GLenum, v: *GLdouble) #c_call;
    glMultiTexCoord4f : (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) #c_call;
    glMultiTexCoord4fv : (target: GLenum, v: *GLfloat) #c_call;
    glMultiTexCoord4i : (target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) #c_call;
    glMultiTexCoord4iv : (target: GLenum, v: *GLint) #c_call;
    glMultiTexCoord4s : (target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) #c_call;
    glMultiTexCoord4sv : (target: GLenum, v: *GLshort) #c_call;
    glLoadTransposeMatrixf : (m: *GLfloat) #c_call;
    glLoadTransposeMatrixd : (m: *GLdouble) #c_call;
    glMultTransposeMatrixf : (m: *GLfloat) #c_call;
    glMultTransposeMatrixd : (m: *GLdouble) #c_call;

    // GL_VERSION_1_4
    glBlendFuncSeparate : (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) #c_call;
    glMultiDrawArrays : (mode: GLenum, first: *GLint, count: *GLsizei, drawcount: GLsizei) #c_call;
    glMultiDrawElements : (mode: GLenum, count: *GLsizei, type: GLenum, indices: **void, drawcount: GLsizei) #c_call;
    glPointParameterf : (pname: GLenum, param: GLfloat) #c_call;
    glPointParameterfv : (pname: GLenum, params: *GLfloat) #c_call;
    glPointParameteri : (pname: GLenum, param: GLint) #c_call;
    glPointParameteriv : (pname: GLenum, params: *GLint) #c_call;
    glFogCoordf : (coord: GLfloat) #c_call;
    glFogCoordfv : (coord: *GLfloat) #c_call;
    glFogCoordd : (coord: GLdouble) #c_call;
    glFogCoorddv : (coord: *GLdouble) #c_call;
    glFogCoordPointer : (type: GLenum, stride: GLsizei, pointer: *void) #c_call;
    glSecondaryColor3b : (red: GLbyte, green: GLbyte, blue: GLbyte) #c_call;
    glSecondaryColor3bv : (v: *GLbyte) #c_call;
    glSecondaryColor3d : (red: GLdouble, green: GLdouble, blue: GLdouble) #c_call;
    glSecondaryColor3dv : (v: *GLdouble) #c_call;
    glSecondaryColor3f : (red: GLfloat, green: GLfloat, blue: GLfloat) #c_call;
    glSecondaryColor3fv : (v: *GLfloat) #c_call;
    glSecondaryColor3i : (red: GLint, green: GLint, blue: GLint) #c_call;
    glSecondaryColor3iv : (v: *GLint) #c_call;
    glSecondaryColor3s : (red: GLshort, green: GLshort, blue: GLshort) #c_call;
    glSecondaryColor3sv : (v: *GLshort) #c_call;
    glSecondaryColor3ub : (red: GLubyte, green: GLubyte, blue: GLubyte) #c_call;
    glSecondaryColor3ubv : (v: *GLubyte) #c_call;
    glSecondaryColor3ui : (red: GLuint, green: GLuint, blue: GLuint) #c_call;
    glSecondaryColor3uiv : (v: *GLuint) #c_call;
    glSecondaryColor3us : (red: GLushort, green: GLushort, blue: GLushort) #c_call;
    glSecondaryColor3usv : (v: *GLushort) #c_call;
    glSecondaryColorPointer : (size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #c_call;
    glWindowPos2d : (x: GLdouble, y: GLdouble) #c_call;
    glWindowPos2dv : (v: *GLdouble) #c_call;
    glWindowPos2f : (x: GLfloat, y: GLfloat) #c_call;
    glWindowPos2fv : (v: *GLfloat) #c_call;
    glWindowPos2i : (x: GLint, y: GLint) #c_call;
    glWindowPos2iv : (v: *GLint) #c_call;
    glWindowPos2s : (x: GLshort, y: GLshort) #c_call;
    glWindowPos2sv : (v: *GLshort) #c_call;
    glWindowPos3d : (x: GLdouble, y: GLdouble, z: GLdouble) #c_call;
    glWindowPos3dv : (v: *GLdouble) #c_call;
    glWindowPos3f : (x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glWindowPos3fv : (v: *GLfloat) #c_call;
    glWindowPos3i : (x: GLint, y: GLint, z: GLint) #c_call;
    glWindowPos3iv : (v: *GLint) #c_call;
    glWindowPos3s : (x: GLshort, y: GLshort, z: GLshort) #c_call;
    glWindowPos3sv : (v: *GLshort) #c_call;
    glBlendColor : (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) #c_call;
    glBlendEquation : (mode: GLenum) #c_call;

    // GL_VERSION_1_5
    glGenQueries : (n: GLsizei, ids: *GLuint) #c_call;
    glDeleteQueries : (n: GLsizei, ids: *GLuint) #c_call;
    glIsQuery : (id: GLuint) -> GLboolean #c_call;
    glBeginQuery : (target: GLenum, id: GLuint) #c_call;
    glEndQuery : (target: GLenum) #c_call;
    glGetQueryiv : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetQueryObjectiv : (id: GLuint, pname: GLenum, params: *GLint) #c_call;
    glGetQueryObjectuiv : (id: GLuint, pname: GLenum, params: *GLuint) #c_call;
    glBindBuffer : (target: GLenum, buffer: GLuint) #c_call;
    glDeleteBuffers : (n: GLsizei, buffers: *GLuint) #c_call;
    glGenBuffers : (n: GLsizei, buffers: *GLuint) #c_call;
    glIsBuffer : (buffer: GLuint) -> GLboolean #c_call;
    glBufferData : (target: GLenum, size: GLsizeiptr, data: *void, usage: GLenum) #c_call;
    glBufferSubData : (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *void) #c_call;
    glGetBufferSubData : (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *void) #c_call;
    glMapBuffer : (target: GLenum, access: GLenum) -> *void #c_call;
    glUnmapBuffer : (target: GLenum) -> GLboolean #c_call;
    glGetBufferParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetBufferPointerv : (target: GLenum, pname: GLenum, params: **void) #c_call;

    // GL_VERSION_2_0
    glBlendEquationSeparate : (modeRGB: GLenum, modeAlpha: GLenum) #c_call;
    glDrawBuffers : (n: GLsizei, bufs: *GLenum) #c_call;
    glStencilOpSeparate : (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) #c_call;
    glStencilFuncSeparate : (face: GLenum, func: GLenum, ref: GLint, mask: GLuint) #c_call;
    glStencilMaskSeparate : (face: GLenum, mask: GLuint) #c_call;
    glAttachShader : (program: GLuint, shader: GLuint) #c_call;
    glBindAttribLocation : (program: GLuint, index: GLuint, name: *GLchar) #c_call;
    glCompileShader : (shader: GLuint) #c_call;
    glCreateProgram : () -> GLuint #c_call;
    glCreateShader : (type: GLenum) -> GLuint #c_call;
    glDeleteProgram : (program: GLuint) #c_call;
    glDeleteShader : (shader: GLuint) #c_call;
    glDetachShader : (program: GLuint, shader: GLuint) #c_call;
    glDisableVertexAttribArray : (index: GLuint) #c_call;
    glEnableVertexAttribArray : (index: GLuint) #c_call;
    glGetActiveAttrib : (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLint, type: *GLenum, name: *GLchar) #c_call;
    glGetActiveUniform : (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLint, type: *GLenum, name: *GLchar) #c_call;
    glGetAttachedShaders : (program: GLuint, maxCount: GLsizei, count: *GLsizei, shaders: *GLuint) #c_call;
    glGetAttribLocation : (program: GLuint, name: *GLchar) -> GLint #c_call;
    glGetProgramiv : (program: GLuint, pname: GLenum, params: *GLint) #c_call;
    glGetProgramInfoLog : (program: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) #c_call;
    glGetShaderiv : (shader: GLuint, pname: GLenum, params: *GLint) #c_call;
    glGetShaderInfoLog : (shader: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) #c_call;
    glGetShaderSource : (shader: GLuint, bufSize: GLsizei, length: *GLsizei, source: *GLchar) #c_call;
    glGetUniformLocation : (program: GLuint, name: *GLchar) -> GLint #c_call;
    glGetUniformfv : (program: GLuint, location: GLint, params: *GLfloat) #c_call;
    glGetUniformiv : (program: GLuint, location: GLint, params: *GLint) #c_call;
    glGetVertexAttribdv : (index: GLuint, pname: GLenum, params: *GLdouble) #c_call;
    glGetVertexAttribfv : (index: GLuint, pname: GLenum, params: *GLfloat) #c_call;
    glGetVertexAttribiv : (index: GLuint, pname: GLenum, params: *GLint) #c_call;
    glGetVertexAttribPointerv : (index: GLuint, pname: GLenum, pointer: **void) #c_call;
    glIsProgram : (program: GLuint) -> GLboolean #c_call;
    glIsShader : (shader: GLuint) -> GLboolean #c_call;
    glLinkProgram : (program: GLuint) #c_call;
    glShaderSource : (shader: GLuint, count: GLsizei, str: **GLchar, length: *GLint) #c_call;
    glUseProgram : (program: GLuint) #c_call;
    glUniform1f : (location: GLint, v0: GLfloat) #c_call;
    glUniform2f : (location: GLint, v0: GLfloat, v1: GLfloat) #c_call;
    glUniform3f : (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) #c_call;
    glUniform4f : (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) #c_call;
    glUniform1i : (location: GLint, v0: GLint) #c_call;
    glUniform2i : (location: GLint, v0: GLint, v1: GLint) #c_call;
    glUniform3i : (location: GLint, v0: GLint, v1: GLint, v2: GLint) #c_call;
    glUniform4i : (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) #c_call;
    glUniform1fv : (location: GLint, count: GLsizei, value: *GLfloat) #c_call;
    glUniform2fv : (location: GLint, count: GLsizei, value: *GLfloat) #c_call;
    glUniform3fv : (location: GLint, count: GLsizei, value: *GLfloat) #c_call;
    glUniform4fv : (location: GLint, count: GLsizei, value: *GLfloat) #c_call;
    glUniform1iv : (location: GLint, count: GLsizei, value: *GLint) #c_call;
    glUniform2iv : (location: GLint, count: GLsizei, value: *GLint) #c_call;
    glUniform3iv : (location: GLint, count: GLsizei, value: *GLint) #c_call;
    glUniform4iv : (location: GLint, count: GLsizei, value: *GLint) #c_call;
    glUniformMatrix2fv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glUniformMatrix3fv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glUniformMatrix4fv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glValidateProgram : (program: GLuint) #c_call;
    glVertexAttrib1d : (index: GLuint, x: GLdouble) #c_call;
    glVertexAttrib1dv : (index: GLuint, v: *GLdouble) #c_call;
    glVertexAttrib1f : (index: GLuint, x: GLfloat) #c_call;
    glVertexAttrib1fv : (index: GLuint, v: *GLfloat) #c_call;
    glVertexAttrib1s : (index: GLuint, x: GLshort) #c_call;
    glVertexAttrib1sv : (index: GLuint, v: *GLshort) #c_call;
    glVertexAttrib2d : (index: GLuint, x: GLdouble, y: GLdouble) #c_call;
    glVertexAttrib2dv : (index: GLuint, v: *GLdouble) #c_call;
    glVertexAttrib2f : (index: GLuint, x: GLfloat, y: GLfloat) #c_call;
    glVertexAttrib2fv : (index: GLuint, v: *GLfloat) #c_call;
    glVertexAttrib2s : (index: GLuint, x: GLshort, y: GLshort) #c_call;
    glVertexAttrib2sv : (index: GLuint, v: *GLshort) #c_call;
    glVertexAttrib3d : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) #c_call;
    glVertexAttrib3dv : (index: GLuint, v: *GLdouble) #c_call;
    glVertexAttrib3f : (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glVertexAttrib3fv : (index: GLuint, v: *GLfloat) #c_call;
    glVertexAttrib3s : (index: GLuint, x: GLshort, y: GLshort, z: GLshort) #c_call;
    glVertexAttrib3sv : (index: GLuint, v: *GLshort) #c_call;
    glVertexAttrib4Nbv : (index: GLuint, v: *GLbyte) #c_call;
    glVertexAttrib4Niv : (index: GLuint, v: *GLint) #c_call;
    glVertexAttrib4Nsv : (index: GLuint, v: *GLshort) #c_call;
    glVertexAttrib4Nub : (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) #c_call;
    glVertexAttrib4Nubv : (index: GLuint, v: *GLubyte) #c_call;
    glVertexAttrib4Nuiv : (index: GLuint, v: *GLuint) #c_call;
    glVertexAttrib4Nusv : (index: GLuint, v: *GLushort) #c_call;
    glVertexAttrib4bv : (index: GLuint, v: *GLbyte) #c_call;
    glVertexAttrib4d : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #c_call;
    glVertexAttrib4dv : (index: GLuint, v: *GLdouble) #c_call;
    glVertexAttrib4f : (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #c_call;
    glVertexAttrib4fv : (index: GLuint, v: *GLfloat) #c_call;
    glVertexAttrib4iv : (index: GLuint, v: *GLint) #c_call;
    glVertexAttrib4s : (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) #c_call;
    glVertexAttrib4sv : (index: GLuint, v: *GLshort) #c_call;
    glVertexAttrib4ubv : (index: GLuint, v: *GLubyte) #c_call;
    glVertexAttrib4uiv : (index: GLuint, v: *GLuint) #c_call;
    glVertexAttrib4usv : (index: GLuint, v: *GLushort) #c_call;
    glVertexAttribPointer : (index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *void) #c_call;

    // GL_VERSION_2_1
    glUniformMatrix2x3fv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glUniformMatrix3x2fv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glUniformMatrix2x4fv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glUniformMatrix4x2fv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glUniformMatrix3x4fv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glUniformMatrix4x3fv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;

    // GL_VERSION_3_0
    glColorMaski : (index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) #c_call;
    glGetBooleani_v : (target: GLenum, index: GLuint, data: *GLboolean) #c_call;
    glGetIntegeri_v : (target: GLenum, index: GLuint, data: *GLint) #c_call;
    glEnablei : (target: GLenum, index: GLuint) #c_call;
    glDisablei : (target: GLenum, index: GLuint) #c_call;
    glIsEnabledi : (target: GLenum, index: GLuint) -> GLboolean #c_call;
    glBeginTransformFeedback : (primitiveMode: GLenum) #c_call;
    glEndTransformFeedback : () #c_call;
    glBindBufferRange : (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #c_call;
    glBindBufferBase : (target: GLenum, index: GLuint, buffer: GLuint) #c_call;
    glTransformFeedbackVaryings : (program: GLuint, count: GLsizei, varyings: **GLchar, bufferMode: GLenum) #c_call;
    glGetTransformFeedbackVarying : (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type: *GLenum, name: *GLchar) #c_call;
    glClampColor : (target: GLenum, clamp: GLenum) #c_call;
    glBeginConditionalRender : (id: GLuint, mode: GLenum) #c_call;
    glEndConditionalRender : () #c_call;
    glVertexAttribIPointer : (index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #c_call;
    glGetVertexAttribIiv : (index: GLuint, pname: GLenum, params: *GLint) #c_call;
    glGetVertexAttribIuiv : (index: GLuint, pname: GLenum, params: *GLuint) #c_call;
    glVertexAttribI1i : (index: GLuint, x: GLint) #c_call;
    glVertexAttribI2i : (index: GLuint, x: GLint, y: GLint) #c_call;
    glVertexAttribI3i : (index: GLuint, x: GLint, y: GLint, z: GLint) #c_call;
    glVertexAttribI4i : (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) #c_call;
    glVertexAttribI1ui : (index: GLuint, x: GLuint) #c_call;
    glVertexAttribI2ui : (index: GLuint, x: GLuint, y: GLuint) #c_call;
    glVertexAttribI3ui : (index: GLuint, x: GLuint, y: GLuint, z: GLuint) #c_call;
    glVertexAttribI4ui : (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) #c_call;
    glVertexAttribI1iv : (index: GLuint, v: *GLint) #c_call;
    glVertexAttribI2iv : (index: GLuint, v: *GLint) #c_call;
    glVertexAttribI3iv : (index: GLuint, v: *GLint) #c_call;
    glVertexAttribI4iv : (index: GLuint, v: *GLint) #c_call;
    glVertexAttribI1uiv : (index: GLuint, v: *GLuint) #c_call;
    glVertexAttribI2uiv : (index: GLuint, v: *GLuint) #c_call;
    glVertexAttribI3uiv : (index: GLuint, v: *GLuint) #c_call;
    glVertexAttribI4uiv : (index: GLuint, v: *GLuint) #c_call;
    glVertexAttribI4bv : (index: GLuint, v: *GLbyte) #c_call;
    glVertexAttribI4sv : (index: GLuint, v: *GLshort) #c_call;
    glVertexAttribI4ubv : (index: GLuint, v: *GLubyte) #c_call;
    glVertexAttribI4usv : (index: GLuint, v: *GLushort) #c_call;
    glGetUniformuiv : (program: GLuint, location: GLint, params: *GLuint) #c_call;
    glBindFragDataLocation : (program: GLuint, color: GLuint, name: *GLchar) #c_call;
    glGetFragDataLocation : (program: GLuint, name: *GLchar) -> GLint #c_call;
    glUniform1ui : (location: GLint, v0: GLuint) #c_call;
    glUniform2ui : (location: GLint, v0: GLuint, v1: GLuint) #c_call;
    glUniform3ui : (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) #c_call;
    glUniform4ui : (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) #c_call;
    glUniform1uiv : (location: GLint, count: GLsizei, value: *GLuint) #c_call;
    glUniform2uiv : (location: GLint, count: GLsizei, value: *GLuint) #c_call;
    glUniform3uiv : (location: GLint, count: GLsizei, value: *GLuint) #c_call;
    glUniform4uiv : (location: GLint, count: GLsizei, value: *GLuint) #c_call;
    glTexParameterIiv : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glTexParameterIuiv : (target: GLenum, pname: GLenum, params: *GLuint) #c_call;
    glGetTexParameterIiv : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetTexParameterIuiv : (target: GLenum, pname: GLenum, params: *GLuint) #c_call;
    glClearBufferiv : (buffer: GLenum, drawbuffer: GLint, value: *GLint) #c_call;
    glClearBufferuiv : (buffer: GLenum, drawbuffer: GLint, value: *GLuint) #c_call;
    glClearBufferfv : (buffer: GLenum, drawbuffer: GLint, value: *GLfloat) #c_call;
    glClearBufferfi : (buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) #c_call;
    glGetStringi : (name: GLenum, index: GLuint) -> *GLubyte #c_call;
    glIsRenderbuffer : (renderbuffer: GLuint) -> GLboolean #c_call;
    glBindRenderbuffer : (target: GLenum, renderbuffer: GLuint) #c_call;
    glDeleteRenderbuffers : (n: GLsizei, renderbuffers: *GLuint) #c_call;
    glGenRenderbuffers : (n: GLsizei, renderbuffers: *GLuint) #c_call;
    glRenderbufferStorage : (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) #c_call;
    glGetRenderbufferParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glIsFramebuffer : (framebuffer: GLuint) -> GLboolean #c_call;
    glBindFramebuffer : (target: GLenum, framebuffer: GLuint) #c_call;
    glDeleteFramebuffers : (n: GLsizei, framebuffers: *GLuint) #c_call;
    glGenFramebuffers : (n: GLsizei, framebuffers: *GLuint) #c_call;
    glCheckFramebufferStatus : (target: GLenum) -> GLenum #c_call;
    glFramebufferTexture1D : (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) #c_call;
    glFramebufferTexture2D : (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) #c_call;
    glFramebufferTexture3D : (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) #c_call;
    glFramebufferRenderbuffer : (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) #c_call;
    glGetFramebufferAttachmentParameteriv : (target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGenerateMipmap : (target: GLenum) #c_call;
    glBlitFramebuffer : (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) #c_call;
    glRenderbufferStorageMultisample : (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #c_call;
    glFramebufferTextureLayer : (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) #c_call;
    glMapBufferRange : (target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) #c_call;
    glFlushMappedBufferRange : (target: GLenum, offset: GLintptr, length: GLsizeiptr) #c_call;
    glBindVertexArray : (array: GLuint) #c_call;
    glDeleteVertexArrays : (n: GLsizei, arrays: *GLuint) #c_call;
    glGenVertexArrays : (n: GLsizei, arrays: *GLuint) #c_call;
    glIsVertexArray : (array: GLuint) -> GLboolean #c_call;

    // GL_VERSION_3_1
    glDrawArraysInstanced : (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) #c_call;
    glDrawElementsInstanced : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei) #c_call;
    glTexBuffer : (target: GLenum, internalformat: GLenum, buffer: GLuint) #c_call;
    glPrimitiveRestartIndex : (index: GLuint) #c_call;
    glCopyBufferSubData : (readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) #c_call;
    glGetUniformIndices : (program: GLuint, uniformCount: GLsizei, uniformNames: **GLchar, uniformIndices: *GLuint) #c_call;
    glGetActiveUniformsiv : (program: GLuint, uniformCount: GLsizei, uniformIndices: *GLuint, pname: GLenum, params: *GLint) #c_call;
    glGetActiveUniformName : (program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformName: *GLchar) #c_call;
    glGetUniformBlockIndex : (program: GLuint, uniformBlockName: *GLchar) -> GLuint #c_call;
    glGetActiveUniformBlockiv : (program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: *GLint) #c_call;
    glGetActiveUniformBlockName : (program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformBlockName: *GLchar) #c_call;
    glUniformBlockBinding : (program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) #c_call;
    // glBindBufferRange : (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #c_call;
    // glBindBufferBase : (target: GLenum, index: GLuint, buffer: GLuint) #c_call;
    // glGetIntegeri_v : (target: GLenum, index: GLuint, data: *GLint) #c_call;

    // GL_VERSION_3_2
    glDrawElementsBaseVertex : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, basevertex: GLint) #c_call;
    glDrawRangeElementsBaseVertex : (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: *void, basevertex: GLint) #c_call;
    glDrawElementsInstancedBaseVertex : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei, basevertex: GLint) #c_call;
    glMultiDrawElementsBaseVertex : (mode: GLenum, count: *GLsizei, type: GLenum, indices: **void, drawcount: GLsizei, basevertex: *GLint) #c_call;
    glProvokingVertex : (mode: GLenum) #c_call;
    glFenceSync : (condition: GLenum, flags: GLbitfield) -> GLsync #c_call;
    glIsSync : (sync: GLsync) -> GLboolean #c_call;
    glDeleteSync : (sync: GLsync) #c_call;
    glClientWaitSync : (sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum #c_call;
    glWaitSync : (sync: GLsync, flags: GLbitfield, timeout: GLuint64) #c_call;
    glGetInteger64v : (pname: GLenum, data: *GLint64) #c_call;
    glGetSynciv : (sync: GLsync, pname: GLenum, bufSize: GLsizei, length: *GLsizei, values: *GLint) #c_call;
    glGetInteger64i_v : (target: GLenum, index: GLuint, data: *GLint64) #c_call;
    glGetBufferParameteri64v : (target: GLenum, pname: GLenum, params: *GLint64) #c_call;
    glFramebufferTexture : (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) #c_call;
    glTexImage2DMultisample : (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) #c_call;
    glTexImage3DMultisample : (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) #c_call;
    glGetMultisamplefv : (pname: GLenum, index: GLuint, val: *GLfloat) #c_call;
    glSampleMaski : (maskNumber: GLuint, mask: GLbitfield) #c_call;

    // GL_VERSION_3_3
    glBindFragDataLocationIndexed : (program: GLuint, colorNumber: GLuint, index: GLuint, name: *GLchar) #c_call;
    glGetFragDataIndex : (program: GLuint, name: *GLchar) -> GLint #c_call;
    glGenSamplers : (count: GLsizei, samplers: *GLuint) #c_call;
    glDeleteSamplers : (count: GLsizei, samplers: *GLuint) #c_call;
    glIsSampler : (sampler: GLuint) -> GLboolean #c_call;
    glBindSampler : (unit: GLuint, sampler: GLuint) #c_call;
    glSamplerParameteri : (sampler: GLuint, pname: GLenum, param: GLint) #c_call;
    glSamplerParameteriv : (sampler: GLuint, pname: GLenum, param: *GLint) #c_call;
    glSamplerParameterf : (sampler: GLuint, pname: GLenum, param: GLfloat) #c_call;
    glSamplerParameterfv : (sampler: GLuint, pname: GLenum, param: *GLfloat) #c_call;
    glSamplerParameterIiv : (sampler: GLuint, pname: GLenum, param: *GLint) #c_call;
    glSamplerParameterIuiv : (sampler: GLuint, pname: GLenum, param: *GLuint) #c_call;
    glGetSamplerParameteriv : (sampler: GLuint, pname: GLenum, params: *GLint) #c_call;
    glGetSamplerParameterIiv : (sampler: GLuint, pname: GLenum, params: *GLint) #c_call;
    glGetSamplerParameterfv : (sampler: GLuint, pname: GLenum, params: *GLfloat) #c_call;
    glGetSamplerParameterIuiv : (sampler: GLuint, pname: GLenum, params: *GLuint) #c_call;
    glQueryCounter : (id: GLuint, target: GLenum) #c_call;
    glGetQueryObjecti64v : (id: GLuint, pname: GLenum, params: *GLint64) #c_call;
    glGetQueryObjectui64v : (id: GLuint, pname: GLenum, params: *GLuint64) #c_call;
    glVertexAttribDivisor : (index: GLuint, divisor: GLuint) #c_call;
    glVertexAttribP1ui : (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint) #c_call;
    glVertexAttribP1uiv : (index: GLuint, type: GLenum, normalized: GLboolean, value: *GLuint) #c_call;
    glVertexAttribP2ui : (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint) #c_call;
    glVertexAttribP2uiv : (index: GLuint, type: GLenum, normalized: GLboolean, value: *GLuint) #c_call;
    glVertexAttribP3ui : (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint) #c_call;
    glVertexAttribP3uiv : (index: GLuint, type: GLenum, normalized: GLboolean, value: *GLuint) #c_call;
    glVertexAttribP4ui : (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint) #c_call;
    glVertexAttribP4uiv : (index: GLuint, type: GLenum, normalized: GLboolean, value: *GLuint) #c_call;
    glVertexP2ui : (type: GLenum, value: GLuint) #c_call;
    glVertexP2uiv : (type: GLenum, value: *GLuint) #c_call;
    glVertexP3ui : (type: GLenum, value: GLuint) #c_call;
    glVertexP3uiv : (type: GLenum, value: *GLuint) #c_call;
    glVertexP4ui : (type: GLenum, value: GLuint) #c_call;
    glVertexP4uiv : (type: GLenum, value: *GLuint) #c_call;
    glTexCoordP1ui : (type: GLenum, coords: GLuint) #c_call;
    glTexCoordP1uiv : (type: GLenum, coords: *GLuint) #c_call;
    glTexCoordP2ui : (type: GLenum, coords: GLuint) #c_call;
    glTexCoordP2uiv : (type: GLenum, coords: *GLuint) #c_call;
    glTexCoordP3ui : (type: GLenum, coords: GLuint) #c_call;
    glTexCoordP3uiv : (type: GLenum, coords: *GLuint) #c_call;
    glTexCoordP4ui : (type: GLenum, coords: GLuint) #c_call;
    glTexCoordP4uiv : (type: GLenum, coords: *GLuint) #c_call;
    glMultiTexCoordP1ui : (texture: GLenum, type: GLenum, coords: GLuint) #c_call;
    glMultiTexCoordP1uiv : (texture: GLenum, type: GLenum, coords: *GLuint) #c_call;
    glMultiTexCoordP2ui : (texture: GLenum, type: GLenum, coords: GLuint) #c_call;
    glMultiTexCoordP2uiv : (texture: GLenum, type: GLenum, coords: *GLuint) #c_call;
    glMultiTexCoordP3ui : (texture: GLenum, type: GLenum, coords: GLuint) #c_call;
    glMultiTexCoordP3uiv : (texture: GLenum, type: GLenum, coords: *GLuint) #c_call;
    glMultiTexCoordP4ui : (texture: GLenum, type: GLenum, coords: GLuint) #c_call;
    glMultiTexCoordP4uiv : (texture: GLenum, type: GLenum, coords: *GLuint) #c_call;
    glNormalP3ui : (type: GLenum, coords: GLuint) #c_call;
    glNormalP3uiv : (type: GLenum, coords: *GLuint) #c_call;
    glColorP3ui : (type: GLenum, color: GLuint) #c_call;
    glColorP3uiv : (type: GLenum, color: *GLuint) #c_call;
    glColorP4ui : (type: GLenum, color: GLuint) #c_call;
    glColorP4uiv : (type: GLenum, color: *GLuint) #c_call;
    glSecondaryColorP3ui : (type: GLenum, color: GLuint) #c_call;
    glSecondaryColorP3uiv : (type: GLenum, color: *GLuint) #c_call;

    // GL_VERSION_4_0
    glMinSampleShading : (value: GLfloat) #c_call;
    glBlendEquationi : (buf: GLuint, mode: GLenum) #c_call;
    glBlendEquationSeparatei : (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) #c_call;
    glBlendFunci : (buf: GLuint, src: GLenum, dst: GLenum) #c_call;
    glBlendFuncSeparatei : (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) #c_call;
    glDrawArraysIndirect : (mode: GLenum, indirect: *void) #c_call;
    glDrawElementsIndirect : (mode: GLenum, type: GLenum, indirect: *void) #c_call;
    glUniform1d : (location: GLint, x: GLdouble) #c_call;
    glUniform2d : (location: GLint, x: GLdouble, y: GLdouble) #c_call;
    glUniform3d : (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) #c_call;
    glUniform4d : (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #c_call;
    glUniform1dv : (location: GLint, count: GLsizei, value: *GLdouble) #c_call;
    glUniform2dv : (location: GLint, count: GLsizei, value: *GLdouble) #c_call;
    glUniform3dv : (location: GLint, count: GLsizei, value: *GLdouble) #c_call;
    glUniform4dv : (location: GLint, count: GLsizei, value: *GLdouble) #c_call;
    glUniformMatrix2dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    glUniformMatrix3dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    glUniformMatrix4dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    glUniformMatrix2x3dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    glUniformMatrix2x4dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    glUniformMatrix3x2dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    glUniformMatrix3x4dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    glUniformMatrix4x2dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    glUniformMatrix4x3dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    glGetUniformdv : (program: GLuint, location: GLint, params: *GLdouble) #c_call;
    glGetSubroutineUniformLocation : (program: GLuint, shadertype: GLenum, name: *GLchar) -> GLint #c_call;
    glGetSubroutineIndex : (program: GLuint, shadertype: GLenum, name: *GLchar) -> GLuint #c_call;
    glGetActiveSubroutineUniformiv : (program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: *GLint) #c_call;
    glGetActiveSubroutineUniformName : (program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: *GLsizei, name: *GLchar) #c_call;
    glGetActiveSubroutineName : (program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: *GLsizei, name: *GLchar) #c_call;
    glUniformSubroutinesuiv : (shadertype: GLenum, count: GLsizei, indices: *GLuint) #c_call;
    glGetUniformSubroutineuiv : (shadertype: GLenum, location: GLint, params: *GLuint) #c_call;
    glGetProgramStageiv : (program: GLuint, shadertype: GLenum, pname: GLenum, values: *GLint) #c_call;
    glPatchParameteri : (pname: GLenum, value: GLint) #c_call;
    glPatchParameterfv : (pname: GLenum, values: *GLfloat) #c_call;
    glBindTransformFeedback : (target: GLenum, id: GLuint) #c_call;
    glDeleteTransformFeedbacks : (n: GLsizei, ids: *GLuint) #c_call;
    glGenTransformFeedbacks : (n: GLsizei, ids: *GLuint) #c_call;
    glIsTransformFeedback : (id: GLuint) -> GLboolean #c_call;
    glPauseTransformFeedback : () #c_call;
    glResumeTransformFeedback : () #c_call;
    glDrawTransformFeedback : (mode: GLenum, id: GLuint) #c_call;
    glDrawTransformFeedbackStream : (mode: GLenum, id: GLuint, stream: GLuint) #c_call;
    glBeginQueryIndexed : (target: GLenum, index: GLuint, id: GLuint) #c_call;
    glEndQueryIndexed : (target: GLenum, index: GLuint) #c_call;
    glGetQueryIndexediv : (target: GLenum, index: GLuint, pname: GLenum, params: *GLint) #c_call;

    // GL_VERSION_4_1
    glReleaseShaderCompiler : () #c_call;
    glShaderBinary : (count: GLsizei, shaders: *GLuint, binaryformat: GLenum, binary: *void, length: GLsizei) #c_call;
    glGetShaderPrecisionFormat : (shadertype: GLenum, precisiontype: GLenum, range: *GLint, precision: *GLint) #c_call;
    glDepthRangef : (n: GLfloat, f: GLfloat) #c_call;
    glClearDepthf : (d: GLfloat) #c_call;
    glGetProgramBinary : (program: GLuint, bufSize: GLsizei, length: *GLsizei, binaryFormat: *GLenum, binary: *void) #c_call;
    glProgramBinary : (program: GLuint, binaryFormat: GLenum, binary: *void, length: GLsizei) #c_call;
    glProgramParameteri : (program: GLuint, pname: GLenum, value: GLint) #c_call;
    glUseProgramStages : (pipeline: GLuint, stages: GLbitfield, program: GLuint) #c_call;
    glActiveShaderProgram : (pipeline: GLuint, program: GLuint) #c_call;
    glCreateShaderProgramv : (type: GLenum, count: GLsizei, strings: **GLchar) -> GLuint #c_call;
    glBindProgramPipeline : (pipeline: GLuint) #c_call;
    glDeleteProgramPipelines : (n: GLsizei, pipelines: *GLuint) #c_call;
    glGenProgramPipelines : (n: GLsizei, pipelines: *GLuint) #c_call;
    glIsProgramPipeline : (pipeline: GLuint) -> GLboolean #c_call;
    glGetProgramPipelineiv : (pipeline: GLuint, pname: GLenum, params: *GLint) #c_call;
    // glProgramParameteri : (program: GLuint, pname: GLenum, value: GLint) #c_call;
    glProgramUniform1i : (program: GLuint, location: GLint, v0: GLint) #c_call;
    glProgramUniform1iv : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #c_call;
    glProgramUniform1f : (program: GLuint, location: GLint, v0: GLfloat) #c_call;
    glProgramUniform1fv : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #c_call;
    glProgramUniform1d : (program: GLuint, location: GLint, v0: GLdouble) #c_call;
    glProgramUniform1dv : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #c_call;
    glProgramUniform1ui : (program: GLuint, location: GLint, v0: GLuint) #c_call;
    glProgramUniform1uiv : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #c_call;
    glProgramUniform2i : (program: GLuint, location: GLint, v0: GLint, v1: GLint) #c_call;
    glProgramUniform2iv : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #c_call;
    glProgramUniform2f : (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) #c_call;
    glProgramUniform2fv : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #c_call;
    glProgramUniform2d : (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble) #c_call;
    glProgramUniform2dv : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #c_call;
    glProgramUniform2ui : (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) #c_call;
    glProgramUniform2uiv : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #c_call;
    glProgramUniform3i : (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) #c_call;
    glProgramUniform3iv : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #c_call;
    glProgramUniform3f : (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) #c_call;
    glProgramUniform3fv : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #c_call;
    glProgramUniform3d : (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble) #c_call;
    glProgramUniform3dv : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #c_call;
    glProgramUniform3ui : (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) #c_call;
    glProgramUniform3uiv : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #c_call;
    glProgramUniform4i : (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) #c_call;
    glProgramUniform4iv : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #c_call;
    glProgramUniform4f : (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) #c_call;
    glProgramUniform4fv : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #c_call;
    glProgramUniform4d : (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble) #c_call;
    glProgramUniform4dv : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #c_call;
    glProgramUniform4ui : (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) #c_call;
    glProgramUniform4uiv : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #c_call;
    glProgramUniformMatrix2fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glProgramUniformMatrix3fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glProgramUniformMatrix4fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glProgramUniformMatrix2dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    glProgramUniformMatrix3dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    glProgramUniformMatrix4dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    glProgramUniformMatrix2x3fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glProgramUniformMatrix3x2fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glProgramUniformMatrix2x4fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glProgramUniformMatrix4x2fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glProgramUniformMatrix3x4fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glProgramUniformMatrix4x3fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glProgramUniformMatrix2x3dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    glProgramUniformMatrix3x2dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    glProgramUniformMatrix2x4dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    glProgramUniformMatrix4x2dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    glProgramUniformMatrix3x4dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    glProgramUniformMatrix4x3dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    glValidateProgramPipeline : (pipeline: GLuint) #c_call;
    glGetProgramPipelineInfoLog : (pipeline: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) #c_call;
    glVertexAttribL1d : (index: GLuint, x: GLdouble) #c_call;
    glVertexAttribL2d : (index: GLuint, x: GLdouble, y: GLdouble) #c_call;
    glVertexAttribL3d : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) #c_call;
    glVertexAttribL4d : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #c_call;
    glVertexAttribL1dv : (index: GLuint, v: *GLdouble) #c_call;
    glVertexAttribL2dv : (index: GLuint, v: *GLdouble) #c_call;
    glVertexAttribL3dv : (index: GLuint, v: *GLdouble) #c_call;
    glVertexAttribL4dv : (index: GLuint, v: *GLdouble) #c_call;
    glVertexAttribLPointer : (index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #c_call;
    glGetVertexAttribLdv : (index: GLuint, pname: GLenum, params: *GLdouble) #c_call;
    glViewportArrayv : (first: GLuint, count: GLsizei, v: *GLfloat) #c_call;
    glViewportIndexedf : (index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) #c_call;
    glViewportIndexedfv : (index: GLuint, v: *GLfloat) #c_call;
    glScissorArrayv : (first: GLuint, count: GLsizei, v: *GLint) #c_call;
    glScissorIndexed : (index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) #c_call;
    glScissorIndexedv : (index: GLuint, v: *GLint) #c_call;
    glDepthRangeArrayv : (first: GLuint, count: GLsizei, v: *GLdouble) #c_call;
    glDepthRangeIndexed : (index: GLuint, n: GLdouble, f: GLdouble) #c_call;
    glGetFloati_v : (target: GLenum, index: GLuint, data: *GLfloat) #c_call;
    glGetDoublei_v : (target: GLenum, index: GLuint, data: *GLdouble) #c_call;

    // GL_VERSION_4_2
    glDrawArraysInstancedBaseInstance : (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint) #c_call;
    glDrawElementsInstancedBaseInstance : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei, baseinstance: GLuint) #c_call;
    glDrawElementsInstancedBaseVertexBaseInstance : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint) #c_call;
    glGetInternalformativ : (target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: *GLint) #c_call;
    glGetActiveAtomicCounterBufferiv : (program: GLuint, bufferIndex: GLuint, pname: GLenum, params: *GLint) #c_call;
    glBindImageTexture : (unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) #c_call;
    glMemoryBarrier : (barriers: GLbitfield) #c_call;
    glTexStorage1D : (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) #c_call;
    glTexStorage2D : (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #c_call;
    glTexStorage3D : (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) #c_call;
    glDrawTransformFeedbackInstanced : (mode: GLenum, id: GLuint, instancecount: GLsizei) #c_call;
    glDrawTransformFeedbackStreamInstanced : (mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei) #c_call;

    // GL_VERSION_4_3
    glClearBufferData : (target: GLenum, internalformat: GLenum, format: GLenum, type: GLenum, data: *void) #c_call;
    glClearBufferSubData : (target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: *void) #c_call;
    glDispatchCompute : (num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint) #c_call;
    glDispatchComputeIndirect : (indirect: GLintptr) #c_call;
    glCopyImageSubData : (srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) #c_call;
    glFramebufferParameteri : (target: GLenum, pname: GLenum, param: GLint) #c_call;
    glGetFramebufferParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetInternalformati64v : (target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: *GLint64) #c_call;
    glInvalidateTexSubImage : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) #c_call;
    glInvalidateTexImage : (texture: GLuint, level: GLint) #c_call;
    glInvalidateBufferSubData : (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) #c_call;
    glInvalidateBufferData : (buffer: GLuint) #c_call;
    glInvalidateFramebuffer : (target: GLenum, numAttachments: GLsizei, attachments: *GLenum) #c_call;
    glInvalidateSubFramebuffer : (target: GLenum, numAttachments: GLsizei, attachments: *GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #c_call;
    glMultiDrawArraysIndirect : (mode: GLenum, indirect: *void, drawcount: GLsizei, stride: GLsizei) #c_call;
    glMultiDrawElementsIndirect : (mode: GLenum, type: GLenum, indirect: *void, drawcount: GLsizei, stride: GLsizei) #c_call;
    glGetProgramInterfaceiv : (program: GLuint, programInterface: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetProgramResourceIndex : (program: GLuint, programInterface: GLenum, name: *GLchar) -> GLuint #c_call;
    glGetProgramResourceName : (program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: *GLsizei, name: *GLchar) #c_call;
    glGetProgramResourceiv : (program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: *GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) #c_call;
    glGetProgramResourceLocation : (program: GLuint, programInterface: GLenum, name: *GLchar) -> GLint #c_call;
    glGetProgramResourceLocationIndex : (program: GLuint, programInterface: GLenum, name: *GLchar) -> GLint #c_call;
    glShaderStorageBlockBinding : (program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint) #c_call;
    glTexBufferRange : (target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #c_call;
    glTexStorage2DMultisample : (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) #c_call;
    glTexStorage3DMultisample : (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) #c_call;
    glTextureView : (texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) #c_call;
    glBindVertexBuffer : (bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) #c_call;
    glVertexAttribFormat : (attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint) #c_call;
    glVertexAttribIFormat : (attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) #c_call;
    glVertexAttribLFormat : (attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) #c_call;
    glVertexAttribBinding : (attribindex: GLuint, bindingindex: GLuint) #c_call;
    glVertexBindingDivisor : (bindingindex: GLuint, divisor: GLuint) #c_call;
    glDebugMessageControl : (source: GLenum, type: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) #c_call;
    glDebugMessageInsert : (source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) #c_call;
    glDebugMessageCallback : (callback: GLDEBUGPROC, userParam: *void) #c_call;
    glGetDebugMessageLog : (count: GLuint, bufSize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint #c_call;
    glPushDebugGroup : (source: GLenum, id: GLuint, length: GLsizei, message: *GLchar) #c_call;
    glPopDebugGroup : () #c_call;
    glObjectLabel : (identifier: GLenum, name: GLuint, length: GLsizei, label: *GLchar) #c_call;
    glGetObjectLabel : (identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) #c_call;
    glObjectPtrLabel : (ptr: *void, length: GLsizei, label: *GLchar) #c_call;
    glGetObjectPtrLabel : (ptr: *void, bufSize: GLsizei, length: *GLsizei, label: *GLchar) #c_call;
    // glGetPointerv : (pname: GLenum, params: **void) #c_call;

    // GL_VERSION_4_4
    glBufferStorage : (target: GLenum, size: GLsizeiptr, data: *void, flags: GLbitfield) #c_call;
    glClearTexImage : (texture: GLuint, level: GLint, format: GLenum, type: GLenum, data: *void) #c_call;
    glClearTexSubImage : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, data: *void) #c_call;
    glBindBuffersBase : (target: GLenum, first: GLuint, count: GLsizei, buffers: *GLuint) #c_call;
    glBindBuffersRange : (target: GLenum, first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, sizes: *GLsizeiptr) #c_call;
    glBindTextures : (first: GLuint, count: GLsizei, textures: *GLuint) #c_call;
    glBindSamplers : (first: GLuint, count: GLsizei, samplers: *GLuint) #c_call;
    glBindImageTextures : (first: GLuint, count: GLsizei, textures: *GLuint) #c_call;
    glBindVertexBuffers : (first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, strides: *GLsizei) #c_call;

    // GL_VERSION_4_5
    glClipControl : (origin: GLenum, depth: GLenum) #c_call;
    glCreateTransformFeedbacks : (n: GLsizei, ids: *GLuint) #c_call;
    glTransformFeedbackBufferBase : (xfb: GLuint, index: GLuint, buffer: GLuint) #c_call;
    glTransformFeedbackBufferRange : (xfb: GLuint, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #c_call;
    glGetTransformFeedbackiv : (xfb: GLuint, pname: GLenum, param: *GLint) #c_call;
    glGetTransformFeedbacki_v : (xfb: GLuint, pname: GLenum, index: GLuint, param: *GLint) #c_call;
    glGetTransformFeedbacki64_v : (xfb: GLuint, pname: GLenum, index: GLuint, param: *GLint64) #c_call;
    glCreateBuffers : (n: GLsizei, buffers: *GLuint) #c_call;
    glNamedBufferStorage : (buffer: GLuint, size: GLsizeiptr, data: *void, flags: GLbitfield) #c_call;
    glNamedBufferData : (buffer: GLuint, size: GLsizeiptr, data: *void, usage: GLenum) #c_call;
    glNamedBufferSubData : (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *void) #c_call;
    glCopyNamedBufferSubData : (readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) #c_call;
    glClearNamedBufferData : (buffer: GLuint, internalformat: GLenum, format: GLenum, type: GLenum, data: *void) #c_call;
    glClearNamedBufferSubData : (buffer: GLuint, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: *void) #c_call;
    glMapNamedBuffer : (buffer: GLuint, access: GLenum) -> *void #c_call;
    glMapNamedBufferRange : (buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *void #c_call;
    glUnmapNamedBuffer : (buffer: GLuint) -> GLboolean #c_call;
    glFlushMappedNamedBufferRange : (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) #c_call;
    glGetNamedBufferParameteriv : (buffer: GLuint, pname: GLenum, params: *GLint) #c_call;
    glGetNamedBufferParameteri64v : (buffer: GLuint, pname: GLenum, params: *GLint64) #c_call;
    glGetNamedBufferPointerv : (buffer: GLuint, pname: GLenum, params: **void) #c_call;
    glGetNamedBufferSubData : (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *void) #c_call;
    glCreateFramebuffers : (n: GLsizei, framebuffers: *GLuint) #c_call;
    glNamedFramebufferRenderbuffer : (framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) #c_call;
    glNamedFramebufferParameteri : (framebuffer: GLuint, pname: GLenum, param: GLint) #c_call;
    glNamedFramebufferTexture : (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) #c_call;
    glNamedFramebufferTextureLayer : (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) #c_call;
    glNamedFramebufferDrawBuffer : (framebuffer: GLuint, buf: GLenum) #c_call;
    glNamedFramebufferDrawBuffers : (framebuffer: GLuint, n: GLsizei, bufs: *GLenum) #c_call;
    glNamedFramebufferReadBuffer : (framebuffer: GLuint, src: GLenum) #c_call;
    glInvalidateNamedFramebufferData : (framebuffer: GLuint, numAttachments: GLsizei, attachments: *GLenum) #c_call;
    glInvalidateNamedFramebufferSubData : (framebuffer: GLuint, numAttachments: GLsizei, attachments: *GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #c_call;
    glClearNamedFramebufferiv : (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *GLint) #c_call;
    glClearNamedFramebufferuiv : (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *GLuint) #c_call;
    glClearNamedFramebufferfv : (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *GLfloat) #c_call;
    glClearNamedFramebufferfi : (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) #c_call;
    glBlitNamedFramebuffer : (readFramebuffer: GLuint, drawFramebuffer: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) #c_call;
    glCheckNamedFramebufferStatus : (framebuffer: GLuint, target: GLenum) -> GLenum #c_call;
    glGetNamedFramebufferParameteriv : (framebuffer: GLuint, pname: GLenum, param: *GLint) #c_call;
    glGetNamedFramebufferAttachmentParameteriv : (framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: *GLint) #c_call;
    glCreateRenderbuffers : (n: GLsizei, renderbuffers: *GLuint) #c_call;
    glNamedRenderbufferStorage : (renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) #c_call;
    glNamedRenderbufferStorageMultisample : (renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #c_call;
    glGetNamedRenderbufferParameteriv : (renderbuffer: GLuint, pname: GLenum, params: *GLint) #c_call;
    glCreateTextures : (target: GLenum, n: GLsizei, textures: *GLuint) #c_call;
    glTextureBuffer : (texture: GLuint, internalformat: GLenum, buffer: GLuint) #c_call;
    glTextureBufferRange : (texture: GLuint, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #c_call;
    glTextureStorage1D : (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei) #c_call;
    glTextureStorage2D : (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #c_call;
    glTextureStorage3D : (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) #c_call;
    glTextureStorage2DMultisample : (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) #c_call;
    glTextureStorage3DMultisample : (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) #c_call;
    glTextureSubImage1D : (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glTextureSubImage2D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glTextureSubImage3D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glCompressedTextureSubImage1D : (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #c_call;
    glCompressedTextureSubImage2D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #c_call;
    glCompressedTextureSubImage3D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #c_call;
    glCopyTextureSubImage1D : (texture: GLuint, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) #c_call;
    glCopyTextureSubImage2D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #c_call;
    glCopyTextureSubImage3D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #c_call;
    glTextureParameterf : (texture: GLuint, pname: GLenum, param: GLfloat) #c_call;
    glTextureParameterfv : (texture: GLuint, pname: GLenum, param: *GLfloat) #c_call;
    glTextureParameteri : (texture: GLuint, pname: GLenum, param: GLint) #c_call;
    glTextureParameterIiv : (texture: GLuint, pname: GLenum, params: *GLint) #c_call;
    glTextureParameterIuiv : (texture: GLuint, pname: GLenum, params: *GLuint) #c_call;
    glTextureParameteriv : (texture: GLuint, pname: GLenum, param: *GLint) #c_call;
    glGenerateTextureMipmap : (texture: GLuint) #c_call;
    glBindTextureUnit : (unit: GLuint, texture: GLuint) #c_call;
    glGetTextureImage : (texture: GLuint, level: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: *void) #c_call;
    glGetCompressedTextureImage : (texture: GLuint, level: GLint, bufSize: GLsizei, pixels: *void) #c_call;
    glGetTextureLevelParameterfv : (texture: GLuint, level: GLint, pname: GLenum, params: *GLfloat) #c_call;
    glGetTextureLevelParameteriv : (texture: GLuint, level: GLint, pname: GLenum, params: *GLint) #c_call;
    glGetTextureParameterfv : (texture: GLuint, pname: GLenum, params: *GLfloat) #c_call;
    glGetTextureParameterIiv : (texture: GLuint, pname: GLenum, params: *GLint) #c_call;
    glGetTextureParameterIuiv : (texture: GLuint, pname: GLenum, params: *GLuint) #c_call;
    glGetTextureParameteriv : (texture: GLuint, pname: GLenum, params: *GLint) #c_call;
    glCreateVertexArrays : (n: GLsizei, arrays: *GLuint) #c_call;
    glDisableVertexArrayAttrib : (vaobj: GLuint, index: GLuint) #c_call;
    glEnableVertexArrayAttrib : (vaobj: GLuint, index: GLuint) #c_call;
    glVertexArrayElementBuffer : (vaobj: GLuint, buffer: GLuint) #c_call;
    glVertexArrayVertexBuffer : (vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) #c_call;
    glVertexArrayVertexBuffers : (vaobj: GLuint, first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, strides: *GLsizei) #c_call;
    glVertexArrayAttribBinding : (vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) #c_call;
    glVertexArrayAttribFormat : (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint) #c_call;
    glVertexArrayAttribIFormat : (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) #c_call;
    glVertexArrayAttribLFormat : (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) #c_call;
    glVertexArrayBindingDivisor : (vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) #c_call;
    glGetVertexArrayiv : (vaobj: GLuint, pname: GLenum, param: *GLint) #c_call;
    glGetVertexArrayIndexediv : (vaobj: GLuint, index: GLuint, pname: GLenum, param: *GLint) #c_call;
    glGetVertexArrayIndexed64iv : (vaobj: GLuint, index: GLuint, pname: GLenum, param: *GLint64) #c_call;
    glCreateSamplers : (n: GLsizei, samplers: *GLuint) #c_call;
    glCreateProgramPipelines : (n: GLsizei, pipelines: *GLuint) #c_call;
    glCreateQueries : (target: GLenum, n: GLsizei, ids: *GLuint) #c_call;
    glGetQueryBufferObjecti64v : (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) #c_call;
    glGetQueryBufferObjectiv : (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) #c_call;
    glGetQueryBufferObjectui64v : (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) #c_call;
    glGetQueryBufferObjectuiv : (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) #c_call;
    glMemoryBarrierByRegion : (barriers: GLbitfield) #c_call;
    glGetTextureSubImage : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: *void) #c_call;
    glGetCompressedTextureSubImage : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, bufSize: GLsizei, pixels: *void) #c_call;
    glGetGraphicsResetStatus : () -> GLenum #c_call;
    glGetnCompressedTexImage : (target: GLenum, lod: GLint, bufSize: GLsizei, pixels: *void) #c_call;
    glGetnTexImage : (target: GLenum, level: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: *void) #c_call;
    glGetnUniformdv : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLdouble) #c_call;
    glGetnUniformfv : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) #c_call;
    glGetnUniformiv : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) #c_call;
    glGetnUniformuiv : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLuint) #c_call;
    glReadnPixels : (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, data: *void) #c_call;
    glGetnMapdv : (target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLdouble) #c_call;
    glGetnMapfv : (target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLfloat) #c_call;
    glGetnMapiv : (target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLint) #c_call;
    glGetnPixelMapfv : (map: GLenum, bufSize: GLsizei, values: *GLfloat) #c_call;
    glGetnPixelMapuiv : (map: GLenum, bufSize: GLsizei, values: *GLuint) #c_call;
    glGetnPixelMapusv : (map: GLenum, bufSize: GLsizei, values: *GLushort) #c_call;
    glGetnPolygonStipple : (bufSize: GLsizei, pattern: *GLubyte) #c_call;
    glGetnColorTable : (target: GLenum, format: GLenum, type: GLenum, bufSize: GLsizei, table: *void) #c_call;
    glGetnConvolutionFilter : (target: GLenum, format: GLenum, type: GLenum, bufSize: GLsizei, image: *void) #c_call;
    glGetnSeparableFilter : (target: GLenum, format: GLenum, type: GLenum, rowBufSize: GLsizei, row: *void, columnBufSize: GLsizei, column: *void, span: *void) #c_call;
    glGetnHistogram : (target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, bufSize: GLsizei, values: *void) #c_call;
    glGetnMinmax : (target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, bufSize: GLsizei, values: *void) #c_call;
    glTextureBarrier : () #c_call;

    // GL_VERSION_4_6
    glSpecializeShader : (shader: GLuint, pEntryPoint: *GLchar, numSpecializationConstants: GLuint, pConstantIndex: *GLuint, pConstantValue: *GLuint) #c_call;
    glMultiDrawArraysIndirectCount : (mode: GLenum, indirect: *void, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) #c_call;
    glMultiDrawElementsIndirectCount : (mode: GLenum, type: GLenum, indirect: *void, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) #c_call;
    glPolygonOffsetClamp : (factor: GLfloat, units: GLfloat, clamp: GLfloat) #c_call;

    // Extension flags:

    GL_3DFX_multisample : bool;
    GL_3DFX_tbuffer : bool;
    GL_3DFX_texture_compression_FXT1 : bool;
    GL_AMD_blend_minmax_factor : bool;
    GL_AMD_conservative_depth : bool;
    GL_AMD_debug_output : bool;
    GL_AMD_depth_clamp_separate : bool;
    GL_AMD_draw_buffers_blend : bool;
    GL_AMD_framebuffer_sample_positions : bool;
    GL_AMD_gcn_shader : bool;
    GL_AMD_gpu_shader_half_float : bool;
    GL_AMD_gpu_shader_int16 : bool;
    GL_AMD_gpu_shader_int64 : bool;
    GL_AMD_interleaved_elements : bool;
    GL_AMD_multi_draw_indirect : bool;
    GL_AMD_name_gen_delete : bool;
    GL_AMD_occlusion_query_event : bool;
    GL_AMD_performance_monitor : bool;
    GL_AMD_pinned_memory : bool;
    GL_AMD_query_buffer_object : bool;
    GL_AMD_sample_positions : bool;
    GL_AMD_seamless_cubemap_per_texture : bool;
    GL_AMD_shader_atomic_counter_ops : bool;
    GL_AMD_shader_ballot : bool;
    GL_AMD_shader_explicit_vertex_parameter : bool;
    GL_AMD_shader_gpu_shader_half_float_fetch : bool;
    GL_AMD_shader_image_load_store_lod : bool;
    GL_AMD_shader_stencil_export : bool;
    GL_AMD_shader_trinary_minmax : bool;
    GL_AMD_sparse_texture : bool;
    GL_AMD_stencil_operation_extended : bool;
    GL_AMD_texture_gather_bias_lod : bool;
    GL_AMD_texture_texture4 : bool;
    GL_AMD_transform_feedback3_lines_triangles : bool;
    GL_AMD_transform_feedback4 : bool;
    GL_AMD_vertex_shader_layer : bool;
    GL_AMD_vertex_shader_tessellator : bool;
    GL_AMD_vertex_shader_viewport_index : bool;
    GL_APPLE_aux_depth_stencil : bool;
    GL_APPLE_client_storage : bool;
    GL_APPLE_element_array : bool;
    GL_APPLE_fence : bool;
    GL_APPLE_float_pixels : bool;
    GL_APPLE_flush_buffer_range : bool;
    GL_APPLE_object_purgeable : bool;
    GL_APPLE_rgb_422 : bool;
    GL_APPLE_row_bytes : bool;
    GL_APPLE_specular_vector : bool;
    GL_APPLE_texture_range : bool;
    GL_APPLE_transform_hint : bool;
    GL_APPLE_vertex_array_object : bool;
    GL_APPLE_vertex_array_range : bool;
    GL_APPLE_vertex_program_evaluators : bool;
    GL_APPLE_ycbcr_422 : bool;
    GL_ARB_ES2_compatibility : bool;
    GL_ARB_ES3_1_compatibility : bool;
    GL_ARB_ES3_2_compatibility : bool;
    GL_ARB_ES3_compatibility : bool;
    GL_ARB_arrays_of_arrays : bool;
    GL_ARB_base_instance : bool;
    GL_ARB_bindless_texture : bool;
    GL_ARB_blend_func_extended : bool;
    GL_ARB_buffer_storage : bool;
    GL_ARB_cl_event : bool;
    GL_ARB_clear_buffer_object : bool;
    GL_ARB_clear_texture : bool;
    GL_ARB_clip_control : bool;
    GL_ARB_color_buffer_float : bool;
    GL_ARB_compatibility : bool;
    GL_ARB_compressed_texture_pixel_storage : bool;
    GL_ARB_compute_shader : bool;
    GL_ARB_compute_variable_group_size : bool;
    GL_ARB_conditional_render_inverted : bool;
    GL_ARB_conservative_depth : bool;
    GL_ARB_copy_buffer : bool;
    GL_ARB_copy_image : bool;
    GL_ARB_cull_distance : bool;
    GL_ARB_debug_output : bool;
    GL_ARB_depth_buffer_float : bool;
    GL_ARB_depth_clamp : bool;
    GL_ARB_depth_texture : bool;
    GL_ARB_derivative_control : bool;
    GL_ARB_direct_state_access : bool;
    GL_ARB_draw_buffers : bool;
    GL_ARB_draw_buffers_blend : bool;
    GL_ARB_draw_elements_base_vertex : bool;
    GL_ARB_draw_indirect : bool;
    GL_ARB_draw_instanced : bool;
    GL_ARB_enhanced_layouts : bool;
    GL_ARB_explicit_attrib_location : bool;
    GL_ARB_explicit_uniform_location : bool;
    GL_ARB_fragment_coord_conventions : bool;
    GL_ARB_fragment_layer_viewport : bool;
    GL_ARB_fragment_program : bool;
    GL_ARB_fragment_program_shadow : bool;
    GL_ARB_fragment_shader : bool;
    GL_ARB_fragment_shader_interlock : bool;
    GL_ARB_framebuffer_no_attachments : bool;
    GL_ARB_framebuffer_object : bool;
    GL_ARB_framebuffer_sRGB : bool;
    GL_ARB_geometry_shader4 : bool;
    GL_ARB_get_program_binary : bool;
    GL_ARB_get_texture_sub_image : bool;
    GL_ARB_gl_spirv : bool;
    GL_ARB_gpu_shader5 : bool;
    GL_ARB_gpu_shader_fp64 : bool;
    GL_ARB_gpu_shader_int64 : bool;
    GL_ARB_half_float_pixel : bool;
    GL_ARB_half_float_vertex : bool;
    GL_ARB_imaging : bool;
    GL_ARB_indirect_parameters : bool;
    GL_ARB_instanced_arrays : bool;
    GL_ARB_internalformat_query : bool;
    GL_ARB_internalformat_query2 : bool;
    GL_ARB_invalidate_subdata : bool;
    GL_ARB_map_buffer_alignment : bool;
    GL_ARB_map_buffer_range : bool;
    GL_ARB_matrix_palette : bool;
    GL_ARB_multi_bind : bool;
    GL_ARB_multi_draw_indirect : bool;
    GL_ARB_multisample : bool;
    GL_ARB_multitexture : bool;
    GL_ARB_occlusion_query : bool;
    GL_ARB_occlusion_query2 : bool;
    GL_ARB_parallel_shader_compile : bool;
    GL_ARB_pipeline_statistics_query : bool;
    GL_ARB_pixel_buffer_object : bool;
    GL_ARB_point_parameters : bool;
    GL_ARB_point_sprite : bool;
    GL_ARB_polygon_offset_clamp : bool;
    GL_ARB_post_depth_coverage : bool;
    GL_ARB_program_interface_query : bool;
    GL_ARB_provoking_vertex : bool;
    GL_ARB_query_buffer_object : bool;
    GL_ARB_robust_buffer_access_behavior : bool;
    GL_ARB_robustness : bool;
    GL_ARB_robustness_isolation : bool;
    GL_ARB_sample_locations : bool;
    GL_ARB_sample_shading : bool;
    GL_ARB_sampler_objects : bool;
    GL_ARB_seamless_cube_map : bool;
    GL_ARB_seamless_cubemap_per_texture : bool;
    GL_ARB_separate_shader_objects : bool;
    GL_ARB_shader_atomic_counter_ops : bool;
    GL_ARB_shader_atomic_counters : bool;
    GL_ARB_shader_ballot : bool;
    GL_ARB_shader_bit_encoding : bool;
    GL_ARB_shader_clock : bool;
    GL_ARB_shader_draw_parameters : bool;
    GL_ARB_shader_group_vote : bool;
    GL_ARB_shader_image_load_store : bool;
    GL_ARB_shader_image_size : bool;
    GL_ARB_shader_objects : bool;
    GL_ARB_shader_precision : bool;
    GL_ARB_shader_stencil_export : bool;
    GL_ARB_shader_storage_buffer_object : bool;
    GL_ARB_shader_subroutine : bool;
    GL_ARB_shader_texture_image_samples : bool;
    GL_ARB_shader_texture_lod : bool;
    GL_ARB_shader_viewport_layer_array : bool;
    GL_ARB_shading_language_100 : bool;
    GL_ARB_shading_language_420pack : bool;
    GL_ARB_shading_language_include : bool;
    GL_ARB_shading_language_packing : bool;
    GL_ARB_shadow : bool;
    GL_ARB_shadow_ambient : bool;
    GL_ARB_sparse_buffer : bool;
    GL_ARB_sparse_texture : bool;
    GL_ARB_sparse_texture2 : bool;
    GL_ARB_sparse_texture_clamp : bool;
    GL_ARB_spirv_extensions : bool;
    GL_ARB_stencil_texturing : bool;
    GL_ARB_sync : bool;
    GL_ARB_tessellation_shader : bool;
    GL_ARB_texture_barrier : bool;
    GL_ARB_texture_border_clamp : bool;
    GL_ARB_texture_buffer_object : bool;
    GL_ARB_texture_buffer_object_rgb32 : bool;
    GL_ARB_texture_buffer_range : bool;
    GL_ARB_texture_compression : bool;
    GL_ARB_texture_compression_bptc : bool;
    GL_ARB_texture_compression_rgtc : bool;
    GL_ARB_texture_cube_map : bool;
    GL_ARB_texture_cube_map_array : bool;
    GL_ARB_texture_env_add : bool;
    GL_ARB_texture_env_combine : bool;
    GL_ARB_texture_env_crossbar : bool;
    GL_ARB_texture_env_dot3 : bool;
    GL_ARB_texture_filter_anisotropic : bool;
    GL_ARB_texture_filter_minmax : bool;
    GL_ARB_texture_float : bool;
    GL_ARB_texture_gather : bool;
    GL_ARB_texture_mirror_clamp_to_edge : bool;
    GL_ARB_texture_mirrored_repeat : bool;
    GL_ARB_texture_multisample : bool;
    GL_ARB_texture_non_power_of_two : bool;
    GL_ARB_texture_query_levels : bool;
    GL_ARB_texture_query_lod : bool;
    GL_ARB_texture_rectangle : bool;
    GL_ARB_texture_rg : bool;
    GL_ARB_texture_rgb10_a2ui : bool;
    GL_ARB_texture_stencil8 : bool;
    GL_ARB_texture_storage : bool;
    GL_ARB_texture_storage_multisample : bool;
    GL_ARB_texture_swizzle : bool;
    GL_ARB_texture_view : bool;
    GL_ARB_timer_query : bool;
    GL_ARB_transform_feedback2 : bool;
    GL_ARB_transform_feedback3 : bool;
    GL_ARB_transform_feedback_instanced : bool;
    GL_ARB_transform_feedback_overflow_query : bool;
    GL_ARB_transpose_matrix : bool;
    GL_ARB_uniform_buffer_object : bool;
    GL_ARB_vertex_array_bgra : bool;
    GL_ARB_vertex_array_object : bool;
    GL_ARB_vertex_attrib_64bit : bool;
    GL_ARB_vertex_attrib_binding : bool;
    GL_ARB_vertex_blend : bool;
    GL_ARB_vertex_buffer_object : bool;
    GL_ARB_vertex_program : bool;
    GL_ARB_vertex_shader : bool;
    GL_ARB_vertex_type_10f_11f_11f_rev : bool;
    GL_ARB_vertex_type_2_10_10_10_rev : bool;
    GL_ARB_viewport_array : bool;
    GL_ARB_window_pos : bool;
    GL_ATI_draw_buffers : bool;
    GL_ATI_element_array : bool;
    GL_ATI_envmap_bumpmap : bool;
    GL_ATI_fragment_shader : bool;
    GL_ATI_map_object_buffer : bool;
    GL_ATI_meminfo : bool;
    GL_ATI_pixel_format_float : bool;
    GL_ATI_pn_triangles : bool;
    GL_ATI_separate_stencil : bool;
    GL_ATI_text_fragment_shader : bool;
    GL_ATI_texture_env_combine3 : bool;
    GL_ATI_texture_float : bool;
    GL_ATI_texture_mirror_once : bool;
    GL_ATI_vertex_array_object : bool;
    GL_ATI_vertex_attrib_array_object : bool;
    GL_ATI_vertex_streams : bool;
    GL_EXT_422_pixels : bool;
    GL_EXT_abgr : bool;
    GL_EXT_bgra : bool;
    GL_EXT_bindable_uniform : bool;
    GL_EXT_blend_color : bool;
    GL_EXT_blend_equation_separate : bool;
    GL_EXT_blend_func_separate : bool;
    GL_EXT_blend_logic_op : bool;
    GL_EXT_blend_minmax : bool;
    GL_EXT_blend_subtract : bool;
    GL_EXT_clip_volume_hint : bool;
    GL_EXT_cmyka : bool;
    GL_EXT_color_subtable : bool;
    GL_EXT_compiled_vertex_array : bool;
    GL_EXT_convolution : bool;
    GL_EXT_coordinate_frame : bool;
    GL_EXT_copy_texture : bool;
    GL_EXT_cull_vertex : bool;
    GL_EXT_debug_label : bool;
    GL_EXT_debug_marker : bool;
    GL_EXT_depth_bounds_test : bool;
    GL_EXT_direct_state_access : bool;
    GL_EXT_draw_buffers2 : bool;
    GL_EXT_draw_instanced : bool;
    GL_EXT_draw_range_elements : bool;
    GL_EXT_external_buffer : bool;
    GL_EXT_fog_coord : bool;
    GL_EXT_framebuffer_blit : bool;
    GL_EXT_framebuffer_multisample : bool;
    GL_EXT_framebuffer_multisample_blit_scaled : bool;
    GL_EXT_framebuffer_object : bool;
    GL_EXT_framebuffer_sRGB : bool;
    GL_EXT_geometry_shader4 : bool;
    GL_EXT_gpu_program_parameters : bool;
    GL_EXT_gpu_shader4 : bool;
    GL_EXT_histogram : bool;
    GL_EXT_index_array_formats : bool;
    GL_EXT_index_func : bool;
    GL_EXT_index_material : bool;
    GL_EXT_index_texture : bool;
    GL_EXT_light_texture : bool;
    GL_EXT_memory_object : bool;
    GL_EXT_memory_object_fd : bool;
    GL_EXT_memory_object_win32 : bool;
    GL_EXT_misc_attribute : bool;
    GL_EXT_multi_draw_arrays : bool;
    GL_EXT_multisample : bool;
    GL_EXT_packed_depth_stencil : bool;
    GL_EXT_packed_float : bool;
    GL_EXT_packed_pixels : bool;
    GL_EXT_paletted_texture : bool;
    GL_EXT_pixel_buffer_object : bool;
    GL_EXT_pixel_transform : bool;
    GL_EXT_pixel_transform_color_table : bool;
    GL_EXT_point_parameters : bool;
    GL_EXT_polygon_offset : bool;
    GL_EXT_polygon_offset_clamp : bool;
    GL_EXT_post_depth_coverage : bool;
    GL_EXT_provoking_vertex : bool;
    GL_EXT_raster_multisample : bool;
    GL_EXT_rescale_normal : bool;
    GL_EXT_secondary_color : bool;
    GL_EXT_semaphore : bool;
    GL_EXT_semaphore_fd : bool;
    GL_EXT_semaphore_win32 : bool;
    GL_EXT_separate_shader_objects : bool;
    GL_EXT_separate_specular_color : bool;
    GL_EXT_shader_framebuffer_fetch : bool;
    GL_EXT_shader_framebuffer_fetch_non_coherent : bool;
    GL_EXT_shader_image_load_formatted : bool;
    GL_EXT_shader_image_load_store : bool;
    GL_EXT_shader_integer_mix : bool;
    GL_EXT_shadow_funcs : bool;
    GL_EXT_shared_texture_palette : bool;
    GL_EXT_sparse_texture2 : bool;
    GL_EXT_stencil_clear_tag : bool;
    GL_EXT_stencil_two_side : bool;
    GL_EXT_stencil_wrap : bool;
    GL_EXT_subtexture : bool;
    GL_EXT_texture : bool;
    GL_EXT_texture3D : bool;
    GL_EXT_texture_array : bool;
    GL_EXT_texture_buffer_object : bool;
    GL_EXT_texture_compression_latc : bool;
    GL_EXT_texture_compression_rgtc : bool;
    GL_EXT_texture_compression_s3tc : bool;
    GL_EXT_texture_cube_map : bool;
    GL_EXT_texture_env_add : bool;
    GL_EXT_texture_env_combine : bool;
    GL_EXT_texture_env_dot3 : bool;
    GL_EXT_texture_filter_anisotropic : bool;
    GL_EXT_texture_filter_minmax : bool;
    GL_EXT_texture_integer : bool;
    GL_EXT_texture_lod_bias : bool;
    GL_EXT_texture_mirror_clamp : bool;
    GL_EXT_texture_object : bool;
    GL_EXT_texture_perturb_normal : bool;
    GL_EXT_texture_sRGB : bool;
    GL_EXT_texture_sRGB_decode : bool;
    GL_EXT_texture_shared_exponent : bool;
    GL_EXT_texture_snorm : bool;
    GL_EXT_texture_swizzle : bool;
    GL_EXT_timer_query : bool;
    GL_EXT_transform_feedback : bool;
    GL_EXT_vertex_array : bool;
    GL_EXT_vertex_array_bgra : bool;
    GL_EXT_vertex_attrib_64bit : bool;
    GL_EXT_vertex_shader : bool;
    GL_EXT_vertex_weighting : bool;
    GL_EXT_win32_keyed_mutex : bool;
    GL_EXT_window_rectangles : bool;
    GL_EXT_x11_sync_object : bool;
    GL_GREMEDY_frame_terminator : bool;
    GL_GREMEDY_string_marker : bool;
    GL_HP_convolution_border_modes : bool;
    GL_HP_image_transform : bool;
    GL_HP_occlusion_test : bool;
    GL_HP_texture_lighting : bool;
    GL_IBM_cull_vertex : bool;
    GL_IBM_multimode_draw_arrays : bool;
    GL_IBM_rasterpos_clip : bool;
    GL_IBM_static_data : bool;
    GL_IBM_texture_mirrored_repeat : bool;
    GL_IBM_vertex_array_lists : bool;
    GL_INGR_blend_func_separate : bool;
    GL_INGR_color_clamp : bool;
    GL_INGR_interlace_read : bool;
    GL_INTEL_conservative_rasterization : bool;
    GL_INTEL_fragment_shader_ordering : bool;
    GL_INTEL_framebuffer_CMAA : bool;
    GL_INTEL_map_texture : bool;
    GL_INTEL_parallel_arrays : bool;
    GL_INTEL_performance_query : bool;
    GL_KHR_blend_equation_advanced : bool;
    GL_KHR_blend_equation_advanced_coherent : bool;
    GL_KHR_context_flush_control : bool;
    GL_KHR_debug : bool;
    GL_KHR_no_error : bool;
    GL_KHR_parallel_shader_compile : bool;
    GL_KHR_robust_buffer_access_behavior : bool;
    GL_KHR_robustness : bool;
    GL_KHR_texture_compression_astc_hdr : bool;
    GL_KHR_texture_compression_astc_ldr : bool;
    GL_KHR_texture_compression_astc_sliced_3d : bool;
    GL_MESAX_texture_stack : bool;
    GL_MESA_pack_invert : bool;
    GL_MESA_program_binary_formats : bool;
    GL_MESA_resize_buffers : bool;
    GL_MESA_shader_integer_functions : bool;
    GL_MESA_tile_raster_order : bool;
    GL_MESA_window_pos : bool;
    GL_MESA_ycbcr_texture : bool;
    GL_NVX_blend_equation_advanced_multi_draw_buffers : bool;
    GL_NVX_conditional_render : bool;
    GL_NVX_gpu_memory_info : bool;
    GL_NVX_linked_gpu_multicast : bool;
    GL_NV_alpha_to_coverage_dither_control : bool;
    GL_NV_bindless_multi_draw_indirect : bool;
    GL_NV_bindless_multi_draw_indirect_count : bool;
    GL_NV_bindless_texture : bool;
    GL_NV_blend_equation_advanced : bool;
    GL_NV_blend_equation_advanced_coherent : bool;
    GL_NV_blend_minmax_factor : bool;
    GL_NV_blend_square : bool;
    GL_NV_clip_space_w_scaling : bool;
    GL_NV_command_list : bool;
    GL_NV_compute_program5 : bool;
    GL_NV_conditional_render : bool;
    GL_NV_conservative_raster : bool;
    GL_NV_conservative_raster_dilate : bool;
    GL_NV_conservative_raster_pre_snap : bool;
    GL_NV_conservative_raster_pre_snap_triangles : bool;
    GL_NV_conservative_raster_underestimation : bool;
    GL_NV_copy_depth_to_color : bool;
    GL_NV_copy_image : bool;
    GL_NV_deep_texture3D : bool;
    GL_NV_depth_buffer_float : bool;
    GL_NV_depth_clamp : bool;
    GL_NV_draw_texture : bool;
    GL_NV_draw_vulkan_image : bool;
    GL_NV_evaluators : bool;
    GL_NV_explicit_multisample : bool;
    GL_NV_fence : bool;
    GL_NV_fill_rectangle : bool;
    GL_NV_float_buffer : bool;
    GL_NV_fog_distance : bool;
    GL_NV_fragment_coverage_to_color : bool;
    GL_NV_fragment_program : bool;
    GL_NV_fragment_program2 : bool;
    GL_NV_fragment_program4 : bool;
    GL_NV_fragment_program_option : bool;
    GL_NV_fragment_shader_interlock : bool;
    GL_NV_framebuffer_mixed_samples : bool;
    GL_NV_framebuffer_multisample_coverage : bool;
    GL_NV_geometry_program4 : bool;
    GL_NV_geometry_shader4 : bool;
    GL_NV_geometry_shader_passthrough : bool;
    GL_NV_gpu_multicast : bool;
    GL_NV_gpu_program4 : bool;
    GL_NV_gpu_program5 : bool;
    GL_NV_gpu_program5_mem_extended : bool;
    GL_NV_gpu_shader5 : bool;
    GL_NV_half_float : bool;
    GL_NV_internalformat_sample_query : bool;
    GL_NV_light_max_exponent : bool;
    GL_NV_multisample_coverage : bool;
    GL_NV_multisample_filter_hint : bool;
    GL_NV_occlusion_query : bool;
    GL_NV_packed_depth_stencil : bool;
    GL_NV_parameter_buffer_object : bool;
    GL_NV_parameter_buffer_object2 : bool;
    GL_NV_path_rendering : bool;
    GL_NV_path_rendering_shared_edge : bool;
    GL_NV_pixel_data_range : bool;
    GL_NV_point_sprite : bool;
    GL_NV_present_video : bool;
    GL_NV_primitive_restart : bool;
    GL_NV_query_resource : bool;
    GL_NV_query_resource_tag : bool;
    GL_NV_register_combiners : bool;
    GL_NV_register_combiners2 : bool;
    GL_NV_robustness_video_memory_purge : bool;
    GL_NV_sample_locations : bool;
    GL_NV_sample_mask_override_coverage : bool;
    GL_NV_shader_atomic_counters : bool;
    GL_NV_shader_atomic_float : bool;
    GL_NV_shader_atomic_float64 : bool;
    GL_NV_shader_atomic_fp16_vector : bool;
    GL_NV_shader_atomic_int64 : bool;
    GL_NV_shader_buffer_load : bool;
    GL_NV_shader_buffer_store : bool;
    GL_NV_shader_storage_buffer_object : bool;
    GL_NV_shader_thread_group : bool;
    GL_NV_shader_thread_shuffle : bool;
    GL_NV_stereo_view_rendering : bool;
    GL_NV_tessellation_program5 : bool;
    GL_NV_texgen_emboss : bool;
    GL_NV_texgen_reflection : bool;
    GL_NV_texture_barrier : bool;
    GL_NV_texture_compression_vtc : bool;
    GL_NV_texture_env_combine4 : bool;
    GL_NV_texture_expand_normal : bool;
    GL_NV_texture_multisample : bool;
    GL_NV_texture_rectangle : bool;
    GL_NV_texture_rectangle_compressed : bool;
    GL_NV_texture_shader : bool;
    GL_NV_texture_shader2 : bool;
    GL_NV_texture_shader3 : bool;
    GL_NV_transform_feedback : bool;
    GL_NV_transform_feedback2 : bool;
    GL_NV_uniform_buffer_unified_memory : bool;
    GL_NV_vdpau_interop : bool;
    GL_NV_vertex_array_range : bool;
    GL_NV_vertex_array_range2 : bool;
    GL_NV_vertex_attrib_integer_64bit : bool;
    GL_NV_vertex_buffer_unified_memory : bool;
    GL_NV_vertex_program : bool;
    GL_NV_vertex_program1_1 : bool;
    GL_NV_vertex_program2 : bool;
    GL_NV_vertex_program2_option : bool;
    GL_NV_vertex_program3 : bool;
    GL_NV_vertex_program4 : bool;
    GL_NV_video_capture : bool;
    GL_NV_viewport_array2 : bool;
    GL_NV_viewport_swizzle : bool;
    GL_OES_byte_coordinates : bool;
    GL_OES_compressed_paletted_texture : bool;
    GL_OES_fixed_point : bool;
    GL_OES_query_matrix : bool;
    GL_OES_read_format : bool;
    GL_OES_single_precision : bool;
    GL_OML_interlace : bool;
    GL_OML_resample : bool;
    GL_OML_subsample : bool;
    GL_OVR_multiview : bool;
    GL_OVR_multiview2 : bool;
    GL_PGI_misc_hints : bool;
    GL_PGI_vertex_hints : bool;
    GL_REND_screen_coordinates : bool;
    GL_S3_s3tc : bool;
    GL_SGIS_detail_texture : bool;
    GL_SGIS_fog_function : bool;
    GL_SGIS_generate_mipmap : bool;
    GL_SGIS_multisample : bool;
    GL_SGIS_pixel_texture : bool;
    GL_SGIS_point_line_texgen : bool;
    GL_SGIS_point_parameters : bool;
    GL_SGIS_sharpen_texture : bool;
    GL_SGIS_texture4D : bool;
    GL_SGIS_texture_border_clamp : bool;
    GL_SGIS_texture_color_mask : bool;
    GL_SGIS_texture_edge_clamp : bool;
    GL_SGIS_texture_filter4 : bool;
    GL_SGIS_texture_lod : bool;
    GL_SGIS_texture_select : bool;
    GL_SGIX_async : bool;
    GL_SGIX_async_histogram : bool;
    GL_SGIX_async_pixel : bool;
    GL_SGIX_blend_alpha_minmax : bool;
    GL_SGIX_calligraphic_fragment : bool;
    GL_SGIX_clipmap : bool;
    GL_SGIX_convolution_accuracy : bool;
    GL_SGIX_depth_pass_instrument : bool;
    GL_SGIX_depth_texture : bool;
    GL_SGIX_flush_raster : bool;
    GL_SGIX_fog_offset : bool;
    GL_SGIX_fragment_lighting : bool;
    GL_SGIX_framezoom : bool;
    GL_SGIX_igloo_interface : bool;
    GL_SGIX_instruments : bool;
    GL_SGIX_interlace : bool;
    GL_SGIX_ir_instrument1 : bool;
    GL_SGIX_list_priority : bool;
    GL_SGIX_pixel_texture : bool;
    GL_SGIX_pixel_tiles : bool;
    GL_SGIX_polynomial_ffd : bool;
    GL_SGIX_reference_plane : bool;
    GL_SGIX_resample : bool;
    GL_SGIX_scalebias_hint : bool;
    GL_SGIX_shadow : bool;
    GL_SGIX_shadow_ambient : bool;
    GL_SGIX_sprite : bool;
    GL_SGIX_subsample : bool;
    GL_SGIX_tag_sample_buffer : bool;
    GL_SGIX_texture_add_env : bool;
    GL_SGIX_texture_coordinate_clamp : bool;
    GL_SGIX_texture_lod_bias : bool;
    GL_SGIX_texture_multi_buffer : bool;
    GL_SGIX_texture_scale_bias : bool;
    GL_SGIX_vertex_preclip : bool;
    GL_SGIX_ycrcb : bool;
    GL_SGIX_ycrcb_subsample : bool;
    GL_SGIX_ycrcba : bool;
    GL_SGI_color_matrix : bool;
    GL_SGI_color_table : bool;
    GL_SGI_texture_color_table : bool;
    GL_SUNX_constant_data : bool;
    GL_SUN_convolution_border_modes : bool;
    GL_SUN_global_alpha : bool;
    GL_SUN_mesh_array : bool;
    GL_SUN_slice_accum : bool;
    GL_SUN_triangle_list : bool;
    GL_SUN_vertex : bool;
    GL_WIN_phong_shading : bool;
    GL_WIN_specular_fog : bool;

    // Extension enums:

    // GL_3DFX_multisample
    GL_MULTISAMPLE_3DFX :: 0x86B2;
    GL_SAMPLE_BUFFERS_3DFX :: 0x86B3;
    GL_SAMPLES_3DFX :: 0x86B4;
    GL_MULTISAMPLE_BIT_3DFX :: 0x20000000;

    // GL_3DFX_tbuffer

    // GL_3DFX_texture_compression_FXT1
    GL_COMPRESSED_RGB_FXT1_3DFX :: 0x86B0;
    GL_COMPRESSED_RGBA_FXT1_3DFX :: 0x86B1;

    // GL_AMD_blend_minmax_factor
    GL_FACTOR_MIN_AMD :: 0x901C;
    GL_FACTOR_MAX_AMD :: 0x901D;

    // GL_AMD_conservative_depth

    // GL_AMD_debug_output
    GL_MAX_DEBUG_MESSAGE_LENGTH_AMD :: 0x9143;
    GL_MAX_DEBUG_LOGGED_MESSAGES_AMD :: 0x9144;
    GL_DEBUG_LOGGED_MESSAGES_AMD :: 0x9145;
    GL_DEBUG_SEVERITY_HIGH_AMD :: 0x9146;
    GL_DEBUG_SEVERITY_MEDIUM_AMD :: 0x9147;
    GL_DEBUG_SEVERITY_LOW_AMD :: 0x9148;
    GL_DEBUG_CATEGORY_API_ERROR_AMD :: 0x9149;
    GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD :: 0x914A;
    GL_DEBUG_CATEGORY_DEPRECATION_AMD :: 0x914B;
    GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD :: 0x914C;
    GL_DEBUG_CATEGORY_PERFORMANCE_AMD :: 0x914D;
    GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD :: 0x914E;
    GL_DEBUG_CATEGORY_APPLICATION_AMD :: 0x914F;
    GL_DEBUG_CATEGORY_OTHER_AMD :: 0x9150;

    // GL_AMD_depth_clamp_separate
    GL_DEPTH_CLAMP_NEAR_AMD :: 0x901E;
    GL_DEPTH_CLAMP_FAR_AMD :: 0x901F;

    // GL_AMD_draw_buffers_blend

    // GL_AMD_framebuffer_sample_positions
    GL_SUBSAMPLE_DISTANCE_AMD :: 0x883F;
    GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD :: 0x91AE;
    GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD :: 0x91AF;
    GL_ALL_PIXELS_AMD :: 0xFFFFFFFF;

    // GL_AMD_gcn_shader

    // GL_AMD_gpu_shader_half_float
    GL_FLOAT16_NV :: 0x8FF8;
    GL_FLOAT16_VEC2_NV :: 0x8FF9;
    GL_FLOAT16_VEC3_NV :: 0x8FFA;
    GL_FLOAT16_VEC4_NV :: 0x8FFB;
    GL_FLOAT16_MAT2_AMD :: 0x91C5;
    GL_FLOAT16_MAT3_AMD :: 0x91C6;
    GL_FLOAT16_MAT4_AMD :: 0x91C7;
    GL_FLOAT16_MAT2x3_AMD :: 0x91C8;
    GL_FLOAT16_MAT2x4_AMD :: 0x91C9;
    GL_FLOAT16_MAT3x2_AMD :: 0x91CA;
    GL_FLOAT16_MAT3x4_AMD :: 0x91CB;
    GL_FLOAT16_MAT4x2_AMD :: 0x91CC;
    GL_FLOAT16_MAT4x3_AMD :: 0x91CD;

    // GL_AMD_gpu_shader_int16

    // GL_AMD_gpu_shader_int64
    GL_INT64_NV :: 0x140E;
    GL_UNSIGNED_INT64_NV :: 0x140F;
    GL_INT8_NV :: 0x8FE0;
    GL_INT8_VEC2_NV :: 0x8FE1;
    GL_INT8_VEC3_NV :: 0x8FE2;
    GL_INT8_VEC4_NV :: 0x8FE3;
    GL_INT16_NV :: 0x8FE4;
    GL_INT16_VEC2_NV :: 0x8FE5;
    GL_INT16_VEC3_NV :: 0x8FE6;
    GL_INT16_VEC4_NV :: 0x8FE7;
    GL_INT64_VEC2_NV :: 0x8FE9;
    GL_INT64_VEC3_NV :: 0x8FEA;
    GL_INT64_VEC4_NV :: 0x8FEB;
    GL_UNSIGNED_INT8_NV :: 0x8FEC;
    GL_UNSIGNED_INT8_VEC2_NV :: 0x8FED;
    GL_UNSIGNED_INT8_VEC3_NV :: 0x8FEE;
    GL_UNSIGNED_INT8_VEC4_NV :: 0x8FEF;
    GL_UNSIGNED_INT16_NV :: 0x8FF0;
    GL_UNSIGNED_INT16_VEC2_NV :: 0x8FF1;
    GL_UNSIGNED_INT16_VEC3_NV :: 0x8FF2;
    GL_UNSIGNED_INT16_VEC4_NV :: 0x8FF3;
    GL_UNSIGNED_INT64_VEC2_NV :: 0x8FF5;
    GL_UNSIGNED_INT64_VEC3_NV :: 0x8FF6;
    GL_UNSIGNED_INT64_VEC4_NV :: 0x8FF7;
    // GL_FLOAT16_NV :: 0x8FF8;
    // GL_FLOAT16_VEC2_NV :: 0x8FF9;
    // GL_FLOAT16_VEC3_NV :: 0x8FFA;
    // GL_FLOAT16_VEC4_NV :: 0x8FFB;

    // GL_AMD_interleaved_elements
    GL_VERTEX_ELEMENT_SWIZZLE_AMD :: 0x91A4;
    GL_VERTEX_ID_SWIZZLE_AMD :: 0x91A5;
    // GL_RED :: 0x1903;
    // GL_GREEN :: 0x1904;
    // GL_BLUE :: 0x1905;
    // GL_ALPHA :: 0x1906;
    // GL_RG8UI :: 0x8238;
    // GL_RG16UI :: 0x823A;
    // GL_RGBA8UI :: 0x8D7C;

    // GL_AMD_multi_draw_indirect

    // GL_AMD_name_gen_delete
    GL_DATA_BUFFER_AMD :: 0x9151;
    GL_PERFORMANCE_MONITOR_AMD :: 0x9152;
    GL_QUERY_OBJECT_AMD :: 0x9153;
    GL_VERTEX_ARRAY_OBJECT_AMD :: 0x9154;
    GL_SAMPLER_OBJECT_AMD :: 0x9155;

    // GL_AMD_occlusion_query_event
    GL_OCCLUSION_QUERY_EVENT_MASK_AMD :: 0x874F;
    GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD :: 0x00000001;
    GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD :: 0x00000002;
    GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD :: 0x00000004;
    GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD :: 0x00000008;
    GL_QUERY_ALL_EVENT_BITS_AMD :: 0xFFFFFFFF;

    // GL_AMD_performance_monitor
    GL_COUNTER_TYPE_AMD :: 0x8BC0;
    GL_COUNTER_RANGE_AMD :: 0x8BC1;
    GL_UNSIGNED_INT64_AMD :: 0x8BC2;
    GL_PERCENTAGE_AMD :: 0x8BC3;
    GL_PERFMON_RESULT_AVAILABLE_AMD :: 0x8BC4;
    GL_PERFMON_RESULT_SIZE_AMD :: 0x8BC5;
    GL_PERFMON_RESULT_AMD :: 0x8BC6;

    // GL_AMD_pinned_memory
    GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD :: 0x9160;

    // GL_AMD_query_buffer_object
    GL_QUERY_BUFFER_AMD :: 0x9192;
    GL_QUERY_BUFFER_BINDING_AMD :: 0x9193;
    GL_QUERY_RESULT_NO_WAIT_AMD :: 0x9194;

    // GL_AMD_sample_positions
    // GL_SUBSAMPLE_DISTANCE_AMD :: 0x883F;

    // GL_AMD_seamless_cubemap_per_texture
    // GL_TEXTURE_CUBE_MAP_SEAMLESS :: 0x884F;

    // GL_AMD_shader_atomic_counter_ops

    // GL_AMD_shader_ballot

    // GL_AMD_shader_explicit_vertex_parameter

    // GL_AMD_shader_gpu_shader_half_float_fetch

    // GL_AMD_shader_image_load_store_lod

    // GL_AMD_shader_stencil_export

    // GL_AMD_shader_trinary_minmax

    // GL_AMD_sparse_texture
    GL_VIRTUAL_PAGE_SIZE_X_AMD :: 0x9195;
    GL_VIRTUAL_PAGE_SIZE_Y_AMD :: 0x9196;
    GL_VIRTUAL_PAGE_SIZE_Z_AMD :: 0x9197;
    GL_MAX_SPARSE_TEXTURE_SIZE_AMD :: 0x9198;
    GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD :: 0x9199;
    GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS :: 0x919A;
    GL_MIN_SPARSE_LEVEL_AMD :: 0x919B;
    GL_MIN_LOD_WARNING_AMD :: 0x919C;
    GL_TEXTURE_STORAGE_SPARSE_BIT_AMD :: 0x00000001;

    // GL_AMD_stencil_operation_extended
    GL_SET_AMD :: 0x874A;
    GL_REPLACE_VALUE_AMD :: 0x874B;
    GL_STENCIL_OP_VALUE_AMD :: 0x874C;
    GL_STENCIL_BACK_OP_VALUE_AMD :: 0x874D;

    // GL_AMD_texture_gather_bias_lod

    // GL_AMD_texture_texture4

    // GL_AMD_transform_feedback3_lines_triangles

    // GL_AMD_transform_feedback4
    GL_STREAM_RASTERIZATION_AMD :: 0x91A0;

    // GL_AMD_vertex_shader_layer

    // GL_AMD_vertex_shader_tessellator
    GL_SAMPLER_BUFFER_AMD :: 0x9001;
    GL_INT_SAMPLER_BUFFER_AMD :: 0x9002;
    GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD :: 0x9003;
    GL_TESSELLATION_MODE_AMD :: 0x9004;
    GL_TESSELLATION_FACTOR_AMD :: 0x9005;
    GL_DISCRETE_AMD :: 0x9006;
    GL_CONTINUOUS_AMD :: 0x9007;

    // GL_AMD_vertex_shader_viewport_index

    // GL_APPLE_aux_depth_stencil
    GL_AUX_DEPTH_STENCIL_APPLE :: 0x8A14;

    // GL_APPLE_client_storage
    GL_UNPACK_CLIENT_STORAGE_APPLE :: 0x85B2;

    // GL_APPLE_element_array
    GL_ELEMENT_ARRAY_APPLE :: 0x8A0C;
    GL_ELEMENT_ARRAY_TYPE_APPLE :: 0x8A0D;
    GL_ELEMENT_ARRAY_POINTER_APPLE :: 0x8A0E;

    // GL_APPLE_fence
    GL_DRAW_PIXELS_APPLE :: 0x8A0A;
    GL_FENCE_APPLE :: 0x8A0B;

    // GL_APPLE_float_pixels
    GL_HALF_APPLE :: 0x140B;
    GL_RGBA_FLOAT32_APPLE :: 0x8814;
    GL_RGB_FLOAT32_APPLE :: 0x8815;
    GL_ALPHA_FLOAT32_APPLE :: 0x8816;
    GL_INTENSITY_FLOAT32_APPLE :: 0x8817;
    GL_LUMINANCE_FLOAT32_APPLE :: 0x8818;
    GL_LUMINANCE_ALPHA_FLOAT32_APPLE :: 0x8819;
    GL_RGBA_FLOAT16_APPLE :: 0x881A;
    GL_RGB_FLOAT16_APPLE :: 0x881B;
    GL_ALPHA_FLOAT16_APPLE :: 0x881C;
    GL_INTENSITY_FLOAT16_APPLE :: 0x881D;
    GL_LUMINANCE_FLOAT16_APPLE :: 0x881E;
    GL_LUMINANCE_ALPHA_FLOAT16_APPLE :: 0x881F;
    GL_COLOR_FLOAT_APPLE :: 0x8A0F;

    // GL_APPLE_flush_buffer_range
    GL_BUFFER_SERIALIZED_MODIFY_APPLE :: 0x8A12;
    GL_BUFFER_FLUSHING_UNMAP_APPLE :: 0x8A13;

    // GL_APPLE_object_purgeable
    GL_BUFFER_OBJECT_APPLE :: 0x85B3;
    GL_RELEASED_APPLE :: 0x8A19;
    GL_VOLATILE_APPLE :: 0x8A1A;
    GL_RETAINED_APPLE :: 0x8A1B;
    GL_UNDEFINED_APPLE :: 0x8A1C;
    GL_PURGEABLE_APPLE :: 0x8A1D;

    // GL_APPLE_rgb_422
    GL_RGB_422_APPLE :: 0x8A1F;
    GL_UNSIGNED_SHORT_8_8_APPLE :: 0x85BA;
    GL_UNSIGNED_SHORT_8_8_REV_APPLE :: 0x85BB;
    GL_RGB_RAW_422_APPLE :: 0x8A51;

    // GL_APPLE_row_bytes
    GL_PACK_ROW_BYTES_APPLE :: 0x8A15;
    GL_UNPACK_ROW_BYTES_APPLE :: 0x8A16;

    // GL_APPLE_specular_vector
    GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE :: 0x85B0;

    // GL_APPLE_texture_range
    GL_TEXTURE_RANGE_LENGTH_APPLE :: 0x85B7;
    GL_TEXTURE_RANGE_POINTER_APPLE :: 0x85B8;
    GL_TEXTURE_STORAGE_HINT_APPLE :: 0x85BC;
    GL_STORAGE_PRIVATE_APPLE :: 0x85BD;
    GL_STORAGE_CACHED_APPLE :: 0x85BE;
    GL_STORAGE_SHARED_APPLE :: 0x85BF;

    // GL_APPLE_transform_hint
    GL_TRANSFORM_HINT_APPLE :: 0x85B1;

    // GL_APPLE_vertex_array_object
    GL_VERTEX_ARRAY_BINDING_APPLE :: 0x85B5;

    // GL_APPLE_vertex_array_range
    GL_VERTEX_ARRAY_RANGE_APPLE :: 0x851D;
    GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE :: 0x851E;
    GL_VERTEX_ARRAY_STORAGE_HINT_APPLE :: 0x851F;
    GL_VERTEX_ARRAY_RANGE_POINTER_APPLE :: 0x8521;
    GL_STORAGE_CLIENT_APPLE :: 0x85B4;
    // GL_STORAGE_CACHED_APPLE :: 0x85BE;
    // GL_STORAGE_SHARED_APPLE :: 0x85BF;

    // GL_APPLE_vertex_program_evaluators
    GL_VERTEX_ATTRIB_MAP1_APPLE :: 0x8A00;
    GL_VERTEX_ATTRIB_MAP2_APPLE :: 0x8A01;
    GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE :: 0x8A02;
    GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE :: 0x8A03;
    GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE :: 0x8A04;
    GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE :: 0x8A05;
    GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE :: 0x8A06;
    GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE :: 0x8A07;
    GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE :: 0x8A08;
    GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE :: 0x8A09;

    // GL_APPLE_ycbcr_422
    GL_YCBCR_422_APPLE :: 0x85B9;
    // GL_UNSIGNED_SHORT_8_8_APPLE :: 0x85BA;
    // GL_UNSIGNED_SHORT_8_8_REV_APPLE :: 0x85BB;

    // GL_ARB_ES2_compatibility
    // GL_FIXED :: 0x140C;
    // GL_IMPLEMENTATION_COLOR_READ_TYPE :: 0x8B9A;
    // GL_IMPLEMENTATION_COLOR_READ_FORMAT :: 0x8B9B;
    // GL_LOW_FLOAT :: 0x8DF0;
    // GL_MEDIUM_FLOAT :: 0x8DF1;
    // GL_HIGH_FLOAT :: 0x8DF2;
    // GL_LOW_INT :: 0x8DF3;
    // GL_MEDIUM_INT :: 0x8DF4;
    // GL_HIGH_INT :: 0x8DF5;
    // GL_SHADER_COMPILER :: 0x8DFA;
    // GL_SHADER_BINARY_FORMATS :: 0x8DF8;
    // GL_NUM_SHADER_BINARY_FORMATS :: 0x8DF9;
    // GL_MAX_VERTEX_UNIFORM_VECTORS :: 0x8DFB;
    // GL_MAX_VARYING_VECTORS :: 0x8DFC;
    // GL_MAX_FRAGMENT_UNIFORM_VECTORS :: 0x8DFD;
    // GL_RGB565 :: 0x8D62;

    // GL_ARB_ES3_1_compatibility
    // GL_BACK :: 0x0405;

    // GL_ARB_ES3_2_compatibility
    GL_PRIMITIVE_BOUNDING_BOX_ARB :: 0x92BE;
    GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB :: 0x9381;
    GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB :: 0x9382;

    // GL_ARB_ES3_compatibility
    // GL_COMPRESSED_RGB8_ETC2 :: 0x9274;
    // GL_COMPRESSED_SRGB8_ETC2 :: 0x9275;
    // GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 :: 0x9276;
    // GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 :: 0x9277;
    // GL_COMPRESSED_RGBA8_ETC2_EAC :: 0x9278;
    // GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC :: 0x9279;
    // GL_COMPRESSED_R11_EAC :: 0x9270;
    // GL_COMPRESSED_SIGNED_R11_EAC :: 0x9271;
    // GL_COMPRESSED_RG11_EAC :: 0x9272;
    // GL_COMPRESSED_SIGNED_RG11_EAC :: 0x9273;
    // GL_PRIMITIVE_RESTART_FIXED_INDEX :: 0x8D69;
    // GL_ANY_SAMPLES_PASSED_CONSERVATIVE :: 0x8D6A;
    // GL_MAX_ELEMENT_INDEX :: 0x8D6B;

    // GL_ARB_arrays_of_arrays

    // GL_ARB_base_instance

    // GL_ARB_bindless_texture
    GL_UNSIGNED_INT64_ARB :: 0x140F;

    // GL_ARB_blend_func_extended
    // GL_SRC1_COLOR :: 0x88F9;
    // GL_SRC1_ALPHA :: 0x8589;
    // GL_ONE_MINUS_SRC1_COLOR :: 0x88FA;
    // GL_ONE_MINUS_SRC1_ALPHA :: 0x88FB;
    // GL_MAX_DUAL_SOURCE_DRAW_BUFFERS :: 0x88FC;

    // GL_ARB_buffer_storage
    // GL_MAP_READ_BIT :: 0x0001;
    // GL_MAP_WRITE_BIT :: 0x0002;
    // GL_MAP_PERSISTENT_BIT :: 0x0040;
    // GL_MAP_COHERENT_BIT :: 0x0080;
    // GL_DYNAMIC_STORAGE_BIT :: 0x0100;
    // GL_CLIENT_STORAGE_BIT :: 0x0200;
    // GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT :: 0x00004000;
    // GL_BUFFER_IMMUTABLE_STORAGE :: 0x821F;
    // GL_BUFFER_STORAGE_FLAGS :: 0x8220;

    // GL_ARB_cl_event
    GL_SYNC_CL_EVENT_ARB :: 0x8240;
    GL_SYNC_CL_EVENT_COMPLETE_ARB :: 0x8241;

    // GL_ARB_clear_buffer_object

    // GL_ARB_clear_texture
    // GL_CLEAR_TEXTURE :: 0x9365;

    // GL_ARB_clip_control
    // GL_LOWER_LEFT :: 0x8CA1;
    // GL_UPPER_LEFT :: 0x8CA2;
    // GL_NEGATIVE_ONE_TO_ONE :: 0x935E;
    // GL_ZERO_TO_ONE :: 0x935F;
    // GL_CLIP_ORIGIN :: 0x935C;
    // GL_CLIP_DEPTH_MODE :: 0x935D;

    // GL_ARB_color_buffer_float
    GL_RGBA_FLOAT_MODE_ARB :: 0x8820;
    GL_CLAMP_VERTEX_COLOR_ARB :: 0x891A;
    GL_CLAMP_FRAGMENT_COLOR_ARB :: 0x891B;
    GL_CLAMP_READ_COLOR_ARB :: 0x891C;
    GL_FIXED_ONLY_ARB :: 0x891D;

    // GL_ARB_compatibility

    // GL_ARB_compressed_texture_pixel_storage
    // GL_UNPACK_COMPRESSED_BLOCK_WIDTH :: 0x9127;
    // GL_UNPACK_COMPRESSED_BLOCK_HEIGHT :: 0x9128;
    // GL_UNPACK_COMPRESSED_BLOCK_DEPTH :: 0x9129;
    // GL_UNPACK_COMPRESSED_BLOCK_SIZE :: 0x912A;
    // GL_PACK_COMPRESSED_BLOCK_WIDTH :: 0x912B;
    // GL_PACK_COMPRESSED_BLOCK_HEIGHT :: 0x912C;
    // GL_PACK_COMPRESSED_BLOCK_DEPTH :: 0x912D;
    // GL_PACK_COMPRESSED_BLOCK_SIZE :: 0x912E;

    // GL_ARB_compute_shader
    // GL_COMPUTE_SHADER :: 0x91B9;
    // GL_MAX_COMPUTE_UNIFORM_BLOCKS :: 0x91BB;
    // GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS :: 0x91BC;
    // GL_MAX_COMPUTE_IMAGE_UNIFORMS :: 0x91BD;
    // GL_MAX_COMPUTE_SHARED_MEMORY_SIZE :: 0x8262;
    // GL_MAX_COMPUTE_UNIFORM_COMPONENTS :: 0x8263;
    // GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS :: 0x8264;
    // GL_MAX_COMPUTE_ATOMIC_COUNTERS :: 0x8265;
    // GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS :: 0x8266;
    // GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS :: 0x90EB;
    // GL_MAX_COMPUTE_WORK_GROUP_COUNT :: 0x91BE;
    // GL_MAX_COMPUTE_WORK_GROUP_SIZE :: 0x91BF;
    // GL_COMPUTE_WORK_GROUP_SIZE :: 0x8267;
    // GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER :: 0x90EC;
    // GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER :: 0x90ED;
    // GL_DISPATCH_INDIRECT_BUFFER :: 0x90EE;
    // GL_DISPATCH_INDIRECT_BUFFER_BINDING :: 0x90EF;
    // GL_COMPUTE_SHADER_BIT :: 0x00000020;

    // GL_ARB_compute_variable_group_size
    GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB :: 0x9344;
    GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB :: 0x90EB;
    GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB :: 0x9345;
    GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB :: 0x91BF;

    // GL_ARB_conditional_render_inverted
    // GL_QUERY_WAIT_INVERTED :: 0x8E17;
    // GL_QUERY_NO_WAIT_INVERTED :: 0x8E18;
    // GL_QUERY_BY_REGION_WAIT_INVERTED :: 0x8E19;
    // GL_QUERY_BY_REGION_NO_WAIT_INVERTED :: 0x8E1A;

    // GL_ARB_conservative_depth

    // GL_ARB_copy_buffer
    // GL_COPY_READ_BUFFER :: 0x8F36;
    // GL_COPY_WRITE_BUFFER :: 0x8F37;

    // GL_ARB_copy_image

    // GL_ARB_cull_distance
    // GL_MAX_CULL_DISTANCES :: 0x82F9;
    // GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES :: 0x82FA;

    // GL_ARB_debug_output
    GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB :: 0x8242;
    GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB :: 0x8243;
    GL_DEBUG_CALLBACK_FUNCTION_ARB :: 0x8244;
    GL_DEBUG_CALLBACK_USER_PARAM_ARB :: 0x8245;
    GL_DEBUG_SOURCE_API_ARB :: 0x8246;
    GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB :: 0x8247;
    GL_DEBUG_SOURCE_SHADER_COMPILER_ARB :: 0x8248;
    GL_DEBUG_SOURCE_THIRD_PARTY_ARB :: 0x8249;
    GL_DEBUG_SOURCE_APPLICATION_ARB :: 0x824A;
    GL_DEBUG_SOURCE_OTHER_ARB :: 0x824B;
    GL_DEBUG_TYPE_ERROR_ARB :: 0x824C;
    GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB :: 0x824D;
    GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB :: 0x824E;
    GL_DEBUG_TYPE_PORTABILITY_ARB :: 0x824F;
    GL_DEBUG_TYPE_PERFORMANCE_ARB :: 0x8250;
    GL_DEBUG_TYPE_OTHER_ARB :: 0x8251;
    GL_MAX_DEBUG_MESSAGE_LENGTH_ARB :: 0x9143;
    GL_MAX_DEBUG_LOGGED_MESSAGES_ARB :: 0x9144;
    GL_DEBUG_LOGGED_MESSAGES_ARB :: 0x9145;
    GL_DEBUG_SEVERITY_HIGH_ARB :: 0x9146;
    GL_DEBUG_SEVERITY_MEDIUM_ARB :: 0x9147;
    GL_DEBUG_SEVERITY_LOW_ARB :: 0x9148;

    // GL_ARB_depth_buffer_float
    // GL_DEPTH_COMPONENT32F :: 0x8CAC;
    // GL_DEPTH32F_STENCIL8 :: 0x8CAD;
    // GL_FLOAT_32_UNSIGNED_INT_24_8_REV :: 0x8DAD;

    // GL_ARB_depth_clamp
    // GL_DEPTH_CLAMP :: 0x864F;

    // GL_ARB_depth_texture
    GL_DEPTH_COMPONENT16_ARB :: 0x81A5;
    GL_DEPTH_COMPONENT24_ARB :: 0x81A6;
    GL_DEPTH_COMPONENT32_ARB :: 0x81A7;
    GL_TEXTURE_DEPTH_SIZE_ARB :: 0x884A;
    GL_DEPTH_TEXTURE_MODE_ARB :: 0x884B;

    // GL_ARB_derivative_control

    // GL_ARB_direct_state_access
    // GL_TEXTURE_TARGET :: 0x1006;
    // GL_QUERY_TARGET :: 0x82EA;
    // GL_TEXTURE_BINDING_1D :: 0x8068;
    // GL_TEXTURE_BINDING_1D_ARRAY :: 0x8C1C;
    // GL_TEXTURE_BINDING_2D :: 0x8069;
    // GL_TEXTURE_BINDING_2D_ARRAY :: 0x8C1D;
    // GL_TEXTURE_BINDING_2D_MULTISAMPLE :: 0x9104;
    // GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY :: 0x9105;
    // GL_TEXTURE_BINDING_3D :: 0x806A;
    // GL_TEXTURE_BINDING_BUFFER :: 0x8C2C;
    // GL_TEXTURE_BINDING_CUBE_MAP :: 0x8514;
    // GL_TEXTURE_BINDING_CUBE_MAP_ARRAY :: 0x900A;
    // GL_TEXTURE_BINDING_RECTANGLE :: 0x84F6;

    // GL_ARB_draw_buffers
    GL_MAX_DRAW_BUFFERS_ARB :: 0x8824;
    GL_DRAW_BUFFER0_ARB :: 0x8825;
    GL_DRAW_BUFFER1_ARB :: 0x8826;
    GL_DRAW_BUFFER2_ARB :: 0x8827;
    GL_DRAW_BUFFER3_ARB :: 0x8828;
    GL_DRAW_BUFFER4_ARB :: 0x8829;
    GL_DRAW_BUFFER5_ARB :: 0x882A;
    GL_DRAW_BUFFER6_ARB :: 0x882B;
    GL_DRAW_BUFFER7_ARB :: 0x882C;
    GL_DRAW_BUFFER8_ARB :: 0x882D;
    GL_DRAW_BUFFER9_ARB :: 0x882E;
    GL_DRAW_BUFFER10_ARB :: 0x882F;
    GL_DRAW_BUFFER11_ARB :: 0x8830;
    GL_DRAW_BUFFER12_ARB :: 0x8831;
    GL_DRAW_BUFFER13_ARB :: 0x8832;
    GL_DRAW_BUFFER14_ARB :: 0x8833;
    GL_DRAW_BUFFER15_ARB :: 0x8834;

    // GL_ARB_draw_buffers_blend

    // GL_ARB_draw_elements_base_vertex

    // GL_ARB_draw_indirect
    // GL_DRAW_INDIRECT_BUFFER :: 0x8F3F;
    // GL_DRAW_INDIRECT_BUFFER_BINDING :: 0x8F43;

    // GL_ARB_draw_instanced

    // GL_ARB_enhanced_layouts
    // GL_LOCATION_COMPONENT :: 0x934A;
    // GL_TRANSFORM_FEEDBACK_BUFFER :: 0x8C8E;
    // GL_TRANSFORM_FEEDBACK_BUFFER_INDEX :: 0x934B;
    // GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE :: 0x934C;

    // GL_ARB_explicit_attrib_location

    // GL_ARB_explicit_uniform_location
    // GL_MAX_UNIFORM_LOCATIONS :: 0x826E;

    // GL_ARB_fragment_coord_conventions

    // GL_ARB_fragment_layer_viewport

    // GL_ARB_fragment_program
    GL_FRAGMENT_PROGRAM_ARB :: 0x8804;
    GL_PROGRAM_FORMAT_ASCII_ARB :: 0x8875;
    GL_PROGRAM_LENGTH_ARB :: 0x8627;
    GL_PROGRAM_FORMAT_ARB :: 0x8876;
    GL_PROGRAM_BINDING_ARB :: 0x8677;
    GL_PROGRAM_INSTRUCTIONS_ARB :: 0x88A0;
    GL_MAX_PROGRAM_INSTRUCTIONS_ARB :: 0x88A1;
    GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB :: 0x88A2;
    GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB :: 0x88A3;
    GL_PROGRAM_TEMPORARIES_ARB :: 0x88A4;
    GL_MAX_PROGRAM_TEMPORARIES_ARB :: 0x88A5;
    GL_PROGRAM_NATIVE_TEMPORARIES_ARB :: 0x88A6;
    GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB :: 0x88A7;
    GL_PROGRAM_PARAMETERS_ARB :: 0x88A8;
    GL_MAX_PROGRAM_PARAMETERS_ARB :: 0x88A9;
    GL_PROGRAM_NATIVE_PARAMETERS_ARB :: 0x88AA;
    GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB :: 0x88AB;
    GL_PROGRAM_ATTRIBS_ARB :: 0x88AC;
    GL_MAX_PROGRAM_ATTRIBS_ARB :: 0x88AD;
    GL_PROGRAM_NATIVE_ATTRIBS_ARB :: 0x88AE;
    GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB :: 0x88AF;
    GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB :: 0x88B4;
    GL_MAX_PROGRAM_ENV_PARAMETERS_ARB :: 0x88B5;
    GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB :: 0x88B6;
    GL_PROGRAM_ALU_INSTRUCTIONS_ARB :: 0x8805;
    GL_PROGRAM_TEX_INSTRUCTIONS_ARB :: 0x8806;
    GL_PROGRAM_TEX_INDIRECTIONS_ARB :: 0x8807;
    GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB :: 0x8808;
    GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB :: 0x8809;
    GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB :: 0x880A;
    GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB :: 0x880B;
    GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB :: 0x880C;
    GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB :: 0x880D;
    GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB :: 0x880E;
    GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB :: 0x880F;
    GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB :: 0x8810;
    GL_PROGRAM_STRING_ARB :: 0x8628;
    GL_PROGRAM_ERROR_POSITION_ARB :: 0x864B;
    GL_CURRENT_MATRIX_ARB :: 0x8641;
    GL_TRANSPOSE_CURRENT_MATRIX_ARB :: 0x88B7;
    GL_CURRENT_MATRIX_STACK_DEPTH_ARB :: 0x8640;
    GL_MAX_PROGRAM_MATRICES_ARB :: 0x862F;
    GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB :: 0x862E;
    GL_MAX_TEXTURE_COORDS_ARB :: 0x8871;
    GL_MAX_TEXTURE_IMAGE_UNITS_ARB :: 0x8872;
    GL_PROGRAM_ERROR_STRING_ARB :: 0x8874;
    GL_MATRIX0_ARB :: 0x88C0;
    GL_MATRIX1_ARB :: 0x88C1;
    GL_MATRIX2_ARB :: 0x88C2;
    GL_MATRIX3_ARB :: 0x88C3;
    GL_MATRIX4_ARB :: 0x88C4;
    GL_MATRIX5_ARB :: 0x88C5;
    GL_MATRIX6_ARB :: 0x88C6;
    GL_MATRIX7_ARB :: 0x88C7;
    GL_MATRIX8_ARB :: 0x88C8;
    GL_MATRIX9_ARB :: 0x88C9;
    GL_MATRIX10_ARB :: 0x88CA;
    GL_MATRIX11_ARB :: 0x88CB;
    GL_MATRIX12_ARB :: 0x88CC;
    GL_MATRIX13_ARB :: 0x88CD;
    GL_MATRIX14_ARB :: 0x88CE;
    GL_MATRIX15_ARB :: 0x88CF;
    GL_MATRIX16_ARB :: 0x88D0;
    GL_MATRIX17_ARB :: 0x88D1;
    GL_MATRIX18_ARB :: 0x88D2;
    GL_MATRIX19_ARB :: 0x88D3;
    GL_MATRIX20_ARB :: 0x88D4;
    GL_MATRIX21_ARB :: 0x88D5;
    GL_MATRIX22_ARB :: 0x88D6;
    GL_MATRIX23_ARB :: 0x88D7;
    GL_MATRIX24_ARB :: 0x88D8;
    GL_MATRIX25_ARB :: 0x88D9;
    GL_MATRIX26_ARB :: 0x88DA;
    GL_MATRIX27_ARB :: 0x88DB;
    GL_MATRIX28_ARB :: 0x88DC;
    GL_MATRIX29_ARB :: 0x88DD;
    GL_MATRIX30_ARB :: 0x88DE;
    GL_MATRIX31_ARB :: 0x88DF;

    // GL_ARB_fragment_program_shadow

    // GL_ARB_fragment_shader
    GL_FRAGMENT_SHADER_ARB :: 0x8B30;
    GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB :: 0x8B49;
    GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB :: 0x8B8B;

    // GL_ARB_fragment_shader_interlock

    // GL_ARB_framebuffer_no_attachments
    // GL_FRAMEBUFFER_DEFAULT_WIDTH :: 0x9310;
    // GL_FRAMEBUFFER_DEFAULT_HEIGHT :: 0x9311;
    // GL_FRAMEBUFFER_DEFAULT_LAYERS :: 0x9312;
    // GL_FRAMEBUFFER_DEFAULT_SAMPLES :: 0x9313;
    // GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS :: 0x9314;
    // GL_MAX_FRAMEBUFFER_WIDTH :: 0x9315;
    // GL_MAX_FRAMEBUFFER_HEIGHT :: 0x9316;
    // GL_MAX_FRAMEBUFFER_LAYERS :: 0x9317;
    // GL_MAX_FRAMEBUFFER_SAMPLES :: 0x9318;

    // GL_ARB_framebuffer_object
    // GL_INVALID_FRAMEBUFFER_OPERATION :: 0x0506;
    // GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING :: 0x8210;
    // GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE :: 0x8211;
    // GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE :: 0x8212;
    // GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE :: 0x8213;
    // GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE :: 0x8214;
    // GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE :: 0x8215;
    // GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE :: 0x8216;
    // GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE :: 0x8217;
    // GL_FRAMEBUFFER_DEFAULT :: 0x8218;
    // GL_FRAMEBUFFER_UNDEFINED :: 0x8219;
    // GL_DEPTH_STENCIL_ATTACHMENT :: 0x821A;
    // GL_MAX_RENDERBUFFER_SIZE :: 0x84E8;
    // GL_DEPTH_STENCIL :: 0x84F9;
    // GL_UNSIGNED_INT_24_8 :: 0x84FA;
    // GL_DEPTH24_STENCIL8 :: 0x88F0;
    // GL_TEXTURE_STENCIL_SIZE :: 0x88F1;
    // GL_UNSIGNED_NORMALIZED :: 0x8C17;
    // GL_FRAMEBUFFER_BINDING :: 0x8CA6;
    // GL_DRAW_FRAMEBUFFER_BINDING :: 0x8CA6;
    // GL_RENDERBUFFER_BINDING :: 0x8CA7;
    // GL_READ_FRAMEBUFFER :: 0x8CA8;
    // GL_DRAW_FRAMEBUFFER :: 0x8CA9;
    // GL_READ_FRAMEBUFFER_BINDING :: 0x8CAA;
    // GL_RENDERBUFFER_SAMPLES :: 0x8CAB;
    // GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE :: 0x8CD0;
    // GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME :: 0x8CD1;
    // GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL :: 0x8CD2;
    // GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE :: 0x8CD3;
    // GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER :: 0x8CD4;
    // GL_FRAMEBUFFER_COMPLETE :: 0x8CD5;
    // GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT :: 0x8CD6;
    // GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT :: 0x8CD7;
    // GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER :: 0x8CDB;
    // GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER :: 0x8CDC;
    // GL_FRAMEBUFFER_UNSUPPORTED :: 0x8CDD;
    // GL_MAX_COLOR_ATTACHMENTS :: 0x8CDF;
    // GL_COLOR_ATTACHMENT0 :: 0x8CE0;
    // GL_COLOR_ATTACHMENT1 :: 0x8CE1;
    // GL_COLOR_ATTACHMENT2 :: 0x8CE2;
    // GL_COLOR_ATTACHMENT3 :: 0x8CE3;
    // GL_COLOR_ATTACHMENT4 :: 0x8CE4;
    // GL_COLOR_ATTACHMENT5 :: 0x8CE5;
    // GL_COLOR_ATTACHMENT6 :: 0x8CE6;
    // GL_COLOR_ATTACHMENT7 :: 0x8CE7;
    // GL_COLOR_ATTACHMENT8 :: 0x8CE8;
    // GL_COLOR_ATTACHMENT9 :: 0x8CE9;
    // GL_COLOR_ATTACHMENT10 :: 0x8CEA;
    // GL_COLOR_ATTACHMENT11 :: 0x8CEB;
    // GL_COLOR_ATTACHMENT12 :: 0x8CEC;
    // GL_COLOR_ATTACHMENT13 :: 0x8CED;
    // GL_COLOR_ATTACHMENT14 :: 0x8CEE;
    // GL_COLOR_ATTACHMENT15 :: 0x8CEF;
    // GL_DEPTH_ATTACHMENT :: 0x8D00;
    // GL_STENCIL_ATTACHMENT :: 0x8D20;
    // GL_FRAMEBUFFER :: 0x8D40;
    // GL_RENDERBUFFER :: 0x8D41;
    // GL_RENDERBUFFER_WIDTH :: 0x8D42;
    // GL_RENDERBUFFER_HEIGHT :: 0x8D43;
    // GL_RENDERBUFFER_INTERNAL_FORMAT :: 0x8D44;
    // GL_STENCIL_INDEX1 :: 0x8D46;
    // GL_STENCIL_INDEX4 :: 0x8D47;
    // GL_STENCIL_INDEX8 :: 0x8D48;
    // GL_STENCIL_INDEX16 :: 0x8D49;
    // GL_RENDERBUFFER_RED_SIZE :: 0x8D50;
    // GL_RENDERBUFFER_GREEN_SIZE :: 0x8D51;
    // GL_RENDERBUFFER_BLUE_SIZE :: 0x8D52;
    // GL_RENDERBUFFER_ALPHA_SIZE :: 0x8D53;
    // GL_RENDERBUFFER_DEPTH_SIZE :: 0x8D54;
    // GL_RENDERBUFFER_STENCIL_SIZE :: 0x8D55;
    // GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE :: 0x8D56;
    // GL_MAX_SAMPLES :: 0x8D57;
    // GL_INDEX :: 0x8222;

    // GL_ARB_framebuffer_sRGB
    // GL_FRAMEBUFFER_SRGB :: 0x8DB9;

    // GL_ARB_geometry_shader4
    GL_LINES_ADJACENCY_ARB :: 0x000A;
    GL_LINE_STRIP_ADJACENCY_ARB :: 0x000B;
    GL_TRIANGLES_ADJACENCY_ARB :: 0x000C;
    GL_TRIANGLE_STRIP_ADJACENCY_ARB :: 0x000D;
    GL_PROGRAM_POINT_SIZE_ARB :: 0x8642;
    GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB :: 0x8C29;
    GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB :: 0x8DA7;
    GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB :: 0x8DA8;
    GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB :: 0x8DA9;
    GL_GEOMETRY_SHADER_ARB :: 0x8DD9;
    GL_GEOMETRY_VERTICES_OUT_ARB :: 0x8DDA;
    GL_GEOMETRY_INPUT_TYPE_ARB :: 0x8DDB;
    GL_GEOMETRY_OUTPUT_TYPE_ARB :: 0x8DDC;
    GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB :: 0x8DDD;
    GL_MAX_VERTEX_VARYING_COMPONENTS_ARB :: 0x8DDE;
    GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB :: 0x8DDF;
    GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB :: 0x8DE0;
    GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB :: 0x8DE1;
    // GL_MAX_VARYING_COMPONENTS :: 0x8B4B;
    // GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER :: 0x8CD4;

    // GL_ARB_get_program_binary
    // GL_PROGRAM_BINARY_RETRIEVABLE_HINT :: 0x8257;
    // GL_PROGRAM_BINARY_LENGTH :: 0x8741;
    // GL_NUM_PROGRAM_BINARY_FORMATS :: 0x87FE;
    // GL_PROGRAM_BINARY_FORMATS :: 0x87FF;

    // GL_ARB_get_texture_sub_image

    // GL_ARB_gl_spirv
    GL_SHADER_BINARY_FORMAT_SPIR_V_ARB :: 0x9551;
    GL_SPIR_V_BINARY_ARB :: 0x9552;

    // GL_ARB_gpu_shader5
    // GL_GEOMETRY_SHADER_INVOCATIONS :: 0x887F;
    // GL_MAX_GEOMETRY_SHADER_INVOCATIONS :: 0x8E5A;
    // GL_MIN_FRAGMENT_INTERPOLATION_OFFSET :: 0x8E5B;
    // GL_MAX_FRAGMENT_INTERPOLATION_OFFSET :: 0x8E5C;
    // GL_FRAGMENT_INTERPOLATION_OFFSET_BITS :: 0x8E5D;
    // GL_MAX_VERTEX_STREAMS :: 0x8E71;

    // GL_ARB_gpu_shader_fp64
    // GL_DOUBLE :: 0x140A;
    // GL_DOUBLE_VEC2 :: 0x8FFC;
    // GL_DOUBLE_VEC3 :: 0x8FFD;
    // GL_DOUBLE_VEC4 :: 0x8FFE;
    // GL_DOUBLE_MAT2 :: 0x8F46;
    // GL_DOUBLE_MAT3 :: 0x8F47;
    // GL_DOUBLE_MAT4 :: 0x8F48;
    // GL_DOUBLE_MAT2x3 :: 0x8F49;
    // GL_DOUBLE_MAT2x4 :: 0x8F4A;
    // GL_DOUBLE_MAT3x2 :: 0x8F4B;
    // GL_DOUBLE_MAT3x4 :: 0x8F4C;
    // GL_DOUBLE_MAT4x2 :: 0x8F4D;
    // GL_DOUBLE_MAT4x3 :: 0x8F4E;

    // GL_ARB_gpu_shader_int64
    GL_INT64_ARB :: 0x140E;
    // GL_UNSIGNED_INT64_ARB :: 0x140F;
    GL_INT64_VEC2_ARB :: 0x8FE9;
    GL_INT64_VEC3_ARB :: 0x8FEA;
    GL_INT64_VEC4_ARB :: 0x8FEB;
    GL_UNSIGNED_INT64_VEC2_ARB :: 0x8FF5;
    GL_UNSIGNED_INT64_VEC3_ARB :: 0x8FF6;
    GL_UNSIGNED_INT64_VEC4_ARB :: 0x8FF7;

    // GL_ARB_half_float_pixel
    GL_HALF_FLOAT_ARB :: 0x140B;

    // GL_ARB_half_float_vertex
    // GL_HALF_FLOAT :: 0x140B;

    // GL_ARB_imaging
    // GL_BLEND_COLOR :: 0x8005;
    // GL_BLEND_EQUATION :: 0x8009;
    // GL_CONSTANT_COLOR :: 0x8001;
    // GL_ONE_MINUS_CONSTANT_COLOR :: 0x8002;
    // GL_CONSTANT_ALPHA :: 0x8003;
    // GL_ONE_MINUS_CONSTANT_ALPHA :: 0x8004;
    // GL_FUNC_ADD :: 0x8006;
    // GL_FUNC_REVERSE_SUBTRACT :: 0x800B;
    // GL_FUNC_SUBTRACT :: 0x800A;
    // GL_MIN :: 0x8007;
    // GL_MAX :: 0x8008;
    GL_CONVOLUTION_1D :: 0x8010;
    GL_CONVOLUTION_2D :: 0x8011;
    GL_SEPARABLE_2D :: 0x8012;
    GL_CONVOLUTION_BORDER_MODE :: 0x8013;
    GL_CONVOLUTION_FILTER_SCALE :: 0x8014;
    GL_CONVOLUTION_FILTER_BIAS :: 0x8015;
    GL_REDUCE :: 0x8016;
    GL_CONVOLUTION_FORMAT :: 0x8017;
    GL_CONVOLUTION_WIDTH :: 0x8018;
    GL_CONVOLUTION_HEIGHT :: 0x8019;
    GL_MAX_CONVOLUTION_WIDTH :: 0x801A;
    GL_MAX_CONVOLUTION_HEIGHT :: 0x801B;
    GL_POST_CONVOLUTION_RED_SCALE :: 0x801C;
    GL_POST_CONVOLUTION_GREEN_SCALE :: 0x801D;
    GL_POST_CONVOLUTION_BLUE_SCALE :: 0x801E;
    GL_POST_CONVOLUTION_ALPHA_SCALE :: 0x801F;
    GL_POST_CONVOLUTION_RED_BIAS :: 0x8020;
    GL_POST_CONVOLUTION_GREEN_BIAS :: 0x8021;
    GL_POST_CONVOLUTION_BLUE_BIAS :: 0x8022;
    GL_POST_CONVOLUTION_ALPHA_BIAS :: 0x8023;
    GL_HISTOGRAM :: 0x8024;
    GL_PROXY_HISTOGRAM :: 0x8025;
    GL_HISTOGRAM_WIDTH :: 0x8026;
    GL_HISTOGRAM_FORMAT :: 0x8027;
    GL_HISTOGRAM_RED_SIZE :: 0x8028;
    GL_HISTOGRAM_GREEN_SIZE :: 0x8029;
    GL_HISTOGRAM_BLUE_SIZE :: 0x802A;
    GL_HISTOGRAM_ALPHA_SIZE :: 0x802B;
    GL_HISTOGRAM_LUMINANCE_SIZE :: 0x802C;
    GL_HISTOGRAM_SINK :: 0x802D;
    GL_MINMAX :: 0x802E;
    GL_MINMAX_FORMAT :: 0x802F;
    GL_MINMAX_SINK :: 0x8030;
    GL_TABLE_TOO_LARGE :: 0x8031;
    GL_COLOR_MATRIX :: 0x80B1;
    GL_COLOR_MATRIX_STACK_DEPTH :: 0x80B2;
    GL_MAX_COLOR_MATRIX_STACK_DEPTH :: 0x80B3;
    GL_POST_COLOR_MATRIX_RED_SCALE :: 0x80B4;
    GL_POST_COLOR_MATRIX_GREEN_SCALE :: 0x80B5;
    GL_POST_COLOR_MATRIX_BLUE_SCALE :: 0x80B6;
    GL_POST_COLOR_MATRIX_ALPHA_SCALE :: 0x80B7;
    GL_POST_COLOR_MATRIX_RED_BIAS :: 0x80B8;
    GL_POST_COLOR_MATRIX_GREEN_BIAS :: 0x80B9;
    GL_POST_COLOR_MATRIX_BLUE_BIAS :: 0x80BA;
    GL_POST_COLOR_MATRIX_ALPHA_BIAS :: 0x80BB;
    GL_COLOR_TABLE :: 0x80D0;
    GL_POST_CONVOLUTION_COLOR_TABLE :: 0x80D1;
    GL_POST_COLOR_MATRIX_COLOR_TABLE :: 0x80D2;
    GL_PROXY_COLOR_TABLE :: 0x80D3;
    GL_PROXY_POST_CONVOLUTION_COLOR_TABLE :: 0x80D4;
    GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE :: 0x80D5;
    GL_COLOR_TABLE_SCALE :: 0x80D6;
    GL_COLOR_TABLE_BIAS :: 0x80D7;
    GL_COLOR_TABLE_FORMAT :: 0x80D8;
    GL_COLOR_TABLE_WIDTH :: 0x80D9;
    GL_COLOR_TABLE_RED_SIZE :: 0x80DA;
    GL_COLOR_TABLE_GREEN_SIZE :: 0x80DB;
    GL_COLOR_TABLE_BLUE_SIZE :: 0x80DC;
    GL_COLOR_TABLE_ALPHA_SIZE :: 0x80DD;
    GL_COLOR_TABLE_LUMINANCE_SIZE :: 0x80DE;
    GL_COLOR_TABLE_INTENSITY_SIZE :: 0x80DF;
    GL_CONSTANT_BORDER :: 0x8151;
    GL_REPLICATE_BORDER :: 0x8153;
    GL_CONVOLUTION_BORDER_COLOR :: 0x8154;

    // GL_ARB_indirect_parameters
    GL_PARAMETER_BUFFER_ARB :: 0x80EE;
    GL_PARAMETER_BUFFER_BINDING_ARB :: 0x80EF;

    // GL_ARB_instanced_arrays
    GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB :: 0x88FE;

    // GL_ARB_internalformat_query
    // GL_NUM_SAMPLE_COUNTS :: 0x9380;

    // GL_ARB_internalformat_query2
    // GL_IMAGE_FORMAT_COMPATIBILITY_TYPE :: 0x90C7;
    // GL_NUM_SAMPLE_COUNTS :: 0x9380;
    // GL_RENDERBUFFER :: 0x8D41;
    // GL_SAMPLES :: 0x80A9;
    // GL_TEXTURE_1D :: 0x0DE0;
    // GL_TEXTURE_1D_ARRAY :: 0x8C18;
    // GL_TEXTURE_2D :: 0x0DE1;
    // GL_TEXTURE_2D_ARRAY :: 0x8C1A;
    // GL_TEXTURE_3D :: 0x806F;
    // GL_TEXTURE_CUBE_MAP :: 0x8513;
    // GL_TEXTURE_CUBE_MAP_ARRAY :: 0x9009;
    // GL_TEXTURE_RECTANGLE :: 0x84F5;
    // GL_TEXTURE_BUFFER :: 0x8C2A;
    // GL_TEXTURE_2D_MULTISAMPLE :: 0x9100;
    // GL_TEXTURE_2D_MULTISAMPLE_ARRAY :: 0x9102;
    // GL_TEXTURE_COMPRESSED :: 0x86A1;
    // GL_INTERNALFORMAT_SUPPORTED :: 0x826F;
    // GL_INTERNALFORMAT_PREFERRED :: 0x8270;
    // GL_INTERNALFORMAT_RED_SIZE :: 0x8271;
    // GL_INTERNALFORMAT_GREEN_SIZE :: 0x8272;
    // GL_INTERNALFORMAT_BLUE_SIZE :: 0x8273;
    // GL_INTERNALFORMAT_ALPHA_SIZE :: 0x8274;
    // GL_INTERNALFORMAT_DEPTH_SIZE :: 0x8275;
    // GL_INTERNALFORMAT_STENCIL_SIZE :: 0x8276;
    // GL_INTERNALFORMAT_SHARED_SIZE :: 0x8277;
    // GL_INTERNALFORMAT_RED_TYPE :: 0x8278;
    // GL_INTERNALFORMAT_GREEN_TYPE :: 0x8279;
    // GL_INTERNALFORMAT_BLUE_TYPE :: 0x827A;
    // GL_INTERNALFORMAT_ALPHA_TYPE :: 0x827B;
    // GL_INTERNALFORMAT_DEPTH_TYPE :: 0x827C;
    // GL_INTERNALFORMAT_STENCIL_TYPE :: 0x827D;
    // GL_MAX_WIDTH :: 0x827E;
    // GL_MAX_HEIGHT :: 0x827F;
    // GL_MAX_DEPTH :: 0x8280;
    // GL_MAX_LAYERS :: 0x8281;
    // GL_MAX_COMBINED_DIMENSIONS :: 0x8282;
    // GL_COLOR_COMPONENTS :: 0x8283;
    // GL_DEPTH_COMPONENTS :: 0x8284;
    // GL_STENCIL_COMPONENTS :: 0x8285;
    // GL_COLOR_RENDERABLE :: 0x8286;
    // GL_DEPTH_RENDERABLE :: 0x8287;
    // GL_STENCIL_RENDERABLE :: 0x8288;
    // GL_FRAMEBUFFER_RENDERABLE :: 0x8289;
    // GL_FRAMEBUFFER_RENDERABLE_LAYERED :: 0x828A;
    // GL_FRAMEBUFFER_BLEND :: 0x828B;
    // GL_READ_PIXELS :: 0x828C;
    // GL_READ_PIXELS_FORMAT :: 0x828D;
    // GL_READ_PIXELS_TYPE :: 0x828E;
    // GL_TEXTURE_IMAGE_FORMAT :: 0x828F;
    // GL_TEXTURE_IMAGE_TYPE :: 0x8290;
    // GL_GET_TEXTURE_IMAGE_FORMAT :: 0x8291;
    // GL_GET_TEXTURE_IMAGE_TYPE :: 0x8292;
    // GL_MIPMAP :: 0x8293;
    // GL_MANUAL_GENERATE_MIPMAP :: 0x8294;
    // GL_AUTO_GENERATE_MIPMAP :: 0x8295;
    // GL_COLOR_ENCODING :: 0x8296;
    // GL_SRGB_READ :: 0x8297;
    // GL_SRGB_WRITE :: 0x8298;
    GL_SRGB_DECODE_ARB :: 0x8299;
    // GL_FILTER :: 0x829A;
    // GL_VERTEX_TEXTURE :: 0x829B;
    // GL_TESS_CONTROL_TEXTURE :: 0x829C;
    // GL_TESS_EVALUATION_TEXTURE :: 0x829D;
    // GL_GEOMETRY_TEXTURE :: 0x829E;
    // GL_FRAGMENT_TEXTURE :: 0x829F;
    // GL_COMPUTE_TEXTURE :: 0x82A0;
    // GL_TEXTURE_SHADOW :: 0x82A1;
    // GL_TEXTURE_GATHER :: 0x82A2;
    // GL_TEXTURE_GATHER_SHADOW :: 0x82A3;
    // GL_SHADER_IMAGE_LOAD :: 0x82A4;
    // GL_SHADER_IMAGE_STORE :: 0x82A5;
    // GL_SHADER_IMAGE_ATOMIC :: 0x82A6;
    // GL_IMAGE_TEXEL_SIZE :: 0x82A7;
    // GL_IMAGE_COMPATIBILITY_CLASS :: 0x82A8;
    // GL_IMAGE_PIXEL_FORMAT :: 0x82A9;
    // GL_IMAGE_PIXEL_TYPE :: 0x82AA;
    // GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST :: 0x82AC;
    // GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST :: 0x82AD;
    // GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE :: 0x82AE;
    // GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE :: 0x82AF;
    // GL_TEXTURE_COMPRESSED_BLOCK_WIDTH :: 0x82B1;
    // GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT :: 0x82B2;
    // GL_TEXTURE_COMPRESSED_BLOCK_SIZE :: 0x82B3;
    // GL_CLEAR_BUFFER :: 0x82B4;
    // GL_TEXTURE_VIEW :: 0x82B5;
    // GL_VIEW_COMPATIBILITY_CLASS :: 0x82B6;
    // GL_FULL_SUPPORT :: 0x82B7;
    // GL_CAVEAT_SUPPORT :: 0x82B8;
    // GL_IMAGE_CLASS_4_X_32 :: 0x82B9;
    // GL_IMAGE_CLASS_2_X_32 :: 0x82BA;
    // GL_IMAGE_CLASS_1_X_32 :: 0x82BB;
    // GL_IMAGE_CLASS_4_X_16 :: 0x82BC;
    // GL_IMAGE_CLASS_2_X_16 :: 0x82BD;
    // GL_IMAGE_CLASS_1_X_16 :: 0x82BE;
    // GL_IMAGE_CLASS_4_X_8 :: 0x82BF;
    // GL_IMAGE_CLASS_2_X_8 :: 0x82C0;
    // GL_IMAGE_CLASS_1_X_8 :: 0x82C1;
    // GL_IMAGE_CLASS_11_11_10 :: 0x82C2;
    // GL_IMAGE_CLASS_10_10_10_2 :: 0x82C3;
    // GL_VIEW_CLASS_128_BITS :: 0x82C4;
    // GL_VIEW_CLASS_96_BITS :: 0x82C5;
    // GL_VIEW_CLASS_64_BITS :: 0x82C6;
    // GL_VIEW_CLASS_48_BITS :: 0x82C7;
    // GL_VIEW_CLASS_32_BITS :: 0x82C8;
    // GL_VIEW_CLASS_24_BITS :: 0x82C9;
    // GL_VIEW_CLASS_16_BITS :: 0x82CA;
    // GL_VIEW_CLASS_8_BITS :: 0x82CB;
    // GL_VIEW_CLASS_S3TC_DXT1_RGB :: 0x82CC;
    // GL_VIEW_CLASS_S3TC_DXT1_RGBA :: 0x82CD;
    // GL_VIEW_CLASS_S3TC_DXT3_RGBA :: 0x82CE;
    // GL_VIEW_CLASS_S3TC_DXT5_RGBA :: 0x82CF;
    // GL_VIEW_CLASS_RGTC1_RED :: 0x82D0;
    // GL_VIEW_CLASS_RGTC2_RG :: 0x82D1;
    // GL_VIEW_CLASS_BPTC_UNORM :: 0x82D2;
    // GL_VIEW_CLASS_BPTC_FLOAT :: 0x82D3;

    // GL_ARB_invalidate_subdata

    // GL_ARB_map_buffer_alignment
    // GL_MIN_MAP_BUFFER_ALIGNMENT :: 0x90BC;

    // GL_ARB_map_buffer_range
    // GL_MAP_READ_BIT :: 0x0001;
    // GL_MAP_WRITE_BIT :: 0x0002;
    // GL_MAP_INVALIDATE_RANGE_BIT :: 0x0004;
    // GL_MAP_INVALIDATE_BUFFER_BIT :: 0x0008;
    // GL_MAP_FLUSH_EXPLICIT_BIT :: 0x0010;
    // GL_MAP_UNSYNCHRONIZED_BIT :: 0x0020;

    // GL_ARB_matrix_palette
    GL_MATRIX_PALETTE_ARB :: 0x8840;
    GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB :: 0x8841;
    GL_MAX_PALETTE_MATRICES_ARB :: 0x8842;
    GL_CURRENT_PALETTE_MATRIX_ARB :: 0x8843;
    GL_MATRIX_INDEX_ARRAY_ARB :: 0x8844;
    GL_CURRENT_MATRIX_INDEX_ARB :: 0x8845;
    GL_MATRIX_INDEX_ARRAY_SIZE_ARB :: 0x8846;
    GL_MATRIX_INDEX_ARRAY_TYPE_ARB :: 0x8847;
    GL_MATRIX_INDEX_ARRAY_STRIDE_ARB :: 0x8848;
    GL_MATRIX_INDEX_ARRAY_POINTER_ARB :: 0x8849;

    // GL_ARB_multi_bind

    // GL_ARB_multi_draw_indirect

    // GL_ARB_multisample
    GL_MULTISAMPLE_ARB :: 0x809D;
    GL_SAMPLE_ALPHA_TO_COVERAGE_ARB :: 0x809E;
    GL_SAMPLE_ALPHA_TO_ONE_ARB :: 0x809F;
    GL_SAMPLE_COVERAGE_ARB :: 0x80A0;
    GL_SAMPLE_BUFFERS_ARB :: 0x80A8;
    GL_SAMPLES_ARB :: 0x80A9;
    GL_SAMPLE_COVERAGE_VALUE_ARB :: 0x80AA;
    GL_SAMPLE_COVERAGE_INVERT_ARB :: 0x80AB;
    GL_MULTISAMPLE_BIT_ARB :: 0x20000000;

    // GL_ARB_multitexture
    GL_TEXTURE0_ARB :: 0x84C0;
    GL_TEXTURE1_ARB :: 0x84C1;
    GL_TEXTURE2_ARB :: 0x84C2;
    GL_TEXTURE3_ARB :: 0x84C3;
    GL_TEXTURE4_ARB :: 0x84C4;
    GL_TEXTURE5_ARB :: 0x84C5;
    GL_TEXTURE6_ARB :: 0x84C6;
    GL_TEXTURE7_ARB :: 0x84C7;
    GL_TEXTURE8_ARB :: 0x84C8;
    GL_TEXTURE9_ARB :: 0x84C9;
    GL_TEXTURE10_ARB :: 0x84CA;
    GL_TEXTURE11_ARB :: 0x84CB;
    GL_TEXTURE12_ARB :: 0x84CC;
    GL_TEXTURE13_ARB :: 0x84CD;
    GL_TEXTURE14_ARB :: 0x84CE;
    GL_TEXTURE15_ARB :: 0x84CF;
    GL_TEXTURE16_ARB :: 0x84D0;
    GL_TEXTURE17_ARB :: 0x84D1;
    GL_TEXTURE18_ARB :: 0x84D2;
    GL_TEXTURE19_ARB :: 0x84D3;
    GL_TEXTURE20_ARB :: 0x84D4;
    GL_TEXTURE21_ARB :: 0x84D5;
    GL_TEXTURE22_ARB :: 0x84D6;
    GL_TEXTURE23_ARB :: 0x84D7;
    GL_TEXTURE24_ARB :: 0x84D8;
    GL_TEXTURE25_ARB :: 0x84D9;
    GL_TEXTURE26_ARB :: 0x84DA;
    GL_TEXTURE27_ARB :: 0x84DB;
    GL_TEXTURE28_ARB :: 0x84DC;
    GL_TEXTURE29_ARB :: 0x84DD;
    GL_TEXTURE30_ARB :: 0x84DE;
    GL_TEXTURE31_ARB :: 0x84DF;
    GL_ACTIVE_TEXTURE_ARB :: 0x84E0;
    GL_CLIENT_ACTIVE_TEXTURE_ARB :: 0x84E1;
    GL_MAX_TEXTURE_UNITS_ARB :: 0x84E2;

    // GL_ARB_occlusion_query
    GL_QUERY_COUNTER_BITS_ARB :: 0x8864;
    GL_CURRENT_QUERY_ARB :: 0x8865;
    GL_QUERY_RESULT_ARB :: 0x8866;
    GL_QUERY_RESULT_AVAILABLE_ARB :: 0x8867;
    GL_SAMPLES_PASSED_ARB :: 0x8914;

    // GL_ARB_occlusion_query2
    // GL_ANY_SAMPLES_PASSED :: 0x8C2F;

    // GL_ARB_parallel_shader_compile
    GL_MAX_SHADER_COMPILER_THREADS_ARB :: 0x91B0;
    GL_COMPLETION_STATUS_ARB :: 0x91B1;

    // GL_ARB_pipeline_statistics_query
    GL_VERTICES_SUBMITTED_ARB :: 0x82EE;
    GL_PRIMITIVES_SUBMITTED_ARB :: 0x82EF;
    GL_VERTEX_SHADER_INVOCATIONS_ARB :: 0x82F0;
    GL_TESS_CONTROL_SHADER_PATCHES_ARB :: 0x82F1;
    GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB :: 0x82F2;
    // GL_GEOMETRY_SHADER_INVOCATIONS :: 0x887F;
    GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB :: 0x82F3;
    GL_FRAGMENT_SHADER_INVOCATIONS_ARB :: 0x82F4;
    GL_COMPUTE_SHADER_INVOCATIONS_ARB :: 0x82F5;
    GL_CLIPPING_INPUT_PRIMITIVES_ARB :: 0x82F6;
    GL_CLIPPING_OUTPUT_PRIMITIVES_ARB :: 0x82F7;

    // GL_ARB_pixel_buffer_object
    GL_PIXEL_PACK_BUFFER_ARB :: 0x88EB;
    GL_PIXEL_UNPACK_BUFFER_ARB :: 0x88EC;
    GL_PIXEL_PACK_BUFFER_BINDING_ARB :: 0x88ED;
    GL_PIXEL_UNPACK_BUFFER_BINDING_ARB :: 0x88EF;

    // GL_ARB_point_parameters
    GL_POINT_SIZE_MIN_ARB :: 0x8126;
    GL_POINT_SIZE_MAX_ARB :: 0x8127;
    GL_POINT_FADE_THRESHOLD_SIZE_ARB :: 0x8128;
    GL_POINT_DISTANCE_ATTENUATION_ARB :: 0x8129;

    // GL_ARB_point_sprite
    GL_POINT_SPRITE_ARB :: 0x8861;
    GL_COORD_REPLACE_ARB :: 0x8862;

    // GL_ARB_polygon_offset_clamp
    // GL_POLYGON_OFFSET_CLAMP :: 0x8E1B;

    // GL_ARB_post_depth_coverage

    // GL_ARB_program_interface_query
    // GL_UNIFORM :: 0x92E1;
    // GL_UNIFORM_BLOCK :: 0x92E2;
    // GL_PROGRAM_INPUT :: 0x92E3;
    // GL_PROGRAM_OUTPUT :: 0x92E4;
    // GL_BUFFER_VARIABLE :: 0x92E5;
    // GL_SHADER_STORAGE_BLOCK :: 0x92E6;
    // GL_ATOMIC_COUNTER_BUFFER :: 0x92C0;
    // GL_VERTEX_SUBROUTINE :: 0x92E8;
    // GL_TESS_CONTROL_SUBROUTINE :: 0x92E9;
    // GL_TESS_EVALUATION_SUBROUTINE :: 0x92EA;
    // GL_GEOMETRY_SUBROUTINE :: 0x92EB;
    // GL_FRAGMENT_SUBROUTINE :: 0x92EC;
    // GL_COMPUTE_SUBROUTINE :: 0x92ED;
    // GL_VERTEX_SUBROUTINE_UNIFORM :: 0x92EE;
    // GL_TESS_CONTROL_SUBROUTINE_UNIFORM :: 0x92EF;
    // GL_TESS_EVALUATION_SUBROUTINE_UNIFORM :: 0x92F0;
    // GL_GEOMETRY_SUBROUTINE_UNIFORM :: 0x92F1;
    // GL_FRAGMENT_SUBROUTINE_UNIFORM :: 0x92F2;
    // GL_COMPUTE_SUBROUTINE_UNIFORM :: 0x92F3;
    // GL_TRANSFORM_FEEDBACK_VARYING :: 0x92F4;
    // GL_ACTIVE_RESOURCES :: 0x92F5;
    // GL_MAX_NAME_LENGTH :: 0x92F6;
    // GL_MAX_NUM_ACTIVE_VARIABLES :: 0x92F7;
    // GL_MAX_NUM_COMPATIBLE_SUBROUTINES :: 0x92F8;
    // GL_NAME_LENGTH :: 0x92F9;
    // GL_TYPE :: 0x92FA;
    // GL_ARRAY_SIZE :: 0x92FB;
    // GL_OFFSET :: 0x92FC;
    // GL_BLOCK_INDEX :: 0x92FD;
    // GL_ARRAY_STRIDE :: 0x92FE;
    // GL_MATRIX_STRIDE :: 0x92FF;
    // GL_IS_ROW_MAJOR :: 0x9300;
    // GL_ATOMIC_COUNTER_BUFFER_INDEX :: 0x9301;
    // GL_BUFFER_BINDING :: 0x9302;
    // GL_BUFFER_DATA_SIZE :: 0x9303;
    // GL_NUM_ACTIVE_VARIABLES :: 0x9304;
    // GL_ACTIVE_VARIABLES :: 0x9305;
    // GL_REFERENCED_BY_VERTEX_SHADER :: 0x9306;
    // GL_REFERENCED_BY_TESS_CONTROL_SHADER :: 0x9307;
    // GL_REFERENCED_BY_TESS_EVALUATION_SHADER :: 0x9308;
    // GL_REFERENCED_BY_GEOMETRY_SHADER :: 0x9309;
    // GL_REFERENCED_BY_FRAGMENT_SHADER :: 0x930A;
    // GL_REFERENCED_BY_COMPUTE_SHADER :: 0x930B;
    // GL_TOP_LEVEL_ARRAY_SIZE :: 0x930C;
    // GL_TOP_LEVEL_ARRAY_STRIDE :: 0x930D;
    // GL_LOCATION :: 0x930E;
    // GL_LOCATION_INDEX :: 0x930F;
    // GL_IS_PER_PATCH :: 0x92E7;
    // GL_NUM_COMPATIBLE_SUBROUTINES :: 0x8E4A;
    // GL_COMPATIBLE_SUBROUTINES :: 0x8E4B;

    // GL_ARB_provoking_vertex
    // GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION :: 0x8E4C;
    // GL_FIRST_VERTEX_CONVENTION :: 0x8E4D;
    // GL_LAST_VERTEX_CONVENTION :: 0x8E4E;
    // GL_PROVOKING_VERTEX :: 0x8E4F;

    // GL_ARB_query_buffer_object
    // GL_QUERY_BUFFER :: 0x9192;
    // GL_QUERY_BUFFER_BARRIER_BIT :: 0x00008000;
    // GL_QUERY_BUFFER_BINDING :: 0x9193;
    // GL_QUERY_RESULT_NO_WAIT :: 0x9194;

    // GL_ARB_robust_buffer_access_behavior

    // GL_ARB_robustness
    // GL_NO_ERROR :: 0;
    GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB :: 0x00000004;
    GL_LOSE_CONTEXT_ON_RESET_ARB :: 0x8252;
    GL_GUILTY_CONTEXT_RESET_ARB :: 0x8253;
    GL_INNOCENT_CONTEXT_RESET_ARB :: 0x8254;
    GL_UNKNOWN_CONTEXT_RESET_ARB :: 0x8255;
    GL_RESET_NOTIFICATION_STRATEGY_ARB :: 0x8256;
    GL_NO_RESET_NOTIFICATION_ARB :: 0x8261;

    // GL_ARB_robustness_isolation

    // GL_ARB_sample_locations
    GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB :: 0x933D;
    GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB :: 0x933E;
    GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB :: 0x933F;
    GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB :: 0x9340;
    GL_SAMPLE_LOCATION_ARB :: 0x8E50;
    GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB :: 0x9341;
    GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB :: 0x9342;
    GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB :: 0x9343;

    // GL_ARB_sample_shading
    GL_SAMPLE_SHADING_ARB :: 0x8C36;
    GL_MIN_SAMPLE_SHADING_VALUE_ARB :: 0x8C37;

    // GL_ARB_sampler_objects
    // GL_SAMPLER_BINDING :: 0x8919;

    // GL_ARB_seamless_cube_map
    // GL_TEXTURE_CUBE_MAP_SEAMLESS :: 0x884F;

    // GL_ARB_seamless_cubemap_per_texture
    // GL_TEXTURE_CUBE_MAP_SEAMLESS :: 0x884F;

    // GL_ARB_separate_shader_objects
    // GL_VERTEX_SHADER_BIT :: 0x00000001;
    // GL_FRAGMENT_SHADER_BIT :: 0x00000002;
    // GL_GEOMETRY_SHADER_BIT :: 0x00000004;
    // GL_TESS_CONTROL_SHADER_BIT :: 0x00000008;
    // GL_TESS_EVALUATION_SHADER_BIT :: 0x00000010;
    // GL_ALL_SHADER_BITS :: 0xFFFFFFFF;
    // GL_PROGRAM_SEPARABLE :: 0x8258;
    // GL_ACTIVE_PROGRAM :: 0x8259;
    // GL_PROGRAM_PIPELINE_BINDING :: 0x825A;

    // GL_ARB_shader_atomic_counter_ops

    // GL_ARB_shader_atomic_counters
    // GL_ATOMIC_COUNTER_BUFFER :: 0x92C0;
    // GL_ATOMIC_COUNTER_BUFFER_BINDING :: 0x92C1;
    // GL_ATOMIC_COUNTER_BUFFER_START :: 0x92C2;
    // GL_ATOMIC_COUNTER_BUFFER_SIZE :: 0x92C3;
    // GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE :: 0x92C4;
    // GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS :: 0x92C5;
    // GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES :: 0x92C6;
    // GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER :: 0x92C7;
    // GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER :: 0x92C8;
    // GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER :: 0x92C9;
    // GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER :: 0x92CA;
    // GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER :: 0x92CB;
    // GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS :: 0x92CC;
    // GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS :: 0x92CD;
    // GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS :: 0x92CE;
    // GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS :: 0x92CF;
    // GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS :: 0x92D0;
    // GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS :: 0x92D1;
    // GL_MAX_VERTEX_ATOMIC_COUNTERS :: 0x92D2;
    // GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS :: 0x92D3;
    // GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS :: 0x92D4;
    // GL_MAX_GEOMETRY_ATOMIC_COUNTERS :: 0x92D5;
    // GL_MAX_FRAGMENT_ATOMIC_COUNTERS :: 0x92D6;
    // GL_MAX_COMBINED_ATOMIC_COUNTERS :: 0x92D7;
    // GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE :: 0x92D8;
    // GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS :: 0x92DC;
    // GL_ACTIVE_ATOMIC_COUNTER_BUFFERS :: 0x92D9;
    // GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX :: 0x92DA;
    // GL_UNSIGNED_INT_ATOMIC_COUNTER :: 0x92DB;

    // GL_ARB_shader_ballot

    // GL_ARB_shader_bit_encoding

    // GL_ARB_shader_clock

    // GL_ARB_shader_draw_parameters

    // GL_ARB_shader_group_vote

    // GL_ARB_shader_image_load_store
    // GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT :: 0x00000001;
    // GL_ELEMENT_ARRAY_BARRIER_BIT :: 0x00000002;
    // GL_UNIFORM_BARRIER_BIT :: 0x00000004;
    // GL_TEXTURE_FETCH_BARRIER_BIT :: 0x00000008;
    // GL_SHADER_IMAGE_ACCESS_BARRIER_BIT :: 0x00000020;
    // GL_COMMAND_BARRIER_BIT :: 0x00000040;
    // GL_PIXEL_BUFFER_BARRIER_BIT :: 0x00000080;
    // GL_TEXTURE_UPDATE_BARRIER_BIT :: 0x00000100;
    // GL_BUFFER_UPDATE_BARRIER_BIT :: 0x00000200;
    // GL_FRAMEBUFFER_BARRIER_BIT :: 0x00000400;
    // GL_TRANSFORM_FEEDBACK_BARRIER_BIT :: 0x00000800;
    // GL_ATOMIC_COUNTER_BARRIER_BIT :: 0x00001000;
    // GL_ALL_BARRIER_BITS :: 0xFFFFFFFF;
    // GL_MAX_IMAGE_UNITS :: 0x8F38;
    // GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS :: 0x8F39;
    // GL_IMAGE_BINDING_NAME :: 0x8F3A;
    // GL_IMAGE_BINDING_LEVEL :: 0x8F3B;
    // GL_IMAGE_BINDING_LAYERED :: 0x8F3C;
    // GL_IMAGE_BINDING_LAYER :: 0x8F3D;
    // GL_IMAGE_BINDING_ACCESS :: 0x8F3E;
    // GL_IMAGE_1D :: 0x904C;
    // GL_IMAGE_2D :: 0x904D;
    // GL_IMAGE_3D :: 0x904E;
    // GL_IMAGE_2D_RECT :: 0x904F;
    // GL_IMAGE_CUBE :: 0x9050;
    // GL_IMAGE_BUFFER :: 0x9051;
    // GL_IMAGE_1D_ARRAY :: 0x9052;
    // GL_IMAGE_2D_ARRAY :: 0x9053;
    // GL_IMAGE_CUBE_MAP_ARRAY :: 0x9054;
    // GL_IMAGE_2D_MULTISAMPLE :: 0x9055;
    // GL_IMAGE_2D_MULTISAMPLE_ARRAY :: 0x9056;
    // GL_INT_IMAGE_1D :: 0x9057;
    // GL_INT_IMAGE_2D :: 0x9058;
    // GL_INT_IMAGE_3D :: 0x9059;
    // GL_INT_IMAGE_2D_RECT :: 0x905A;
    // GL_INT_IMAGE_CUBE :: 0x905B;
    // GL_INT_IMAGE_BUFFER :: 0x905C;
    // GL_INT_IMAGE_1D_ARRAY :: 0x905D;
    // GL_INT_IMAGE_2D_ARRAY :: 0x905E;
    // GL_INT_IMAGE_CUBE_MAP_ARRAY :: 0x905F;
    // GL_INT_IMAGE_2D_MULTISAMPLE :: 0x9060;
    // GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY :: 0x9061;
    // GL_UNSIGNED_INT_IMAGE_1D :: 0x9062;
    // GL_UNSIGNED_INT_IMAGE_2D :: 0x9063;
    // GL_UNSIGNED_INT_IMAGE_3D :: 0x9064;
    // GL_UNSIGNED_INT_IMAGE_2D_RECT :: 0x9065;
    // GL_UNSIGNED_INT_IMAGE_CUBE :: 0x9066;
    // GL_UNSIGNED_INT_IMAGE_BUFFER :: 0x9067;
    // GL_UNSIGNED_INT_IMAGE_1D_ARRAY :: 0x9068;
    // GL_UNSIGNED_INT_IMAGE_2D_ARRAY :: 0x9069;
    // GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY :: 0x906A;
    // GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE :: 0x906B;
    // GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY :: 0x906C;
    // GL_MAX_IMAGE_SAMPLES :: 0x906D;
    // GL_IMAGE_BINDING_FORMAT :: 0x906E;
    // GL_IMAGE_FORMAT_COMPATIBILITY_TYPE :: 0x90C7;
    // GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE :: 0x90C8;
    // GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS :: 0x90C9;
    // GL_MAX_VERTEX_IMAGE_UNIFORMS :: 0x90CA;
    // GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS :: 0x90CB;
    // GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS :: 0x90CC;
    // GL_MAX_GEOMETRY_IMAGE_UNIFORMS :: 0x90CD;
    // GL_MAX_FRAGMENT_IMAGE_UNIFORMS :: 0x90CE;
    // GL_MAX_COMBINED_IMAGE_UNIFORMS :: 0x90CF;

    // GL_ARB_shader_image_size

    // GL_ARB_shader_objects
    GL_PROGRAM_OBJECT_ARB :: 0x8B40;
    GL_SHADER_OBJECT_ARB :: 0x8B48;
    GL_OBJECT_TYPE_ARB :: 0x8B4E;
    GL_OBJECT_SUBTYPE_ARB :: 0x8B4F;
    GL_FLOAT_VEC2_ARB :: 0x8B50;
    GL_FLOAT_VEC3_ARB :: 0x8B51;
    GL_FLOAT_VEC4_ARB :: 0x8B52;
    GL_INT_VEC2_ARB :: 0x8B53;
    GL_INT_VEC3_ARB :: 0x8B54;
    GL_INT_VEC4_ARB :: 0x8B55;
    GL_BOOL_ARB :: 0x8B56;
    GL_BOOL_VEC2_ARB :: 0x8B57;
    GL_BOOL_VEC3_ARB :: 0x8B58;
    GL_BOOL_VEC4_ARB :: 0x8B59;
    GL_FLOAT_MAT2_ARB :: 0x8B5A;
    GL_FLOAT_MAT3_ARB :: 0x8B5B;
    GL_FLOAT_MAT4_ARB :: 0x8B5C;
    GL_SAMPLER_1D_ARB :: 0x8B5D;
    GL_SAMPLER_2D_ARB :: 0x8B5E;
    GL_SAMPLER_3D_ARB :: 0x8B5F;
    GL_SAMPLER_CUBE_ARB :: 0x8B60;
    GL_SAMPLER_1D_SHADOW_ARB :: 0x8B61;
    GL_SAMPLER_2D_SHADOW_ARB :: 0x8B62;
    GL_SAMPLER_2D_RECT_ARB :: 0x8B63;
    GL_SAMPLER_2D_RECT_SHADOW_ARB :: 0x8B64;
    GL_OBJECT_DELETE_STATUS_ARB :: 0x8B80;
    GL_OBJECT_COMPILE_STATUS_ARB :: 0x8B81;
    GL_OBJECT_LINK_STATUS_ARB :: 0x8B82;
    GL_OBJECT_VALIDATE_STATUS_ARB :: 0x8B83;
    GL_OBJECT_INFO_LOG_LENGTH_ARB :: 0x8B84;
    GL_OBJECT_ATTACHED_OBJECTS_ARB :: 0x8B85;
    GL_OBJECT_ACTIVE_UNIFORMS_ARB :: 0x8B86;
    GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB :: 0x8B87;
    GL_OBJECT_SHADER_SOURCE_LENGTH_ARB :: 0x8B88;

    // GL_ARB_shader_precision

    // GL_ARB_shader_stencil_export

    // GL_ARB_shader_storage_buffer_object
    // GL_SHADER_STORAGE_BUFFER :: 0x90D2;
    // GL_SHADER_STORAGE_BUFFER_BINDING :: 0x90D3;
    // GL_SHADER_STORAGE_BUFFER_START :: 0x90D4;
    // GL_SHADER_STORAGE_BUFFER_SIZE :: 0x90D5;
    // GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS :: 0x90D6;
    // GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS :: 0x90D7;
    // GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS :: 0x90D8;
    // GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS :: 0x90D9;
    // GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS :: 0x90DA;
    // GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS :: 0x90DB;
    // GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS :: 0x90DC;
    // GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS :: 0x90DD;
    // GL_MAX_SHADER_STORAGE_BLOCK_SIZE :: 0x90DE;
    // GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT :: 0x90DF;
    // GL_SHADER_STORAGE_BARRIER_BIT :: 0x00002000;
    // GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES :: 0x8F39;
    // GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS :: 0x8F39;

    // GL_ARB_shader_subroutine
    // GL_ACTIVE_SUBROUTINES :: 0x8DE5;
    // GL_ACTIVE_SUBROUTINE_UNIFORMS :: 0x8DE6;
    // GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS :: 0x8E47;
    // GL_ACTIVE_SUBROUTINE_MAX_LENGTH :: 0x8E48;
    // GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH :: 0x8E49;
    // GL_MAX_SUBROUTINES :: 0x8DE7;
    // GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS :: 0x8DE8;
    // GL_NUM_COMPATIBLE_SUBROUTINES :: 0x8E4A;
    // GL_COMPATIBLE_SUBROUTINES :: 0x8E4B;
    // GL_UNIFORM_SIZE :: 0x8A38;
    // GL_UNIFORM_NAME_LENGTH :: 0x8A39;

    // GL_ARB_shader_texture_image_samples

    // GL_ARB_shader_texture_lod

    // GL_ARB_shader_viewport_layer_array

    // GL_ARB_shading_language_100
    GL_SHADING_LANGUAGE_VERSION_ARB :: 0x8B8C;

    // GL_ARB_shading_language_420pack

    // GL_ARB_shading_language_include
    GL_SHADER_INCLUDE_ARB :: 0x8DAE;
    GL_NAMED_STRING_LENGTH_ARB :: 0x8DE9;
    GL_NAMED_STRING_TYPE_ARB :: 0x8DEA;

    // GL_ARB_shading_language_packing

    // GL_ARB_shadow
    GL_TEXTURE_COMPARE_MODE_ARB :: 0x884C;
    GL_TEXTURE_COMPARE_FUNC_ARB :: 0x884D;
    GL_COMPARE_R_TO_TEXTURE_ARB :: 0x884E;

    // GL_ARB_shadow_ambient
    GL_TEXTURE_COMPARE_FAIL_VALUE_ARB :: 0x80BF;

    // GL_ARB_sparse_buffer
    GL_SPARSE_STORAGE_BIT_ARB :: 0x0400;
    GL_SPARSE_BUFFER_PAGE_SIZE_ARB :: 0x82F8;

    // GL_ARB_sparse_texture
    GL_TEXTURE_SPARSE_ARB :: 0x91A6;
    GL_VIRTUAL_PAGE_SIZE_INDEX_ARB :: 0x91A7;
    GL_NUM_SPARSE_LEVELS_ARB :: 0x91AA;
    GL_NUM_VIRTUAL_PAGE_SIZES_ARB :: 0x91A8;
    GL_VIRTUAL_PAGE_SIZE_X_ARB :: 0x9195;
    GL_VIRTUAL_PAGE_SIZE_Y_ARB :: 0x9196;
    GL_VIRTUAL_PAGE_SIZE_Z_ARB :: 0x9197;
    GL_MAX_SPARSE_TEXTURE_SIZE_ARB :: 0x9198;
    GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB :: 0x9199;
    GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB :: 0x919A;
    GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB :: 0x91A9;

    // GL_ARB_sparse_texture2

    // GL_ARB_sparse_texture_clamp

    // GL_ARB_spirv_extensions
    // GL_SPIR_V_EXTENSIONS :: 0x9553;
    // GL_NUM_SPIR_V_EXTENSIONS :: 0x9554;

    // GL_ARB_stencil_texturing
    // GL_DEPTH_STENCIL_TEXTURE_MODE :: 0x90EA;

    // GL_ARB_sync
    // GL_MAX_SERVER_WAIT_TIMEOUT :: 0x9111;
    // GL_OBJECT_TYPE :: 0x9112;
    // GL_SYNC_CONDITION :: 0x9113;
    // GL_SYNC_STATUS :: 0x9114;
    // GL_SYNC_FLAGS :: 0x9115;
    // GL_SYNC_FENCE :: 0x9116;
    // GL_SYNC_GPU_COMMANDS_COMPLETE :: 0x9117;
    // GL_UNSIGNALED :: 0x9118;
    // GL_SIGNALED :: 0x9119;
    // GL_ALREADY_SIGNALED :: 0x911A;
    // GL_TIMEOUT_EXPIRED :: 0x911B;
    // GL_CONDITION_SATISFIED :: 0x911C;
    // GL_WAIT_FAILED :: 0x911D;
    // GL_SYNC_FLUSH_COMMANDS_BIT :: 0x00000001;
    // GL_TIMEOUT_IGNORED :: 0xFFFFFFFFFFFFFFFF;

    // GL_ARB_tessellation_shader
    // GL_PATCHES :: 0x000E;
    // GL_PATCH_VERTICES :: 0x8E72;
    // GL_PATCH_DEFAULT_INNER_LEVEL :: 0x8E73;
    // GL_PATCH_DEFAULT_OUTER_LEVEL :: 0x8E74;
    // GL_TESS_CONTROL_OUTPUT_VERTICES :: 0x8E75;
    // GL_TESS_GEN_MODE :: 0x8E76;
    // GL_TESS_GEN_SPACING :: 0x8E77;
    // GL_TESS_GEN_VERTEX_ORDER :: 0x8E78;
    // GL_TESS_GEN_POINT_MODE :: 0x8E79;
    // GL_TRIANGLES :: 0x0004;
    // GL_ISOLINES :: 0x8E7A;
    // GL_QUADS :: 0x0007;
    // GL_EQUAL :: 0x0202;
    // GL_FRACTIONAL_ODD :: 0x8E7B;
    // GL_FRACTIONAL_EVEN :: 0x8E7C;
    // GL_CCW :: 0x0901;
    // GL_CW :: 0x0900;
    // GL_MAX_PATCH_VERTICES :: 0x8E7D;
    // GL_MAX_TESS_GEN_LEVEL :: 0x8E7E;
    // GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS :: 0x8E7F;
    // GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS :: 0x8E80;
    // GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS :: 0x8E81;
    // GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS :: 0x8E82;
    // GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS :: 0x8E83;
    // GL_MAX_TESS_PATCH_COMPONENTS :: 0x8E84;
    // GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS :: 0x8E85;
    // GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS :: 0x8E86;
    // GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS :: 0x8E89;
    // GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS :: 0x8E8A;
    // GL_MAX_TESS_CONTROL_INPUT_COMPONENTS :: 0x886C;
    // GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS :: 0x886D;
    // GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS :: 0x8E1E;
    // GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS :: 0x8E1F;
    // GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER :: 0x84F0;
    // GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER :: 0x84F1;
    // GL_TESS_EVALUATION_SHADER :: 0x8E87;
    // GL_TESS_CONTROL_SHADER :: 0x8E88;

    // GL_ARB_texture_barrier

    // GL_ARB_texture_border_clamp
    GL_CLAMP_TO_BORDER_ARB :: 0x812D;

    // GL_ARB_texture_buffer_object
    GL_TEXTURE_BUFFER_ARB :: 0x8C2A;
    GL_MAX_TEXTURE_BUFFER_SIZE_ARB :: 0x8C2B;
    GL_TEXTURE_BINDING_BUFFER_ARB :: 0x8C2C;
    GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB :: 0x8C2D;
    GL_TEXTURE_BUFFER_FORMAT_ARB :: 0x8C2E;

    // GL_ARB_texture_buffer_object_rgb32
    // GL_RGB32F :: 0x8815;
    // GL_RGB32UI :: 0x8D71;
    // GL_RGB32I :: 0x8D83;

    // GL_ARB_texture_buffer_range
    // GL_TEXTURE_BUFFER_OFFSET :: 0x919D;
    // GL_TEXTURE_BUFFER_SIZE :: 0x919E;
    // GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT :: 0x919F;

    // GL_ARB_texture_compression
    GL_COMPRESSED_ALPHA_ARB :: 0x84E9;
    GL_COMPRESSED_LUMINANCE_ARB :: 0x84EA;
    GL_COMPRESSED_LUMINANCE_ALPHA_ARB :: 0x84EB;
    GL_COMPRESSED_INTENSITY_ARB :: 0x84EC;
    GL_COMPRESSED_RGB_ARB :: 0x84ED;
    GL_COMPRESSED_RGBA_ARB :: 0x84EE;
    GL_TEXTURE_COMPRESSION_HINT_ARB :: 0x84EF;
    GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB :: 0x86A0;
    GL_TEXTURE_COMPRESSED_ARB :: 0x86A1;
    GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB :: 0x86A2;
    GL_COMPRESSED_TEXTURE_FORMATS_ARB :: 0x86A3;

    // GL_ARB_texture_compression_bptc
    GL_COMPRESSED_RGBA_BPTC_UNORM_ARB :: 0x8E8C;
    GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB :: 0x8E8D;
    GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB :: 0x8E8E;
    GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB :: 0x8E8F;

    // GL_ARB_texture_compression_rgtc
    // GL_COMPRESSED_RED_RGTC1 :: 0x8DBB;
    // GL_COMPRESSED_SIGNED_RED_RGTC1 :: 0x8DBC;
    // GL_COMPRESSED_RG_RGTC2 :: 0x8DBD;
    // GL_COMPRESSED_SIGNED_RG_RGTC2 :: 0x8DBE;

    // GL_ARB_texture_cube_map
    GL_NORMAL_MAP_ARB :: 0x8511;
    GL_REFLECTION_MAP_ARB :: 0x8512;
    GL_TEXTURE_CUBE_MAP_ARB :: 0x8513;
    GL_TEXTURE_BINDING_CUBE_MAP_ARB :: 0x8514;
    GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB :: 0x8515;
    GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB :: 0x8516;
    GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB :: 0x8517;
    GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB :: 0x8518;
    GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB :: 0x8519;
    GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB :: 0x851A;
    GL_PROXY_TEXTURE_CUBE_MAP_ARB :: 0x851B;
    GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB :: 0x851C;

    // GL_ARB_texture_cube_map_array
    GL_TEXTURE_CUBE_MAP_ARRAY_ARB :: 0x9009;
    GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB :: 0x900A;
    GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB :: 0x900B;
    GL_SAMPLER_CUBE_MAP_ARRAY_ARB :: 0x900C;
    GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB :: 0x900D;
    GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB :: 0x900E;
    GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB :: 0x900F;

    // GL_ARB_texture_env_add

    // GL_ARB_texture_env_combine
    GL_COMBINE_ARB :: 0x8570;
    GL_COMBINE_RGB_ARB :: 0x8571;
    GL_COMBINE_ALPHA_ARB :: 0x8572;
    GL_SOURCE0_RGB_ARB :: 0x8580;
    GL_SOURCE1_RGB_ARB :: 0x8581;
    GL_SOURCE2_RGB_ARB :: 0x8582;
    GL_SOURCE0_ALPHA_ARB :: 0x8588;
    GL_SOURCE1_ALPHA_ARB :: 0x8589;
    GL_SOURCE2_ALPHA_ARB :: 0x858A;
    GL_OPERAND0_RGB_ARB :: 0x8590;
    GL_OPERAND1_RGB_ARB :: 0x8591;
    GL_OPERAND2_RGB_ARB :: 0x8592;
    GL_OPERAND0_ALPHA_ARB :: 0x8598;
    GL_OPERAND1_ALPHA_ARB :: 0x8599;
    GL_OPERAND2_ALPHA_ARB :: 0x859A;
    GL_RGB_SCALE_ARB :: 0x8573;
    GL_ADD_SIGNED_ARB :: 0x8574;
    GL_INTERPOLATE_ARB :: 0x8575;
    GL_SUBTRACT_ARB :: 0x84E7;
    GL_CONSTANT_ARB :: 0x8576;
    GL_PRIMARY_COLOR_ARB :: 0x8577;
    GL_PREVIOUS_ARB :: 0x8578;

    // GL_ARB_texture_env_crossbar

    // GL_ARB_texture_env_dot3
    GL_DOT3_RGB_ARB :: 0x86AE;
    GL_DOT3_RGBA_ARB :: 0x86AF;

    // GL_ARB_texture_filter_anisotropic
    // GL_TEXTURE_MAX_ANISOTROPY :: 0x84FE;
    // GL_MAX_TEXTURE_MAX_ANISOTROPY :: 0x84FF;

    // GL_ARB_texture_filter_minmax
    GL_TEXTURE_REDUCTION_MODE_ARB :: 0x9366;
    GL_WEIGHTED_AVERAGE_ARB :: 0x9367;

    // GL_ARB_texture_float
    GL_TEXTURE_RED_TYPE_ARB :: 0x8C10;
    GL_TEXTURE_GREEN_TYPE_ARB :: 0x8C11;
    GL_TEXTURE_BLUE_TYPE_ARB :: 0x8C12;
    GL_TEXTURE_ALPHA_TYPE_ARB :: 0x8C13;
    GL_TEXTURE_LUMINANCE_TYPE_ARB :: 0x8C14;
    GL_TEXTURE_INTENSITY_TYPE_ARB :: 0x8C15;
    GL_TEXTURE_DEPTH_TYPE_ARB :: 0x8C16;
    GL_UNSIGNED_NORMALIZED_ARB :: 0x8C17;
    GL_RGBA32F_ARB :: 0x8814;
    GL_RGB32F_ARB :: 0x8815;
    GL_ALPHA32F_ARB :: 0x8816;
    GL_INTENSITY32F_ARB :: 0x8817;
    GL_LUMINANCE32F_ARB :: 0x8818;
    GL_LUMINANCE_ALPHA32F_ARB :: 0x8819;
    GL_RGBA16F_ARB :: 0x881A;
    GL_RGB16F_ARB :: 0x881B;
    GL_ALPHA16F_ARB :: 0x881C;
    GL_INTENSITY16F_ARB :: 0x881D;
    GL_LUMINANCE16F_ARB :: 0x881E;
    GL_LUMINANCE_ALPHA16F_ARB :: 0x881F;

    // GL_ARB_texture_gather
    GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB :: 0x8E5E;
    GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB :: 0x8E5F;
    GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB :: 0x8F9F;

    // GL_ARB_texture_mirror_clamp_to_edge
    // GL_MIRROR_CLAMP_TO_EDGE :: 0x8743;

    // GL_ARB_texture_mirrored_repeat
    GL_MIRRORED_REPEAT_ARB :: 0x8370;

    // GL_ARB_texture_multisample
    // GL_SAMPLE_POSITION :: 0x8E50;
    // GL_SAMPLE_MASK :: 0x8E51;
    // GL_SAMPLE_MASK_VALUE :: 0x8E52;
    // GL_MAX_SAMPLE_MASK_WORDS :: 0x8E59;
    // GL_TEXTURE_2D_MULTISAMPLE :: 0x9100;
    // GL_PROXY_TEXTURE_2D_MULTISAMPLE :: 0x9101;
    // GL_TEXTURE_2D_MULTISAMPLE_ARRAY :: 0x9102;
    // GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY :: 0x9103;
    // GL_TEXTURE_BINDING_2D_MULTISAMPLE :: 0x9104;
    // GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY :: 0x9105;
    // GL_TEXTURE_SAMPLES :: 0x9106;
    // GL_TEXTURE_FIXED_SAMPLE_LOCATIONS :: 0x9107;
    // GL_SAMPLER_2D_MULTISAMPLE :: 0x9108;
    // GL_INT_SAMPLER_2D_MULTISAMPLE :: 0x9109;
    // GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE :: 0x910A;
    // GL_SAMPLER_2D_MULTISAMPLE_ARRAY :: 0x910B;
    // GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY :: 0x910C;
    // GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY :: 0x910D;
    // GL_MAX_COLOR_TEXTURE_SAMPLES :: 0x910E;
    // GL_MAX_DEPTH_TEXTURE_SAMPLES :: 0x910F;
    // GL_MAX_INTEGER_SAMPLES :: 0x9110;

    // GL_ARB_texture_non_power_of_two

    // GL_ARB_texture_query_levels

    // GL_ARB_texture_query_lod

    // GL_ARB_texture_rectangle
    GL_TEXTURE_RECTANGLE_ARB :: 0x84F5;
    GL_TEXTURE_BINDING_RECTANGLE_ARB :: 0x84F6;
    GL_PROXY_TEXTURE_RECTANGLE_ARB :: 0x84F7;
    GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB :: 0x84F8;

    // GL_ARB_texture_rg
    // GL_RG :: 0x8227;
    // GL_RG_INTEGER :: 0x8228;
    // GL_R8 :: 0x8229;
    // GL_R16 :: 0x822A;
    // GL_RG8 :: 0x822B;
    // GL_RG16 :: 0x822C;
    // GL_R16F :: 0x822D;
    // GL_R32F :: 0x822E;
    // GL_RG16F :: 0x822F;
    // GL_RG32F :: 0x8230;
    // GL_R8I :: 0x8231;
    // GL_R8UI :: 0x8232;
    // GL_R16I :: 0x8233;
    // GL_R16UI :: 0x8234;
    // GL_R32I :: 0x8235;
    // GL_R32UI :: 0x8236;
    // GL_RG8I :: 0x8237;
    // GL_RG8UI :: 0x8238;
    // GL_RG16I :: 0x8239;
    // GL_RG16UI :: 0x823A;
    // GL_RG32I :: 0x823B;
    // GL_RG32UI :: 0x823C;

    // GL_ARB_texture_rgb10_a2ui
    // GL_RGB10_A2UI :: 0x906F;

    // GL_ARB_texture_stencil8
    // GL_STENCIL_INDEX :: 0x1901;
    // GL_STENCIL_INDEX8 :: 0x8D48;

    // GL_ARB_texture_storage
    // GL_TEXTURE_IMMUTABLE_FORMAT :: 0x912F;

    // GL_ARB_texture_storage_multisample

    // GL_ARB_texture_swizzle
    // GL_TEXTURE_SWIZZLE_R :: 0x8E42;
    // GL_TEXTURE_SWIZZLE_G :: 0x8E43;
    // GL_TEXTURE_SWIZZLE_B :: 0x8E44;
    // GL_TEXTURE_SWIZZLE_A :: 0x8E45;
    // GL_TEXTURE_SWIZZLE_RGBA :: 0x8E46;

    // GL_ARB_texture_view
    // GL_TEXTURE_VIEW_MIN_LEVEL :: 0x82DB;
    // GL_TEXTURE_VIEW_NUM_LEVELS :: 0x82DC;
    // GL_TEXTURE_VIEW_MIN_LAYER :: 0x82DD;
    // GL_TEXTURE_VIEW_NUM_LAYERS :: 0x82DE;
    // GL_TEXTURE_IMMUTABLE_LEVELS :: 0x82DF;

    // GL_ARB_timer_query
    // GL_TIME_ELAPSED :: 0x88BF;
    // GL_TIMESTAMP :: 0x8E28;

    // GL_ARB_transform_feedback2
    // GL_TRANSFORM_FEEDBACK :: 0x8E22;
    // GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED :: 0x8E23;
    // GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE :: 0x8E24;
    // GL_TRANSFORM_FEEDBACK_BINDING :: 0x8E25;

    // GL_ARB_transform_feedback3
    // GL_MAX_TRANSFORM_FEEDBACK_BUFFERS :: 0x8E70;
    // GL_MAX_VERTEX_STREAMS :: 0x8E71;

    // GL_ARB_transform_feedback_instanced

    // GL_ARB_transform_feedback_overflow_query
    GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB :: 0x82EC;
    GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB :: 0x82ED;

    // GL_ARB_transpose_matrix
    GL_TRANSPOSE_MODELVIEW_MATRIX_ARB :: 0x84E3;
    GL_TRANSPOSE_PROJECTION_MATRIX_ARB :: 0x84E4;
    GL_TRANSPOSE_TEXTURE_MATRIX_ARB :: 0x84E5;
    GL_TRANSPOSE_COLOR_MATRIX_ARB :: 0x84E6;

    // GL_ARB_uniform_buffer_object
    // GL_UNIFORM_BUFFER :: 0x8A11;
    // GL_UNIFORM_BUFFER_BINDING :: 0x8A28;
    // GL_UNIFORM_BUFFER_START :: 0x8A29;
    // GL_UNIFORM_BUFFER_SIZE :: 0x8A2A;
    // GL_MAX_VERTEX_UNIFORM_BLOCKS :: 0x8A2B;
    // GL_MAX_GEOMETRY_UNIFORM_BLOCKS :: 0x8A2C;
    // GL_MAX_FRAGMENT_UNIFORM_BLOCKS :: 0x8A2D;
    // GL_MAX_COMBINED_UNIFORM_BLOCKS :: 0x8A2E;
    // GL_MAX_UNIFORM_BUFFER_BINDINGS :: 0x8A2F;
    // GL_MAX_UNIFORM_BLOCK_SIZE :: 0x8A30;
    // GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS :: 0x8A31;
    // GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS :: 0x8A32;
    // GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS :: 0x8A33;
    // GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT :: 0x8A34;
    // GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH :: 0x8A35;
    // GL_ACTIVE_UNIFORM_BLOCKS :: 0x8A36;
    // GL_UNIFORM_TYPE :: 0x8A37;
    // GL_UNIFORM_SIZE :: 0x8A38;
    // GL_UNIFORM_NAME_LENGTH :: 0x8A39;
    // GL_UNIFORM_BLOCK_INDEX :: 0x8A3A;
    // GL_UNIFORM_OFFSET :: 0x8A3B;
    // GL_UNIFORM_ARRAY_STRIDE :: 0x8A3C;
    // GL_UNIFORM_MATRIX_STRIDE :: 0x8A3D;
    // GL_UNIFORM_IS_ROW_MAJOR :: 0x8A3E;
    // GL_UNIFORM_BLOCK_BINDING :: 0x8A3F;
    // GL_UNIFORM_BLOCK_DATA_SIZE :: 0x8A40;
    // GL_UNIFORM_BLOCK_NAME_LENGTH :: 0x8A41;
    // GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS :: 0x8A42;
    // GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES :: 0x8A43;
    // GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER :: 0x8A44;
    // GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER :: 0x8A45;
    // GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER :: 0x8A46;
    // GL_INVALID_INDEX :: 0xFFFFFFFF;

    // GL_ARB_vertex_array_bgra
    // GL_BGRA :: 0x80E1;

    // GL_ARB_vertex_array_object
    // GL_VERTEX_ARRAY_BINDING :: 0x85B5;

    // GL_ARB_vertex_attrib_64bit
    // GL_RGB32I :: 0x8D83;
    // GL_DOUBLE_VEC2 :: 0x8FFC;
    // GL_DOUBLE_VEC3 :: 0x8FFD;
    // GL_DOUBLE_VEC4 :: 0x8FFE;
    // GL_DOUBLE_MAT2 :: 0x8F46;
    // GL_DOUBLE_MAT3 :: 0x8F47;
    // GL_DOUBLE_MAT4 :: 0x8F48;
    // GL_DOUBLE_MAT2x3 :: 0x8F49;
    // GL_DOUBLE_MAT2x4 :: 0x8F4A;
    // GL_DOUBLE_MAT3x2 :: 0x8F4B;
    // GL_DOUBLE_MAT3x4 :: 0x8F4C;
    // GL_DOUBLE_MAT4x2 :: 0x8F4D;
    // GL_DOUBLE_MAT4x3 :: 0x8F4E;

    // GL_ARB_vertex_attrib_binding
    // GL_VERTEX_ATTRIB_BINDING :: 0x82D4;
    // GL_VERTEX_ATTRIB_RELATIVE_OFFSET :: 0x82D5;
    // GL_VERTEX_BINDING_DIVISOR :: 0x82D6;
    // GL_VERTEX_BINDING_OFFSET :: 0x82D7;
    // GL_VERTEX_BINDING_STRIDE :: 0x82D8;
    // GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET :: 0x82D9;
    // GL_MAX_VERTEX_ATTRIB_BINDINGS :: 0x82DA;

    // GL_ARB_vertex_blend
    GL_MAX_VERTEX_UNITS_ARB :: 0x86A4;
    GL_ACTIVE_VERTEX_UNITS_ARB :: 0x86A5;
    GL_WEIGHT_SUM_UNITY_ARB :: 0x86A6;
    GL_VERTEX_BLEND_ARB :: 0x86A7;
    GL_CURRENT_WEIGHT_ARB :: 0x86A8;
    GL_WEIGHT_ARRAY_TYPE_ARB :: 0x86A9;
    GL_WEIGHT_ARRAY_STRIDE_ARB :: 0x86AA;
    GL_WEIGHT_ARRAY_SIZE_ARB :: 0x86AB;
    GL_WEIGHT_ARRAY_POINTER_ARB :: 0x86AC;
    GL_WEIGHT_ARRAY_ARB :: 0x86AD;
    GL_MODELVIEW0_ARB :: 0x1700;
    GL_MODELVIEW1_ARB :: 0x850A;
    GL_MODELVIEW2_ARB :: 0x8722;
    GL_MODELVIEW3_ARB :: 0x8723;
    GL_MODELVIEW4_ARB :: 0x8724;
    GL_MODELVIEW5_ARB :: 0x8725;
    GL_MODELVIEW6_ARB :: 0x8726;
    GL_MODELVIEW7_ARB :: 0x8727;
    GL_MODELVIEW8_ARB :: 0x8728;
    GL_MODELVIEW9_ARB :: 0x8729;
    GL_MODELVIEW10_ARB :: 0x872A;
    GL_MODELVIEW11_ARB :: 0x872B;
    GL_MODELVIEW12_ARB :: 0x872C;
    GL_MODELVIEW13_ARB :: 0x872D;
    GL_MODELVIEW14_ARB :: 0x872E;
    GL_MODELVIEW15_ARB :: 0x872F;
    GL_MODELVIEW16_ARB :: 0x8730;
    GL_MODELVIEW17_ARB :: 0x8731;
    GL_MODELVIEW18_ARB :: 0x8732;
    GL_MODELVIEW19_ARB :: 0x8733;
    GL_MODELVIEW20_ARB :: 0x8734;
    GL_MODELVIEW21_ARB :: 0x8735;
    GL_MODELVIEW22_ARB :: 0x8736;
    GL_MODELVIEW23_ARB :: 0x8737;
    GL_MODELVIEW24_ARB :: 0x8738;
    GL_MODELVIEW25_ARB :: 0x8739;
    GL_MODELVIEW26_ARB :: 0x873A;
    GL_MODELVIEW27_ARB :: 0x873B;
    GL_MODELVIEW28_ARB :: 0x873C;
    GL_MODELVIEW29_ARB :: 0x873D;
    GL_MODELVIEW30_ARB :: 0x873E;
    GL_MODELVIEW31_ARB :: 0x873F;

    // GL_ARB_vertex_buffer_object
    GL_BUFFER_SIZE_ARB :: 0x8764;
    GL_BUFFER_USAGE_ARB :: 0x8765;
    GL_ARRAY_BUFFER_ARB :: 0x8892;
    GL_ELEMENT_ARRAY_BUFFER_ARB :: 0x8893;
    GL_ARRAY_BUFFER_BINDING_ARB :: 0x8894;
    GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB :: 0x8895;
    GL_VERTEX_ARRAY_BUFFER_BINDING_ARB :: 0x8896;
    GL_NORMAL_ARRAY_BUFFER_BINDING_ARB :: 0x8897;
    GL_COLOR_ARRAY_BUFFER_BINDING_ARB :: 0x8898;
    GL_INDEX_ARRAY_BUFFER_BINDING_ARB :: 0x8899;
    GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB :: 0x889A;
    GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB :: 0x889B;
    GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB :: 0x889C;
    GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB :: 0x889D;
    GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB :: 0x889E;
    GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB :: 0x889F;
    GL_READ_ONLY_ARB :: 0x88B8;
    GL_WRITE_ONLY_ARB :: 0x88B9;
    GL_READ_WRITE_ARB :: 0x88BA;
    GL_BUFFER_ACCESS_ARB :: 0x88BB;
    GL_BUFFER_MAPPED_ARB :: 0x88BC;
    GL_BUFFER_MAP_POINTER_ARB :: 0x88BD;
    GL_STREAM_DRAW_ARB :: 0x88E0;
    GL_STREAM_READ_ARB :: 0x88E1;
    GL_STREAM_COPY_ARB :: 0x88E2;
    GL_STATIC_DRAW_ARB :: 0x88E4;
    GL_STATIC_READ_ARB :: 0x88E5;
    GL_STATIC_COPY_ARB :: 0x88E6;
    GL_DYNAMIC_DRAW_ARB :: 0x88E8;
    GL_DYNAMIC_READ_ARB :: 0x88E9;
    GL_DYNAMIC_COPY_ARB :: 0x88EA;

    // GL_ARB_vertex_program
    GL_COLOR_SUM_ARB :: 0x8458;
    GL_VERTEX_PROGRAM_ARB :: 0x8620;
    GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB :: 0x8622;
    GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB :: 0x8623;
    GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB :: 0x8624;
    GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB :: 0x8625;
    GL_CURRENT_VERTEX_ATTRIB_ARB :: 0x8626;
    // GL_PROGRAM_LENGTH_ARB :: 0x8627;
    // GL_PROGRAM_STRING_ARB :: 0x8628;
    // GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB :: 0x862E;
    // GL_MAX_PROGRAM_MATRICES_ARB :: 0x862F;
    // GL_CURRENT_MATRIX_STACK_DEPTH_ARB :: 0x8640;
    // GL_CURRENT_MATRIX_ARB :: 0x8641;
    GL_VERTEX_PROGRAM_POINT_SIZE_ARB :: 0x8642;
    GL_VERTEX_PROGRAM_TWO_SIDE_ARB :: 0x8643;
    GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB :: 0x8645;
    // GL_PROGRAM_ERROR_POSITION_ARB :: 0x864B;
    // GL_PROGRAM_BINDING_ARB :: 0x8677;
    GL_MAX_VERTEX_ATTRIBS_ARB :: 0x8869;
    GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB :: 0x886A;
    // GL_PROGRAM_ERROR_STRING_ARB :: 0x8874;
    // GL_PROGRAM_FORMAT_ASCII_ARB :: 0x8875;
    // GL_PROGRAM_FORMAT_ARB :: 0x8876;
    // GL_PROGRAM_INSTRUCTIONS_ARB :: 0x88A0;
    // GL_MAX_PROGRAM_INSTRUCTIONS_ARB :: 0x88A1;
    // GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB :: 0x88A2;
    // GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB :: 0x88A3;
    // GL_PROGRAM_TEMPORARIES_ARB :: 0x88A4;
    // GL_MAX_PROGRAM_TEMPORARIES_ARB :: 0x88A5;
    // GL_PROGRAM_NATIVE_TEMPORARIES_ARB :: 0x88A6;
    // GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB :: 0x88A7;
    // GL_PROGRAM_PARAMETERS_ARB :: 0x88A8;
    // GL_MAX_PROGRAM_PARAMETERS_ARB :: 0x88A9;
    // GL_PROGRAM_NATIVE_PARAMETERS_ARB :: 0x88AA;
    // GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB :: 0x88AB;
    // GL_PROGRAM_ATTRIBS_ARB :: 0x88AC;
    // GL_MAX_PROGRAM_ATTRIBS_ARB :: 0x88AD;
    // GL_PROGRAM_NATIVE_ATTRIBS_ARB :: 0x88AE;
    // GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB :: 0x88AF;
    GL_PROGRAM_ADDRESS_REGISTERS_ARB :: 0x88B0;
    GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB :: 0x88B1;
    GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB :: 0x88B2;
    GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB :: 0x88B3;
    // GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB :: 0x88B4;
    // GL_MAX_PROGRAM_ENV_PARAMETERS_ARB :: 0x88B5;
    // GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB :: 0x88B6;
    // GL_TRANSPOSE_CURRENT_MATRIX_ARB :: 0x88B7;
    // GL_MATRIX0_ARB :: 0x88C0;
    // GL_MATRIX1_ARB :: 0x88C1;
    // GL_MATRIX2_ARB :: 0x88C2;
    // GL_MATRIX3_ARB :: 0x88C3;
    // GL_MATRIX4_ARB :: 0x88C4;
    // GL_MATRIX5_ARB :: 0x88C5;
    // GL_MATRIX6_ARB :: 0x88C6;
    // GL_MATRIX7_ARB :: 0x88C7;
    // GL_MATRIX8_ARB :: 0x88C8;
    // GL_MATRIX9_ARB :: 0x88C9;
    // GL_MATRIX10_ARB :: 0x88CA;
    // GL_MATRIX11_ARB :: 0x88CB;
    // GL_MATRIX12_ARB :: 0x88CC;
    // GL_MATRIX13_ARB :: 0x88CD;
    // GL_MATRIX14_ARB :: 0x88CE;
    // GL_MATRIX15_ARB :: 0x88CF;
    // GL_MATRIX16_ARB :: 0x88D0;
    // GL_MATRIX17_ARB :: 0x88D1;
    // GL_MATRIX18_ARB :: 0x88D2;
    // GL_MATRIX19_ARB :: 0x88D3;
    // GL_MATRIX20_ARB :: 0x88D4;
    // GL_MATRIX21_ARB :: 0x88D5;
    // GL_MATRIX22_ARB :: 0x88D6;
    // GL_MATRIX23_ARB :: 0x88D7;
    // GL_MATRIX24_ARB :: 0x88D8;
    // GL_MATRIX25_ARB :: 0x88D9;
    // GL_MATRIX26_ARB :: 0x88DA;
    // GL_MATRIX27_ARB :: 0x88DB;
    // GL_MATRIX28_ARB :: 0x88DC;
    // GL_MATRIX29_ARB :: 0x88DD;
    // GL_MATRIX30_ARB :: 0x88DE;
    // GL_MATRIX31_ARB :: 0x88DF;

    // GL_ARB_vertex_shader
    GL_VERTEX_SHADER_ARB :: 0x8B31;
    GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB :: 0x8B4A;
    GL_MAX_VARYING_FLOATS_ARB :: 0x8B4B;
    GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB :: 0x8B4C;
    GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB :: 0x8B4D;
    GL_OBJECT_ACTIVE_ATTRIBUTES_ARB :: 0x8B89;
    GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB :: 0x8B8A;
    // GL_MAX_VERTEX_ATTRIBS_ARB :: 0x8869;
    // GL_MAX_TEXTURE_IMAGE_UNITS_ARB :: 0x8872;
    // GL_MAX_TEXTURE_COORDS_ARB :: 0x8871;
    // GL_VERTEX_PROGRAM_POINT_SIZE_ARB :: 0x8642;
    // GL_VERTEX_PROGRAM_TWO_SIDE_ARB :: 0x8643;
    // GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB :: 0x8622;
    // GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB :: 0x8623;
    // GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB :: 0x8624;
    // GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB :: 0x8625;
    // GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB :: 0x886A;
    // GL_CURRENT_VERTEX_ATTRIB_ARB :: 0x8626;
    // GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB :: 0x8645;
    // GL_FLOAT :: 0x1406;
    // GL_FLOAT_VEC2_ARB :: 0x8B50;
    // GL_FLOAT_VEC3_ARB :: 0x8B51;
    // GL_FLOAT_VEC4_ARB :: 0x8B52;
    // GL_FLOAT_MAT2_ARB :: 0x8B5A;
    // GL_FLOAT_MAT3_ARB :: 0x8B5B;
    // GL_FLOAT_MAT4_ARB :: 0x8B5C;

    // GL_ARB_vertex_type_10f_11f_11f_rev
    // GL_UNSIGNED_INT_10F_11F_11F_REV :: 0x8C3B;

    // GL_ARB_vertex_type_2_10_10_10_rev
    // GL_UNSIGNED_INT_2_10_10_10_REV :: 0x8368;
    // GL_INT_2_10_10_10_REV :: 0x8D9F;

    // GL_ARB_viewport_array
    // GL_SCISSOR_BOX :: 0x0C10;
    // GL_VIEWPORT :: 0x0BA2;
    // GL_DEPTH_RANGE :: 0x0B70;
    // GL_SCISSOR_TEST :: 0x0C11;
    // GL_MAX_VIEWPORTS :: 0x825B;
    // GL_VIEWPORT_SUBPIXEL_BITS :: 0x825C;
    // GL_VIEWPORT_BOUNDS_RANGE :: 0x825D;
    // GL_LAYER_PROVOKING_VERTEX :: 0x825E;
    // GL_VIEWPORT_INDEX_PROVOKING_VERTEX :: 0x825F;
    // GL_UNDEFINED_VERTEX :: 0x8260;
    // GL_FIRST_VERTEX_CONVENTION :: 0x8E4D;
    // GL_LAST_VERTEX_CONVENTION :: 0x8E4E;
    // GL_PROVOKING_VERTEX :: 0x8E4F;

    // GL_ARB_window_pos

    // GL_ATI_draw_buffers
    GL_MAX_DRAW_BUFFERS_ATI :: 0x8824;
    GL_DRAW_BUFFER0_ATI :: 0x8825;
    GL_DRAW_BUFFER1_ATI :: 0x8826;
    GL_DRAW_BUFFER2_ATI :: 0x8827;
    GL_DRAW_BUFFER3_ATI :: 0x8828;
    GL_DRAW_BUFFER4_ATI :: 0x8829;
    GL_DRAW_BUFFER5_ATI :: 0x882A;
    GL_DRAW_BUFFER6_ATI :: 0x882B;
    GL_DRAW_BUFFER7_ATI :: 0x882C;
    GL_DRAW_BUFFER8_ATI :: 0x882D;
    GL_DRAW_BUFFER9_ATI :: 0x882E;
    GL_DRAW_BUFFER10_ATI :: 0x882F;
    GL_DRAW_BUFFER11_ATI :: 0x8830;
    GL_DRAW_BUFFER12_ATI :: 0x8831;
    GL_DRAW_BUFFER13_ATI :: 0x8832;
    GL_DRAW_BUFFER14_ATI :: 0x8833;
    GL_DRAW_BUFFER15_ATI :: 0x8834;

    // GL_ATI_element_array
    GL_ELEMENT_ARRAY_ATI :: 0x8768;
    GL_ELEMENT_ARRAY_TYPE_ATI :: 0x8769;
    GL_ELEMENT_ARRAY_POINTER_ATI :: 0x876A;

    // GL_ATI_envmap_bumpmap
    GL_BUMP_ROT_MATRIX_ATI :: 0x8775;
    GL_BUMP_ROT_MATRIX_SIZE_ATI :: 0x8776;
    GL_BUMP_NUM_TEX_UNITS_ATI :: 0x8777;
    GL_BUMP_TEX_UNITS_ATI :: 0x8778;
    GL_DUDV_ATI :: 0x8779;
    GL_DU8DV8_ATI :: 0x877A;
    GL_BUMP_ENVMAP_ATI :: 0x877B;
    GL_BUMP_TARGET_ATI :: 0x877C;

    // GL_ATI_fragment_shader
    GL_FRAGMENT_SHADER_ATI :: 0x8920;
    GL_REG_0_ATI :: 0x8921;
    GL_REG_1_ATI :: 0x8922;
    GL_REG_2_ATI :: 0x8923;
    GL_REG_3_ATI :: 0x8924;
    GL_REG_4_ATI :: 0x8925;
    GL_REG_5_ATI :: 0x8926;
    GL_REG_6_ATI :: 0x8927;
    GL_REG_7_ATI :: 0x8928;
    GL_REG_8_ATI :: 0x8929;
    GL_REG_9_ATI :: 0x892A;
    GL_REG_10_ATI :: 0x892B;
    GL_REG_11_ATI :: 0x892C;
    GL_REG_12_ATI :: 0x892D;
    GL_REG_13_ATI :: 0x892E;
    GL_REG_14_ATI :: 0x892F;
    GL_REG_15_ATI :: 0x8930;
    GL_REG_16_ATI :: 0x8931;
    GL_REG_17_ATI :: 0x8932;
    GL_REG_18_ATI :: 0x8933;
    GL_REG_19_ATI :: 0x8934;
    GL_REG_20_ATI :: 0x8935;
    GL_REG_21_ATI :: 0x8936;
    GL_REG_22_ATI :: 0x8937;
    GL_REG_23_ATI :: 0x8938;
    GL_REG_24_ATI :: 0x8939;
    GL_REG_25_ATI :: 0x893A;
    GL_REG_26_ATI :: 0x893B;
    GL_REG_27_ATI :: 0x893C;
    GL_REG_28_ATI :: 0x893D;
    GL_REG_29_ATI :: 0x893E;
    GL_REG_30_ATI :: 0x893F;
    GL_REG_31_ATI :: 0x8940;
    GL_CON_0_ATI :: 0x8941;
    GL_CON_1_ATI :: 0x8942;
    GL_CON_2_ATI :: 0x8943;
    GL_CON_3_ATI :: 0x8944;
    GL_CON_4_ATI :: 0x8945;
    GL_CON_5_ATI :: 0x8946;
    GL_CON_6_ATI :: 0x8947;
    GL_CON_7_ATI :: 0x8948;
    GL_CON_8_ATI :: 0x8949;
    GL_CON_9_ATI :: 0x894A;
    GL_CON_10_ATI :: 0x894B;
    GL_CON_11_ATI :: 0x894C;
    GL_CON_12_ATI :: 0x894D;
    GL_CON_13_ATI :: 0x894E;
    GL_CON_14_ATI :: 0x894F;
    GL_CON_15_ATI :: 0x8950;
    GL_CON_16_ATI :: 0x8951;
    GL_CON_17_ATI :: 0x8952;
    GL_CON_18_ATI :: 0x8953;
    GL_CON_19_ATI :: 0x8954;
    GL_CON_20_ATI :: 0x8955;
    GL_CON_21_ATI :: 0x8956;
    GL_CON_22_ATI :: 0x8957;
    GL_CON_23_ATI :: 0x8958;
    GL_CON_24_ATI :: 0x8959;
    GL_CON_25_ATI :: 0x895A;
    GL_CON_26_ATI :: 0x895B;
    GL_CON_27_ATI :: 0x895C;
    GL_CON_28_ATI :: 0x895D;
    GL_CON_29_ATI :: 0x895E;
    GL_CON_30_ATI :: 0x895F;
    GL_CON_31_ATI :: 0x8960;
    GL_MOV_ATI :: 0x8961;
    GL_ADD_ATI :: 0x8963;
    GL_MUL_ATI :: 0x8964;
    GL_SUB_ATI :: 0x8965;
    GL_DOT3_ATI :: 0x8966;
    GL_DOT4_ATI :: 0x8967;
    GL_MAD_ATI :: 0x8968;
    GL_LERP_ATI :: 0x8969;
    GL_CND_ATI :: 0x896A;
    GL_CND0_ATI :: 0x896B;
    GL_DOT2_ADD_ATI :: 0x896C;
    GL_SECONDARY_INTERPOLATOR_ATI :: 0x896D;
    GL_NUM_FRAGMENT_REGISTERS_ATI :: 0x896E;
    GL_NUM_FRAGMENT_CONSTANTS_ATI :: 0x896F;
    GL_NUM_PASSES_ATI :: 0x8970;
    GL_NUM_INSTRUCTIONS_PER_PASS_ATI :: 0x8971;
    GL_NUM_INSTRUCTIONS_TOTAL_ATI :: 0x8972;
    GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI :: 0x8973;
    GL_NUM_LOOPBACK_COMPONENTS_ATI :: 0x8974;
    GL_COLOR_ALPHA_PAIRING_ATI :: 0x8975;
    GL_SWIZZLE_STR_ATI :: 0x8976;
    GL_SWIZZLE_STQ_ATI :: 0x8977;
    GL_SWIZZLE_STR_DR_ATI :: 0x8978;
    GL_SWIZZLE_STQ_DQ_ATI :: 0x8979;
    GL_SWIZZLE_STRQ_ATI :: 0x897A;
    GL_SWIZZLE_STRQ_DQ_ATI :: 0x897B;
    GL_RED_BIT_ATI :: 0x00000001;
    GL_GREEN_BIT_ATI :: 0x00000002;
    GL_BLUE_BIT_ATI :: 0x00000004;
    GL_2X_BIT_ATI :: 0x00000001;
    GL_4X_BIT_ATI :: 0x00000002;
    GL_8X_BIT_ATI :: 0x00000004;
    GL_HALF_BIT_ATI :: 0x00000008;
    GL_QUARTER_BIT_ATI :: 0x00000010;
    GL_EIGHTH_BIT_ATI :: 0x00000020;
    GL_SATURATE_BIT_ATI :: 0x00000040;
    GL_COMP_BIT_ATI :: 0x00000002;
    GL_NEGATE_BIT_ATI :: 0x00000004;
    GL_BIAS_BIT_ATI :: 0x00000008;

    // GL_ATI_map_object_buffer

    // GL_ATI_meminfo
    GL_VBO_FREE_MEMORY_ATI :: 0x87FB;
    GL_TEXTURE_FREE_MEMORY_ATI :: 0x87FC;
    GL_RENDERBUFFER_FREE_MEMORY_ATI :: 0x87FD;

    // GL_ATI_pixel_format_float
    GL_RGBA_FLOAT_MODE_ATI :: 0x8820;
    GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI :: 0x8835;

    // GL_ATI_pn_triangles
    GL_PN_TRIANGLES_ATI :: 0x87F0;
    GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI :: 0x87F1;
    GL_PN_TRIANGLES_POINT_MODE_ATI :: 0x87F2;
    GL_PN_TRIANGLES_NORMAL_MODE_ATI :: 0x87F3;
    GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI :: 0x87F4;
    GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI :: 0x87F5;
    GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI :: 0x87F6;
    GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI :: 0x87F7;
    GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI :: 0x87F8;

    // GL_ATI_separate_stencil
    GL_STENCIL_BACK_FUNC_ATI :: 0x8800;
    GL_STENCIL_BACK_FAIL_ATI :: 0x8801;
    GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI :: 0x8802;
    GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI :: 0x8803;

    // GL_ATI_text_fragment_shader
    GL_TEXT_FRAGMENT_SHADER_ATI :: 0x8200;

    // GL_ATI_texture_env_combine3
    GL_MODULATE_ADD_ATI :: 0x8744;
    GL_MODULATE_SIGNED_ADD_ATI :: 0x8745;
    GL_MODULATE_SUBTRACT_ATI :: 0x8746;

    // GL_ATI_texture_float
    GL_RGBA_FLOAT32_ATI :: 0x8814;
    GL_RGB_FLOAT32_ATI :: 0x8815;
    GL_ALPHA_FLOAT32_ATI :: 0x8816;
    GL_INTENSITY_FLOAT32_ATI :: 0x8817;
    GL_LUMINANCE_FLOAT32_ATI :: 0x8818;
    GL_LUMINANCE_ALPHA_FLOAT32_ATI :: 0x8819;
    GL_RGBA_FLOAT16_ATI :: 0x881A;
    GL_RGB_FLOAT16_ATI :: 0x881B;
    GL_ALPHA_FLOAT16_ATI :: 0x881C;
    GL_INTENSITY_FLOAT16_ATI :: 0x881D;
    GL_LUMINANCE_FLOAT16_ATI :: 0x881E;
    GL_LUMINANCE_ALPHA_FLOAT16_ATI :: 0x881F;

    // GL_ATI_texture_mirror_once
    GL_MIRROR_CLAMP_ATI :: 0x8742;
    GL_MIRROR_CLAMP_TO_EDGE_ATI :: 0x8743;

    // GL_ATI_vertex_array_object
    GL_STATIC_ATI :: 0x8760;
    GL_DYNAMIC_ATI :: 0x8761;
    GL_PRESERVE_ATI :: 0x8762;
    GL_DISCARD_ATI :: 0x8763;
    GL_OBJECT_BUFFER_SIZE_ATI :: 0x8764;
    GL_OBJECT_BUFFER_USAGE_ATI :: 0x8765;
    GL_ARRAY_OBJECT_BUFFER_ATI :: 0x8766;
    GL_ARRAY_OBJECT_OFFSET_ATI :: 0x8767;

    // GL_ATI_vertex_attrib_array_object

    // GL_ATI_vertex_streams
    GL_MAX_VERTEX_STREAMS_ATI :: 0x876B;
    GL_VERTEX_STREAM0_ATI :: 0x876C;
    GL_VERTEX_STREAM1_ATI :: 0x876D;
    GL_VERTEX_STREAM2_ATI :: 0x876E;
    GL_VERTEX_STREAM3_ATI :: 0x876F;
    GL_VERTEX_STREAM4_ATI :: 0x8770;
    GL_VERTEX_STREAM5_ATI :: 0x8771;
    GL_VERTEX_STREAM6_ATI :: 0x8772;
    GL_VERTEX_STREAM7_ATI :: 0x8773;
    GL_VERTEX_SOURCE_ATI :: 0x8774;

    // GL_EXT_422_pixels
    GL_422_EXT :: 0x80CC;
    GL_422_REV_EXT :: 0x80CD;
    GL_422_AVERAGE_EXT :: 0x80CE;
    GL_422_REV_AVERAGE_EXT :: 0x80CF;

    // GL_EXT_abgr
    GL_ABGR_EXT :: 0x8000;

    // GL_EXT_bgra
    GL_BGR_EXT :: 0x80E0;
    GL_BGRA_EXT :: 0x80E1;

    // GL_EXT_bindable_uniform
    GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT :: 0x8DE2;
    GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT :: 0x8DE3;
    GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT :: 0x8DE4;
    GL_MAX_BINDABLE_UNIFORM_SIZE_EXT :: 0x8DED;
    GL_UNIFORM_BUFFER_EXT :: 0x8DEE;
    GL_UNIFORM_BUFFER_BINDING_EXT :: 0x8DEF;

    // GL_EXT_blend_color
    GL_CONSTANT_COLOR_EXT :: 0x8001;
    GL_ONE_MINUS_CONSTANT_COLOR_EXT :: 0x8002;
    GL_CONSTANT_ALPHA_EXT :: 0x8003;
    GL_ONE_MINUS_CONSTANT_ALPHA_EXT :: 0x8004;
    GL_BLEND_COLOR_EXT :: 0x8005;

    // GL_EXT_blend_equation_separate
    GL_BLEND_EQUATION_RGB_EXT :: 0x8009;
    GL_BLEND_EQUATION_ALPHA_EXT :: 0x883D;

    // GL_EXT_blend_func_separate
    GL_BLEND_DST_RGB_EXT :: 0x80C8;
    GL_BLEND_SRC_RGB_EXT :: 0x80C9;
    GL_BLEND_DST_ALPHA_EXT :: 0x80CA;
    GL_BLEND_SRC_ALPHA_EXT :: 0x80CB;

    // GL_EXT_blend_logic_op

    // GL_EXT_blend_minmax
    GL_MIN_EXT :: 0x8007;
    GL_MAX_EXT :: 0x8008;
    GL_FUNC_ADD_EXT :: 0x8006;
    GL_BLEND_EQUATION_EXT :: 0x8009;

    // GL_EXT_blend_subtract
    GL_FUNC_SUBTRACT_EXT :: 0x800A;
    GL_FUNC_REVERSE_SUBTRACT_EXT :: 0x800B;

    // GL_EXT_clip_volume_hint
    GL_CLIP_VOLUME_CLIPPING_HINT_EXT :: 0x80F0;

    // GL_EXT_cmyka
    GL_CMYK_EXT :: 0x800C;
    GL_CMYKA_EXT :: 0x800D;
    GL_PACK_CMYK_HINT_EXT :: 0x800E;
    GL_UNPACK_CMYK_HINT_EXT :: 0x800F;

    // GL_EXT_color_subtable

    // GL_EXT_compiled_vertex_array
    GL_ARRAY_ELEMENT_LOCK_FIRST_EXT :: 0x81A8;
    GL_ARRAY_ELEMENT_LOCK_COUNT_EXT :: 0x81A9;

    // GL_EXT_convolution
    GL_CONVOLUTION_1D_EXT :: 0x8010;
    GL_CONVOLUTION_2D_EXT :: 0x8011;
    GL_SEPARABLE_2D_EXT :: 0x8012;
    GL_CONVOLUTION_BORDER_MODE_EXT :: 0x8013;
    GL_CONVOLUTION_FILTER_SCALE_EXT :: 0x8014;
    GL_CONVOLUTION_FILTER_BIAS_EXT :: 0x8015;
    GL_REDUCE_EXT :: 0x8016;
    GL_CONVOLUTION_FORMAT_EXT :: 0x8017;
    GL_CONVOLUTION_WIDTH_EXT :: 0x8018;
    GL_CONVOLUTION_HEIGHT_EXT :: 0x8019;
    GL_MAX_CONVOLUTION_WIDTH_EXT :: 0x801A;
    GL_MAX_CONVOLUTION_HEIGHT_EXT :: 0x801B;
    GL_POST_CONVOLUTION_RED_SCALE_EXT :: 0x801C;
    GL_POST_CONVOLUTION_GREEN_SCALE_EXT :: 0x801D;
    GL_POST_CONVOLUTION_BLUE_SCALE_EXT :: 0x801E;
    GL_POST_CONVOLUTION_ALPHA_SCALE_EXT :: 0x801F;
    GL_POST_CONVOLUTION_RED_BIAS_EXT :: 0x8020;
    GL_POST_CONVOLUTION_GREEN_BIAS_EXT :: 0x8021;
    GL_POST_CONVOLUTION_BLUE_BIAS_EXT :: 0x8022;
    GL_POST_CONVOLUTION_ALPHA_BIAS_EXT :: 0x8023;

    // GL_EXT_coordinate_frame
    GL_TANGENT_ARRAY_EXT :: 0x8439;
    GL_BINORMAL_ARRAY_EXT :: 0x843A;
    GL_CURRENT_TANGENT_EXT :: 0x843B;
    GL_CURRENT_BINORMAL_EXT :: 0x843C;
    GL_TANGENT_ARRAY_TYPE_EXT :: 0x843E;
    GL_TANGENT_ARRAY_STRIDE_EXT :: 0x843F;
    GL_BINORMAL_ARRAY_TYPE_EXT :: 0x8440;
    GL_BINORMAL_ARRAY_STRIDE_EXT :: 0x8441;
    GL_TANGENT_ARRAY_POINTER_EXT :: 0x8442;
    GL_BINORMAL_ARRAY_POINTER_EXT :: 0x8443;
    GL_MAP1_TANGENT_EXT :: 0x8444;
    GL_MAP2_TANGENT_EXT :: 0x8445;
    GL_MAP1_BINORMAL_EXT :: 0x8446;
    GL_MAP2_BINORMAL_EXT :: 0x8447;

    // GL_EXT_copy_texture

    // GL_EXT_cull_vertex
    GL_CULL_VERTEX_EXT :: 0x81AA;
    GL_CULL_VERTEX_EYE_POSITION_EXT :: 0x81AB;
    GL_CULL_VERTEX_OBJECT_POSITION_EXT :: 0x81AC;

    // GL_EXT_debug_label
    GL_PROGRAM_PIPELINE_OBJECT_EXT :: 0x8A4F;
    GL_PROGRAM_OBJECT_EXT :: 0x8B40;
    GL_SHADER_OBJECT_EXT :: 0x8B48;
    GL_BUFFER_OBJECT_EXT :: 0x9151;
    GL_QUERY_OBJECT_EXT :: 0x9153;
    GL_VERTEX_ARRAY_OBJECT_EXT :: 0x9154;
    // GL_SAMPLER :: 0x82E6;
    // GL_TRANSFORM_FEEDBACK :: 0x8E22;

    // GL_EXT_debug_marker

    // GL_EXT_depth_bounds_test
    GL_DEPTH_BOUNDS_TEST_EXT :: 0x8890;
    GL_DEPTH_BOUNDS_EXT :: 0x8891;

    // GL_EXT_direct_state_access
    GL_PROGRAM_MATRIX_EXT :: 0x8E2D;
    GL_TRANSPOSE_PROGRAM_MATRIX_EXT :: 0x8E2E;
    GL_PROGRAM_MATRIX_STACK_DEPTH_EXT :: 0x8E2F;

    // GL_EXT_draw_buffers2

    // GL_EXT_draw_instanced

    // GL_EXT_draw_range_elements
    GL_MAX_ELEMENTS_VERTICES_EXT :: 0x80E8;
    GL_MAX_ELEMENTS_INDICES_EXT :: 0x80E9;

    // GL_EXT_external_buffer

    // GL_EXT_fog_coord
    GL_FOG_COORDINATE_SOURCE_EXT :: 0x8450;
    GL_FOG_COORDINATE_EXT :: 0x8451;
    GL_FRAGMENT_DEPTH_EXT :: 0x8452;
    GL_CURRENT_FOG_COORDINATE_EXT :: 0x8453;
    GL_FOG_COORDINATE_ARRAY_TYPE_EXT :: 0x8454;
    GL_FOG_COORDINATE_ARRAY_STRIDE_EXT :: 0x8455;
    GL_FOG_COORDINATE_ARRAY_POINTER_EXT :: 0x8456;
    GL_FOG_COORDINATE_ARRAY_EXT :: 0x8457;

    // GL_EXT_framebuffer_blit
    GL_READ_FRAMEBUFFER_EXT :: 0x8CA8;
    GL_DRAW_FRAMEBUFFER_EXT :: 0x8CA9;
    GL_DRAW_FRAMEBUFFER_BINDING_EXT :: 0x8CA6;
    GL_READ_FRAMEBUFFER_BINDING_EXT :: 0x8CAA;

    // GL_EXT_framebuffer_multisample
    GL_RENDERBUFFER_SAMPLES_EXT :: 0x8CAB;
    GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT :: 0x8D56;
    GL_MAX_SAMPLES_EXT :: 0x8D57;

    // GL_EXT_framebuffer_multisample_blit_scaled
    GL_SCALED_RESOLVE_FASTEST_EXT :: 0x90BA;
    GL_SCALED_RESOLVE_NICEST_EXT :: 0x90BB;

    // GL_EXT_framebuffer_object
    GL_INVALID_FRAMEBUFFER_OPERATION_EXT :: 0x0506;
    GL_MAX_RENDERBUFFER_SIZE_EXT :: 0x84E8;
    GL_FRAMEBUFFER_BINDING_EXT :: 0x8CA6;
    GL_RENDERBUFFER_BINDING_EXT :: 0x8CA7;
    GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT :: 0x8CD0;
    GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT :: 0x8CD1;
    GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT :: 0x8CD2;
    GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT :: 0x8CD3;
    GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT :: 0x8CD4;
    GL_FRAMEBUFFER_COMPLETE_EXT :: 0x8CD5;
    GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT :: 0x8CD6;
    GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT :: 0x8CD7;
    GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT :: 0x8CD9;
    GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT :: 0x8CDA;
    GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT :: 0x8CDB;
    GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT :: 0x8CDC;
    GL_FRAMEBUFFER_UNSUPPORTED_EXT :: 0x8CDD;
    GL_MAX_COLOR_ATTACHMENTS_EXT :: 0x8CDF;
    GL_COLOR_ATTACHMENT0_EXT :: 0x8CE0;
    GL_COLOR_ATTACHMENT1_EXT :: 0x8CE1;
    GL_COLOR_ATTACHMENT2_EXT :: 0x8CE2;
    GL_COLOR_ATTACHMENT3_EXT :: 0x8CE3;
    GL_COLOR_ATTACHMENT4_EXT :: 0x8CE4;
    GL_COLOR_ATTACHMENT5_EXT :: 0x8CE5;
    GL_COLOR_ATTACHMENT6_EXT :: 0x8CE6;
    GL_COLOR_ATTACHMENT7_EXT :: 0x8CE7;
    GL_COLOR_ATTACHMENT8_EXT :: 0x8CE8;
    GL_COLOR_ATTACHMENT9_EXT :: 0x8CE9;
    GL_COLOR_ATTACHMENT10_EXT :: 0x8CEA;
    GL_COLOR_ATTACHMENT11_EXT :: 0x8CEB;
    GL_COLOR_ATTACHMENT12_EXT :: 0x8CEC;
    GL_COLOR_ATTACHMENT13_EXT :: 0x8CED;
    GL_COLOR_ATTACHMENT14_EXT :: 0x8CEE;
    GL_COLOR_ATTACHMENT15_EXT :: 0x8CEF;
    GL_DEPTH_ATTACHMENT_EXT :: 0x8D00;
    GL_STENCIL_ATTACHMENT_EXT :: 0x8D20;
    GL_FRAMEBUFFER_EXT :: 0x8D40;
    GL_RENDERBUFFER_EXT :: 0x8D41;
    GL_RENDERBUFFER_WIDTH_EXT :: 0x8D42;
    GL_RENDERBUFFER_HEIGHT_EXT :: 0x8D43;
    GL_RENDERBUFFER_INTERNAL_FORMAT_EXT :: 0x8D44;
    GL_STENCIL_INDEX1_EXT :: 0x8D46;
    GL_STENCIL_INDEX4_EXT :: 0x8D47;
    GL_STENCIL_INDEX8_EXT :: 0x8D48;
    GL_STENCIL_INDEX16_EXT :: 0x8D49;
    GL_RENDERBUFFER_RED_SIZE_EXT :: 0x8D50;
    GL_RENDERBUFFER_GREEN_SIZE_EXT :: 0x8D51;
    GL_RENDERBUFFER_BLUE_SIZE_EXT :: 0x8D52;
    GL_RENDERBUFFER_ALPHA_SIZE_EXT :: 0x8D53;
    GL_RENDERBUFFER_DEPTH_SIZE_EXT :: 0x8D54;
    GL_RENDERBUFFER_STENCIL_SIZE_EXT :: 0x8D55;

    // GL_EXT_framebuffer_sRGB
    GL_FRAMEBUFFER_SRGB_EXT :: 0x8DB9;
    GL_FRAMEBUFFER_SRGB_CAPABLE_EXT :: 0x8DBA;

    // GL_EXT_geometry_shader4
    GL_GEOMETRY_SHADER_EXT :: 0x8DD9;
    GL_GEOMETRY_VERTICES_OUT_EXT :: 0x8DDA;
    GL_GEOMETRY_INPUT_TYPE_EXT :: 0x8DDB;
    GL_GEOMETRY_OUTPUT_TYPE_EXT :: 0x8DDC;
    GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT :: 0x8C29;
    GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT :: 0x8DDD;
    GL_MAX_VERTEX_VARYING_COMPONENTS_EXT :: 0x8DDE;
    GL_MAX_VARYING_COMPONENTS_EXT :: 0x8B4B;
    GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT :: 0x8DDF;
    GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT :: 0x8DE0;
    GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT :: 0x8DE1;
    GL_LINES_ADJACENCY_EXT :: 0x000A;
    GL_LINE_STRIP_ADJACENCY_EXT :: 0x000B;
    GL_TRIANGLES_ADJACENCY_EXT :: 0x000C;
    GL_TRIANGLE_STRIP_ADJACENCY_EXT :: 0x000D;
    GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT :: 0x8DA8;
    GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT :: 0x8DA9;
    GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT :: 0x8DA7;
    GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT :: 0x8CD4;
    GL_PROGRAM_POINT_SIZE_EXT :: 0x8642;

    // GL_EXT_gpu_program_parameters

    // GL_EXT_gpu_shader4
    GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT :: 0x88FD;
    GL_SAMPLER_1D_ARRAY_EXT :: 0x8DC0;
    GL_SAMPLER_2D_ARRAY_EXT :: 0x8DC1;
    GL_SAMPLER_BUFFER_EXT :: 0x8DC2;
    GL_SAMPLER_1D_ARRAY_SHADOW_EXT :: 0x8DC3;
    GL_SAMPLER_2D_ARRAY_SHADOW_EXT :: 0x8DC4;
    GL_SAMPLER_CUBE_SHADOW_EXT :: 0x8DC5;
    GL_UNSIGNED_INT_VEC2_EXT :: 0x8DC6;
    GL_UNSIGNED_INT_VEC3_EXT :: 0x8DC7;
    GL_UNSIGNED_INT_VEC4_EXT :: 0x8DC8;
    GL_INT_SAMPLER_1D_EXT :: 0x8DC9;
    GL_INT_SAMPLER_2D_EXT :: 0x8DCA;
    GL_INT_SAMPLER_3D_EXT :: 0x8DCB;
    GL_INT_SAMPLER_CUBE_EXT :: 0x8DCC;
    GL_INT_SAMPLER_2D_RECT_EXT :: 0x8DCD;
    GL_INT_SAMPLER_1D_ARRAY_EXT :: 0x8DCE;
    GL_INT_SAMPLER_2D_ARRAY_EXT :: 0x8DCF;
    GL_INT_SAMPLER_BUFFER_EXT :: 0x8DD0;
    GL_UNSIGNED_INT_SAMPLER_1D_EXT :: 0x8DD1;
    GL_UNSIGNED_INT_SAMPLER_2D_EXT :: 0x8DD2;
    GL_UNSIGNED_INT_SAMPLER_3D_EXT :: 0x8DD3;
    GL_UNSIGNED_INT_SAMPLER_CUBE_EXT :: 0x8DD4;
    GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT :: 0x8DD5;
    GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT :: 0x8DD6;
    GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT :: 0x8DD7;
    GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT :: 0x8DD8;
    GL_MIN_PROGRAM_TEXEL_OFFSET_EXT :: 0x8904;
    GL_MAX_PROGRAM_TEXEL_OFFSET_EXT :: 0x8905;

    // GL_EXT_histogram
    GL_HISTOGRAM_EXT :: 0x8024;
    GL_PROXY_HISTOGRAM_EXT :: 0x8025;
    GL_HISTOGRAM_WIDTH_EXT :: 0x8026;
    GL_HISTOGRAM_FORMAT_EXT :: 0x8027;
    GL_HISTOGRAM_RED_SIZE_EXT :: 0x8028;
    GL_HISTOGRAM_GREEN_SIZE_EXT :: 0x8029;
    GL_HISTOGRAM_BLUE_SIZE_EXT :: 0x802A;
    GL_HISTOGRAM_ALPHA_SIZE_EXT :: 0x802B;
    GL_HISTOGRAM_LUMINANCE_SIZE_EXT :: 0x802C;
    GL_HISTOGRAM_SINK_EXT :: 0x802D;
    GL_MINMAX_EXT :: 0x802E;
    GL_MINMAX_FORMAT_EXT :: 0x802F;
    GL_MINMAX_SINK_EXT :: 0x8030;
    GL_TABLE_TOO_LARGE_EXT :: 0x8031;

    // GL_EXT_index_array_formats
    GL_IUI_V2F_EXT :: 0x81AD;
    GL_IUI_V3F_EXT :: 0x81AE;
    GL_IUI_N3F_V2F_EXT :: 0x81AF;
    GL_IUI_N3F_V3F_EXT :: 0x81B0;
    GL_T2F_IUI_V2F_EXT :: 0x81B1;
    GL_T2F_IUI_V3F_EXT :: 0x81B2;
    GL_T2F_IUI_N3F_V2F_EXT :: 0x81B3;
    GL_T2F_IUI_N3F_V3F_EXT :: 0x81B4;

    // GL_EXT_index_func
    GL_INDEX_TEST_EXT :: 0x81B5;
    GL_INDEX_TEST_FUNC_EXT :: 0x81B6;
    GL_INDEX_TEST_REF_EXT :: 0x81B7;

    // GL_EXT_index_material
    GL_INDEX_MATERIAL_EXT :: 0x81B8;
    GL_INDEX_MATERIAL_PARAMETER_EXT :: 0x81B9;
    GL_INDEX_MATERIAL_FACE_EXT :: 0x81BA;

    // GL_EXT_index_texture

    // GL_EXT_light_texture
    GL_FRAGMENT_MATERIAL_EXT :: 0x8349;
    GL_FRAGMENT_NORMAL_EXT :: 0x834A;
    GL_FRAGMENT_COLOR_EXT :: 0x834C;
    GL_ATTENUATION_EXT :: 0x834D;
    GL_SHADOW_ATTENUATION_EXT :: 0x834E;
    GL_TEXTURE_APPLICATION_MODE_EXT :: 0x834F;
    GL_TEXTURE_LIGHT_EXT :: 0x8350;
    GL_TEXTURE_MATERIAL_FACE_EXT :: 0x8351;
    GL_TEXTURE_MATERIAL_PARAMETER_EXT :: 0x8352;
    // GL_FRAGMENT_DEPTH_EXT :: 0x8452;

    // GL_EXT_memory_object
    GL_TEXTURE_TILING_EXT :: 0x9580;
    GL_DEDICATED_MEMORY_OBJECT_EXT :: 0x9581;
    GL_PROTECTED_MEMORY_OBJECT_EXT :: 0x959B;
    GL_NUM_TILING_TYPES_EXT :: 0x9582;
    GL_TILING_TYPES_EXT :: 0x9583;
    GL_OPTIMAL_TILING_EXT :: 0x9584;
    GL_LINEAR_TILING_EXT :: 0x9585;
    GL_NUM_DEVICE_UUIDS_EXT :: 0x9596;
    GL_DEVICE_UUID_EXT :: 0x9597;
    GL_DRIVER_UUID_EXT :: 0x9598;
    GL_UUID_SIZE_EXT :: 16;

    // GL_EXT_memory_object_fd
    GL_HANDLE_TYPE_OPAQUE_FD_EXT :: 0x9586;

    // GL_EXT_memory_object_win32
    GL_HANDLE_TYPE_OPAQUE_WIN32_EXT :: 0x9587;
    GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT :: 0x9588;
    GL_DEVICE_LUID_EXT :: 0x9599;
    GL_DEVICE_NODE_MASK_EXT :: 0x959A;
    GL_LUID_SIZE_EXT :: 8;
    GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT :: 0x9589;
    GL_HANDLE_TYPE_D3D12_RESOURCE_EXT :: 0x958A;
    GL_HANDLE_TYPE_D3D11_IMAGE_EXT :: 0x958B;
    GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT :: 0x958C;

    // GL_EXT_misc_attribute

    // GL_EXT_multi_draw_arrays

    // GL_EXT_multisample
    GL_MULTISAMPLE_EXT :: 0x809D;
    GL_SAMPLE_ALPHA_TO_MASK_EXT :: 0x809E;
    GL_SAMPLE_ALPHA_TO_ONE_EXT :: 0x809F;
    GL_SAMPLE_MASK_EXT :: 0x80A0;
    GL_1PASS_EXT :: 0x80A1;
    GL_2PASS_0_EXT :: 0x80A2;
    GL_2PASS_1_EXT :: 0x80A3;
    GL_4PASS_0_EXT :: 0x80A4;
    GL_4PASS_1_EXT :: 0x80A5;
    GL_4PASS_2_EXT :: 0x80A6;
    GL_4PASS_3_EXT :: 0x80A7;
    GL_SAMPLE_BUFFERS_EXT :: 0x80A8;
    GL_SAMPLES_EXT :: 0x80A9;
    GL_SAMPLE_MASK_VALUE_EXT :: 0x80AA;
    GL_SAMPLE_MASK_INVERT_EXT :: 0x80AB;
    GL_SAMPLE_PATTERN_EXT :: 0x80AC;
    GL_MULTISAMPLE_BIT_EXT :: 0x20000000;

    // GL_EXT_packed_depth_stencil
    GL_DEPTH_STENCIL_EXT :: 0x84F9;
    GL_UNSIGNED_INT_24_8_EXT :: 0x84FA;
    GL_DEPTH24_STENCIL8_EXT :: 0x88F0;
    GL_TEXTURE_STENCIL_SIZE_EXT :: 0x88F1;

    // GL_EXT_packed_float
    GL_R11F_G11F_B10F_EXT :: 0x8C3A;
    GL_UNSIGNED_INT_10F_11F_11F_REV_EXT :: 0x8C3B;
    GL_RGBA_SIGNED_COMPONENTS_EXT :: 0x8C3C;

    // GL_EXT_packed_pixels
    GL_UNSIGNED_BYTE_3_3_2_EXT :: 0x8032;
    GL_UNSIGNED_SHORT_4_4_4_4_EXT :: 0x8033;
    GL_UNSIGNED_SHORT_5_5_5_1_EXT :: 0x8034;
    GL_UNSIGNED_INT_8_8_8_8_EXT :: 0x8035;
    GL_UNSIGNED_INT_10_10_10_2_EXT :: 0x8036;

    // GL_EXT_paletted_texture
    GL_COLOR_INDEX1_EXT :: 0x80E2;
    GL_COLOR_INDEX2_EXT :: 0x80E3;
    GL_COLOR_INDEX4_EXT :: 0x80E4;
    GL_COLOR_INDEX8_EXT :: 0x80E5;
    GL_COLOR_INDEX12_EXT :: 0x80E6;
    GL_COLOR_INDEX16_EXT :: 0x80E7;
    GL_TEXTURE_INDEX_SIZE_EXT :: 0x80ED;

    // GL_EXT_pixel_buffer_object
    GL_PIXEL_PACK_BUFFER_EXT :: 0x88EB;
    GL_PIXEL_UNPACK_BUFFER_EXT :: 0x88EC;
    GL_PIXEL_PACK_BUFFER_BINDING_EXT :: 0x88ED;
    GL_PIXEL_UNPACK_BUFFER_BINDING_EXT :: 0x88EF;

    // GL_EXT_pixel_transform
    GL_PIXEL_TRANSFORM_2D_EXT :: 0x8330;
    GL_PIXEL_MAG_FILTER_EXT :: 0x8331;
    GL_PIXEL_MIN_FILTER_EXT :: 0x8332;
    GL_PIXEL_CUBIC_WEIGHT_EXT :: 0x8333;
    GL_CUBIC_EXT :: 0x8334;
    GL_AVERAGE_EXT :: 0x8335;
    GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT :: 0x8336;
    GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT :: 0x8337;
    GL_PIXEL_TRANSFORM_2D_MATRIX_EXT :: 0x8338;

    // GL_EXT_pixel_transform_color_table

    // GL_EXT_point_parameters
    GL_POINT_SIZE_MIN_EXT :: 0x8126;
    GL_POINT_SIZE_MAX_EXT :: 0x8127;
    GL_POINT_FADE_THRESHOLD_SIZE_EXT :: 0x8128;
    GL_DISTANCE_ATTENUATION_EXT :: 0x8129;

    // GL_EXT_polygon_offset
    GL_POLYGON_OFFSET_EXT :: 0x8037;
    GL_POLYGON_OFFSET_FACTOR_EXT :: 0x8038;
    GL_POLYGON_OFFSET_BIAS_EXT :: 0x8039;

    // GL_EXT_polygon_offset_clamp
    GL_POLYGON_OFFSET_CLAMP_EXT :: 0x8E1B;

    // GL_EXT_post_depth_coverage

    // GL_EXT_provoking_vertex
    GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT :: 0x8E4C;
    GL_FIRST_VERTEX_CONVENTION_EXT :: 0x8E4D;
    GL_LAST_VERTEX_CONVENTION_EXT :: 0x8E4E;
    GL_PROVOKING_VERTEX_EXT :: 0x8E4F;

    // GL_EXT_raster_multisample
    GL_RASTER_MULTISAMPLE_EXT :: 0x9327;
    GL_RASTER_SAMPLES_EXT :: 0x9328;
    GL_MAX_RASTER_SAMPLES_EXT :: 0x9329;
    GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT :: 0x932A;
    GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT :: 0x932B;
    GL_EFFECTIVE_RASTER_SAMPLES_EXT :: 0x932C;

    // GL_EXT_rescale_normal
    GL_RESCALE_NORMAL_EXT :: 0x803A;

    // GL_EXT_secondary_color
    GL_COLOR_SUM_EXT :: 0x8458;
    GL_CURRENT_SECONDARY_COLOR_EXT :: 0x8459;
    GL_SECONDARY_COLOR_ARRAY_SIZE_EXT :: 0x845A;
    GL_SECONDARY_COLOR_ARRAY_TYPE_EXT :: 0x845B;
    GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT :: 0x845C;
    GL_SECONDARY_COLOR_ARRAY_POINTER_EXT :: 0x845D;
    GL_SECONDARY_COLOR_ARRAY_EXT :: 0x845E;

    // GL_EXT_semaphore
    // GL_NUM_DEVICE_UUIDS_EXT :: 0x9596;
    // GL_DEVICE_UUID_EXT :: 0x9597;
    // GL_DRIVER_UUID_EXT :: 0x9598;
    // GL_UUID_SIZE_EXT :: 16;
    GL_LAYOUT_GENERAL_EXT :: 0x958D;
    GL_LAYOUT_COLOR_ATTACHMENT_EXT :: 0x958E;
    GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT :: 0x958F;
    GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT :: 0x9590;
    GL_LAYOUT_SHADER_READ_ONLY_EXT :: 0x9591;
    GL_LAYOUT_TRANSFER_SRC_EXT :: 0x9592;
    GL_LAYOUT_TRANSFER_DST_EXT :: 0x9593;
    GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT :: 0x9530;
    GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT :: 0x9531;

    // GL_EXT_semaphore_fd
    // GL_HANDLE_TYPE_OPAQUE_FD_EXT :: 0x9586;

    // GL_EXT_semaphore_win32
    // GL_HANDLE_TYPE_OPAQUE_WIN32_EXT :: 0x9587;
    // GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT :: 0x9588;
    // GL_DEVICE_LUID_EXT :: 0x9599;
    // GL_DEVICE_NODE_MASK_EXT :: 0x959A;
    // GL_LUID_SIZE_EXT :: 8;
    GL_HANDLE_TYPE_D3D12_FENCE_EXT :: 0x9594;
    GL_D3D12_FENCE_VALUE_EXT :: 0x9595;

    // GL_EXT_separate_shader_objects
    GL_ACTIVE_PROGRAM_EXT :: 0x8B8D;
    GL_VERTEX_SHADER_BIT_EXT :: 0x00000001;
    GL_FRAGMENT_SHADER_BIT_EXT :: 0x00000002;
    GL_ALL_SHADER_BITS_EXT :: 0xFFFFFFFF;
    GL_PROGRAM_SEPARABLE_EXT :: 0x8258;
    // GL_ACTIVE_PROGRAM_EXT :: 0x8B8D;
    GL_PROGRAM_PIPELINE_BINDING_EXT :: 0x825A;

    // GL_EXT_separate_specular_color
    GL_LIGHT_MODEL_COLOR_CONTROL_EXT :: 0x81F8;
    GL_SINGLE_COLOR_EXT :: 0x81F9;
    GL_SEPARATE_SPECULAR_COLOR_EXT :: 0x81FA;

    // GL_EXT_shader_framebuffer_fetch
    GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT :: 0x8A52;

    // GL_EXT_shader_framebuffer_fetch_non_coherent
    // GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT :: 0x8A52;

    // GL_EXT_shader_image_load_formatted

    // GL_EXT_shader_image_load_store
    GL_MAX_IMAGE_UNITS_EXT :: 0x8F38;
    GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT :: 0x8F39;
    GL_IMAGE_BINDING_NAME_EXT :: 0x8F3A;
    GL_IMAGE_BINDING_LEVEL_EXT :: 0x8F3B;
    GL_IMAGE_BINDING_LAYERED_EXT :: 0x8F3C;
    GL_IMAGE_BINDING_LAYER_EXT :: 0x8F3D;
    GL_IMAGE_BINDING_ACCESS_EXT :: 0x8F3E;
    GL_IMAGE_1D_EXT :: 0x904C;
    GL_IMAGE_2D_EXT :: 0x904D;
    GL_IMAGE_3D_EXT :: 0x904E;
    GL_IMAGE_2D_RECT_EXT :: 0x904F;
    GL_IMAGE_CUBE_EXT :: 0x9050;
    GL_IMAGE_BUFFER_EXT :: 0x9051;
    GL_IMAGE_1D_ARRAY_EXT :: 0x9052;
    GL_IMAGE_2D_ARRAY_EXT :: 0x9053;
    GL_IMAGE_CUBE_MAP_ARRAY_EXT :: 0x9054;
    GL_IMAGE_2D_MULTISAMPLE_EXT :: 0x9055;
    GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT :: 0x9056;
    GL_INT_IMAGE_1D_EXT :: 0x9057;
    GL_INT_IMAGE_2D_EXT :: 0x9058;
    GL_INT_IMAGE_3D_EXT :: 0x9059;
    GL_INT_IMAGE_2D_RECT_EXT :: 0x905A;
    GL_INT_IMAGE_CUBE_EXT :: 0x905B;
    GL_INT_IMAGE_BUFFER_EXT :: 0x905C;
    GL_INT_IMAGE_1D_ARRAY_EXT :: 0x905D;
    GL_INT_IMAGE_2D_ARRAY_EXT :: 0x905E;
    GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT :: 0x905F;
    GL_INT_IMAGE_2D_MULTISAMPLE_EXT :: 0x9060;
    GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT :: 0x9061;
    GL_UNSIGNED_INT_IMAGE_1D_EXT :: 0x9062;
    GL_UNSIGNED_INT_IMAGE_2D_EXT :: 0x9063;
    GL_UNSIGNED_INT_IMAGE_3D_EXT :: 0x9064;
    GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT :: 0x9065;
    GL_UNSIGNED_INT_IMAGE_CUBE_EXT :: 0x9066;
    GL_UNSIGNED_INT_IMAGE_BUFFER_EXT :: 0x9067;
    GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT :: 0x9068;
    GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT :: 0x9069;
    GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT :: 0x906A;
    GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT :: 0x906B;
    GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT :: 0x906C;
    GL_MAX_IMAGE_SAMPLES_EXT :: 0x906D;
    GL_IMAGE_BINDING_FORMAT_EXT :: 0x906E;
    GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT :: 0x00000001;
    GL_ELEMENT_ARRAY_BARRIER_BIT_EXT :: 0x00000002;
    GL_UNIFORM_BARRIER_BIT_EXT :: 0x00000004;
    GL_TEXTURE_FETCH_BARRIER_BIT_EXT :: 0x00000008;
    GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT :: 0x00000020;
    GL_COMMAND_BARRIER_BIT_EXT :: 0x00000040;
    GL_PIXEL_BUFFER_BARRIER_BIT_EXT :: 0x00000080;
    GL_TEXTURE_UPDATE_BARRIER_BIT_EXT :: 0x00000100;
    GL_BUFFER_UPDATE_BARRIER_BIT_EXT :: 0x00000200;
    GL_FRAMEBUFFER_BARRIER_BIT_EXT :: 0x00000400;
    GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT :: 0x00000800;
    GL_ATOMIC_COUNTER_BARRIER_BIT_EXT :: 0x00001000;
    GL_ALL_BARRIER_BITS_EXT :: 0xFFFFFFFF;

    // GL_EXT_shader_integer_mix

    // GL_EXT_shadow_funcs

    // GL_EXT_shared_texture_palette
    GL_SHARED_TEXTURE_PALETTE_EXT :: 0x81FB;

    // GL_EXT_sparse_texture2

    // GL_EXT_stencil_clear_tag
    GL_STENCIL_TAG_BITS_EXT :: 0x88F2;
    GL_STENCIL_CLEAR_TAG_VALUE_EXT :: 0x88F3;

    // GL_EXT_stencil_two_side
    GL_STENCIL_TEST_TWO_SIDE_EXT :: 0x8910;
    GL_ACTIVE_STENCIL_FACE_EXT :: 0x8911;

    // GL_EXT_stencil_wrap
    GL_INCR_WRAP_EXT :: 0x8507;
    GL_DECR_WRAP_EXT :: 0x8508;

    // GL_EXT_subtexture

    // GL_EXT_texture
    GL_ALPHA4_EXT :: 0x803B;
    GL_ALPHA8_EXT :: 0x803C;
    GL_ALPHA12_EXT :: 0x803D;
    GL_ALPHA16_EXT :: 0x803E;
    GL_LUMINANCE4_EXT :: 0x803F;
    GL_LUMINANCE8_EXT :: 0x8040;
    GL_LUMINANCE12_EXT :: 0x8041;
    GL_LUMINANCE16_EXT :: 0x8042;
    GL_LUMINANCE4_ALPHA4_EXT :: 0x8043;
    GL_LUMINANCE6_ALPHA2_EXT :: 0x8044;
    GL_LUMINANCE8_ALPHA8_EXT :: 0x8045;
    GL_LUMINANCE12_ALPHA4_EXT :: 0x8046;
    GL_LUMINANCE12_ALPHA12_EXT :: 0x8047;
    GL_LUMINANCE16_ALPHA16_EXT :: 0x8048;
    GL_INTENSITY_EXT :: 0x8049;
    GL_INTENSITY4_EXT :: 0x804A;
    GL_INTENSITY8_EXT :: 0x804B;
    GL_INTENSITY12_EXT :: 0x804C;
    GL_INTENSITY16_EXT :: 0x804D;
    GL_RGB2_EXT :: 0x804E;
    GL_RGB4_EXT :: 0x804F;
    GL_RGB5_EXT :: 0x8050;
    GL_RGB8_EXT :: 0x8051;
    GL_RGB10_EXT :: 0x8052;
    GL_RGB12_EXT :: 0x8053;
    GL_RGB16_EXT :: 0x8054;
    GL_RGBA2_EXT :: 0x8055;
    GL_RGBA4_EXT :: 0x8056;
    GL_RGB5_A1_EXT :: 0x8057;
    GL_RGBA8_EXT :: 0x8058;
    GL_RGB10_A2_EXT :: 0x8059;
    GL_RGBA12_EXT :: 0x805A;
    GL_RGBA16_EXT :: 0x805B;
    GL_TEXTURE_RED_SIZE_EXT :: 0x805C;
    GL_TEXTURE_GREEN_SIZE_EXT :: 0x805D;
    GL_TEXTURE_BLUE_SIZE_EXT :: 0x805E;
    GL_TEXTURE_ALPHA_SIZE_EXT :: 0x805F;
    GL_TEXTURE_LUMINANCE_SIZE_EXT :: 0x8060;
    GL_TEXTURE_INTENSITY_SIZE_EXT :: 0x8061;
    GL_REPLACE_EXT :: 0x8062;
    GL_PROXY_TEXTURE_1D_EXT :: 0x8063;
    GL_PROXY_TEXTURE_2D_EXT :: 0x8064;
    GL_TEXTURE_TOO_LARGE_EXT :: 0x8065;

    // GL_EXT_texture3D
    GL_PACK_SKIP_IMAGES_EXT :: 0x806B;
    GL_PACK_IMAGE_HEIGHT_EXT :: 0x806C;
    GL_UNPACK_SKIP_IMAGES_EXT :: 0x806D;
    GL_UNPACK_IMAGE_HEIGHT_EXT :: 0x806E;
    GL_TEXTURE_3D_EXT :: 0x806F;
    GL_PROXY_TEXTURE_3D_EXT :: 0x8070;
    GL_TEXTURE_DEPTH_EXT :: 0x8071;
    GL_TEXTURE_WRAP_R_EXT :: 0x8072;
    GL_MAX_3D_TEXTURE_SIZE_EXT :: 0x8073;

    // GL_EXT_texture_array
    GL_TEXTURE_1D_ARRAY_EXT :: 0x8C18;
    GL_PROXY_TEXTURE_1D_ARRAY_EXT :: 0x8C19;
    GL_TEXTURE_2D_ARRAY_EXT :: 0x8C1A;
    GL_PROXY_TEXTURE_2D_ARRAY_EXT :: 0x8C1B;
    GL_TEXTURE_BINDING_1D_ARRAY_EXT :: 0x8C1C;
    GL_TEXTURE_BINDING_2D_ARRAY_EXT :: 0x8C1D;
    GL_MAX_ARRAY_TEXTURE_LAYERS_EXT :: 0x88FF;
    GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT :: 0x884E;
    // GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT :: 0x8CD4;

    // GL_EXT_texture_buffer_object
    GL_TEXTURE_BUFFER_EXT :: 0x8C2A;
    GL_MAX_TEXTURE_BUFFER_SIZE_EXT :: 0x8C2B;
    GL_TEXTURE_BINDING_BUFFER_EXT :: 0x8C2C;
    GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT :: 0x8C2D;
    GL_TEXTURE_BUFFER_FORMAT_EXT :: 0x8C2E;

    // GL_EXT_texture_compression_latc
    GL_COMPRESSED_LUMINANCE_LATC1_EXT :: 0x8C70;
    GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT :: 0x8C71;
    GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT :: 0x8C72;
    GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT :: 0x8C73;

    // GL_EXT_texture_compression_rgtc
    GL_COMPRESSED_RED_RGTC1_EXT :: 0x8DBB;
    GL_COMPRESSED_SIGNED_RED_RGTC1_EXT :: 0x8DBC;
    GL_COMPRESSED_RED_GREEN_RGTC2_EXT :: 0x8DBD;
    GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT :: 0x8DBE;

    // GL_EXT_texture_compression_s3tc
    GL_COMPRESSED_RGB_S3TC_DXT1_EXT :: 0x83F0;
    GL_COMPRESSED_RGBA_S3TC_DXT1_EXT :: 0x83F1;
    GL_COMPRESSED_RGBA_S3TC_DXT3_EXT :: 0x83F2;
    GL_COMPRESSED_RGBA_S3TC_DXT5_EXT :: 0x83F3;

    // GL_EXT_texture_cube_map
    GL_NORMAL_MAP_EXT :: 0x8511;
    GL_REFLECTION_MAP_EXT :: 0x8512;
    GL_TEXTURE_CUBE_MAP_EXT :: 0x8513;
    GL_TEXTURE_BINDING_CUBE_MAP_EXT :: 0x8514;
    GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT :: 0x8515;
    GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT :: 0x8516;
    GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT :: 0x8517;
    GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT :: 0x8518;
    GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT :: 0x8519;
    GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT :: 0x851A;
    GL_PROXY_TEXTURE_CUBE_MAP_EXT :: 0x851B;
    GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT :: 0x851C;

    // GL_EXT_texture_env_add

    // GL_EXT_texture_env_combine
    GL_COMBINE_EXT :: 0x8570;
    GL_COMBINE_RGB_EXT :: 0x8571;
    GL_COMBINE_ALPHA_EXT :: 0x8572;
    GL_RGB_SCALE_EXT :: 0x8573;
    GL_ADD_SIGNED_EXT :: 0x8574;
    GL_INTERPOLATE_EXT :: 0x8575;
    GL_CONSTANT_EXT :: 0x8576;
    GL_PRIMARY_COLOR_EXT :: 0x8577;
    GL_PREVIOUS_EXT :: 0x8578;
    GL_SOURCE0_RGB_EXT :: 0x8580;
    GL_SOURCE1_RGB_EXT :: 0x8581;
    GL_SOURCE2_RGB_EXT :: 0x8582;
    GL_SOURCE0_ALPHA_EXT :: 0x8588;
    GL_SOURCE1_ALPHA_EXT :: 0x8589;
    GL_SOURCE2_ALPHA_EXT :: 0x858A;
    GL_OPERAND0_RGB_EXT :: 0x8590;
    GL_OPERAND1_RGB_EXT :: 0x8591;
    GL_OPERAND2_RGB_EXT :: 0x8592;
    GL_OPERAND0_ALPHA_EXT :: 0x8598;
    GL_OPERAND1_ALPHA_EXT :: 0x8599;
    GL_OPERAND2_ALPHA_EXT :: 0x859A;

    // GL_EXT_texture_env_dot3
    GL_DOT3_RGB_EXT :: 0x8740;
    GL_DOT3_RGBA_EXT :: 0x8741;

    // GL_EXT_texture_filter_anisotropic
    GL_TEXTURE_MAX_ANISOTROPY_EXT :: 0x84FE;
    GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT :: 0x84FF;

    // GL_EXT_texture_filter_minmax
    GL_TEXTURE_REDUCTION_MODE_EXT :: 0x9366;
    GL_WEIGHTED_AVERAGE_EXT :: 0x9367;

    // GL_EXT_texture_integer
    GL_RGBA32UI_EXT :: 0x8D70;
    GL_RGB32UI_EXT :: 0x8D71;
    GL_ALPHA32UI_EXT :: 0x8D72;
    GL_INTENSITY32UI_EXT :: 0x8D73;
    GL_LUMINANCE32UI_EXT :: 0x8D74;
    GL_LUMINANCE_ALPHA32UI_EXT :: 0x8D75;
    GL_RGBA16UI_EXT :: 0x8D76;
    GL_RGB16UI_EXT :: 0x8D77;
    GL_ALPHA16UI_EXT :: 0x8D78;
    GL_INTENSITY16UI_EXT :: 0x8D79;
    GL_LUMINANCE16UI_EXT :: 0x8D7A;
    GL_LUMINANCE_ALPHA16UI_EXT :: 0x8D7B;
    GL_RGBA8UI_EXT :: 0x8D7C;
    GL_RGB8UI_EXT :: 0x8D7D;
    GL_ALPHA8UI_EXT :: 0x8D7E;
    GL_INTENSITY8UI_EXT :: 0x8D7F;
    GL_LUMINANCE8UI_EXT :: 0x8D80;
    GL_LUMINANCE_ALPHA8UI_EXT :: 0x8D81;
    GL_RGBA32I_EXT :: 0x8D82;
    GL_RGB32I_EXT :: 0x8D83;
    GL_ALPHA32I_EXT :: 0x8D84;
    GL_INTENSITY32I_EXT :: 0x8D85;
    GL_LUMINANCE32I_EXT :: 0x8D86;
    GL_LUMINANCE_ALPHA32I_EXT :: 0x8D87;
    GL_RGBA16I_EXT :: 0x8D88;
    GL_RGB16I_EXT :: 0x8D89;
    GL_ALPHA16I_EXT :: 0x8D8A;
    GL_INTENSITY16I_EXT :: 0x8D8B;
    GL_LUMINANCE16I_EXT :: 0x8D8C;
    GL_LUMINANCE_ALPHA16I_EXT :: 0x8D8D;
    GL_RGBA8I_EXT :: 0x8D8E;
    GL_RGB8I_EXT :: 0x8D8F;
    GL_ALPHA8I_EXT :: 0x8D90;
    GL_INTENSITY8I_EXT :: 0x8D91;
    GL_LUMINANCE8I_EXT :: 0x8D92;
    GL_LUMINANCE_ALPHA8I_EXT :: 0x8D93;
    GL_RED_INTEGER_EXT :: 0x8D94;
    GL_GREEN_INTEGER_EXT :: 0x8D95;
    GL_BLUE_INTEGER_EXT :: 0x8D96;
    GL_ALPHA_INTEGER_EXT :: 0x8D97;
    GL_RGB_INTEGER_EXT :: 0x8D98;
    GL_RGBA_INTEGER_EXT :: 0x8D99;
    GL_BGR_INTEGER_EXT :: 0x8D9A;
    GL_BGRA_INTEGER_EXT :: 0x8D9B;
    GL_LUMINANCE_INTEGER_EXT :: 0x8D9C;
    GL_LUMINANCE_ALPHA_INTEGER_EXT :: 0x8D9D;
    GL_RGBA_INTEGER_MODE_EXT :: 0x8D9E;

    // GL_EXT_texture_lod_bias
    GL_MAX_TEXTURE_LOD_BIAS_EXT :: 0x84FD;
    GL_TEXTURE_FILTER_CONTROL_EXT :: 0x8500;
    GL_TEXTURE_LOD_BIAS_EXT :: 0x8501;

    // GL_EXT_texture_mirror_clamp
    GL_MIRROR_CLAMP_EXT :: 0x8742;
    GL_MIRROR_CLAMP_TO_EDGE_EXT :: 0x8743;
    GL_MIRROR_CLAMP_TO_BORDER_EXT :: 0x8912;

    // GL_EXT_texture_object
    GL_TEXTURE_PRIORITY_EXT :: 0x8066;
    GL_TEXTURE_RESIDENT_EXT :: 0x8067;
    GL_TEXTURE_1D_BINDING_EXT :: 0x8068;
    GL_TEXTURE_2D_BINDING_EXT :: 0x8069;
    GL_TEXTURE_3D_BINDING_EXT :: 0x806A;

    // GL_EXT_texture_perturb_normal
    GL_PERTURB_EXT :: 0x85AE;
    GL_TEXTURE_NORMAL_EXT :: 0x85AF;

    // GL_EXT_texture_sRGB
    GL_SRGB_EXT :: 0x8C40;
    GL_SRGB8_EXT :: 0x8C41;
    GL_SRGB_ALPHA_EXT :: 0x8C42;
    GL_SRGB8_ALPHA8_EXT :: 0x8C43;
    GL_SLUMINANCE_ALPHA_EXT :: 0x8C44;
    GL_SLUMINANCE8_ALPHA8_EXT :: 0x8C45;
    GL_SLUMINANCE_EXT :: 0x8C46;
    GL_SLUMINANCE8_EXT :: 0x8C47;
    GL_COMPRESSED_SRGB_EXT :: 0x8C48;
    GL_COMPRESSED_SRGB_ALPHA_EXT :: 0x8C49;
    GL_COMPRESSED_SLUMINANCE_EXT :: 0x8C4A;
    GL_COMPRESSED_SLUMINANCE_ALPHA_EXT :: 0x8C4B;
    GL_COMPRESSED_SRGB_S3TC_DXT1_EXT :: 0x8C4C;
    GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT :: 0x8C4D;
    GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT :: 0x8C4E;
    GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT :: 0x8C4F;

    // GL_EXT_texture_sRGB_decode
    GL_TEXTURE_SRGB_DECODE_EXT :: 0x8A48;
    GL_DECODE_EXT :: 0x8A49;
    GL_SKIP_DECODE_EXT :: 0x8A4A;

    // GL_EXT_texture_shared_exponent
    GL_RGB9_E5_EXT :: 0x8C3D;
    GL_UNSIGNED_INT_5_9_9_9_REV_EXT :: 0x8C3E;
    GL_TEXTURE_SHARED_SIZE_EXT :: 0x8C3F;

    // GL_EXT_texture_snorm
    GL_ALPHA_SNORM :: 0x9010;
    GL_LUMINANCE_SNORM :: 0x9011;
    GL_LUMINANCE_ALPHA_SNORM :: 0x9012;
    GL_INTENSITY_SNORM :: 0x9013;
    GL_ALPHA8_SNORM :: 0x9014;
    GL_LUMINANCE8_SNORM :: 0x9015;
    GL_LUMINANCE8_ALPHA8_SNORM :: 0x9016;
    GL_INTENSITY8_SNORM :: 0x9017;
    GL_ALPHA16_SNORM :: 0x9018;
    GL_LUMINANCE16_SNORM :: 0x9019;
    GL_LUMINANCE16_ALPHA16_SNORM :: 0x901A;
    GL_INTENSITY16_SNORM :: 0x901B;
    GL_RED_SNORM :: 0x8F90;
    GL_RG_SNORM :: 0x8F91;
    GL_RGB_SNORM :: 0x8F92;
    GL_RGBA_SNORM :: 0x8F93;
    // GL_R8_SNORM :: 0x8F94;
    // GL_RG8_SNORM :: 0x8F95;
    // GL_RGB8_SNORM :: 0x8F96;
    // GL_RGBA8_SNORM :: 0x8F97;
    // GL_R16_SNORM :: 0x8F98;
    // GL_RG16_SNORM :: 0x8F99;
    // GL_RGB16_SNORM :: 0x8F9A;
    // GL_RGBA16_SNORM :: 0x8F9B;
    // GL_SIGNED_NORMALIZED :: 0x8F9C;

    // GL_EXT_texture_swizzle
    GL_TEXTURE_SWIZZLE_R_EXT :: 0x8E42;
    GL_TEXTURE_SWIZZLE_G_EXT :: 0x8E43;
    GL_TEXTURE_SWIZZLE_B_EXT :: 0x8E44;
    GL_TEXTURE_SWIZZLE_A_EXT :: 0x8E45;
    GL_TEXTURE_SWIZZLE_RGBA_EXT :: 0x8E46;

    // GL_EXT_timer_query
    GL_TIME_ELAPSED_EXT :: 0x88BF;

    // GL_EXT_transform_feedback
    GL_TRANSFORM_FEEDBACK_BUFFER_EXT :: 0x8C8E;
    GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT :: 0x8C84;
    GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT :: 0x8C85;
    GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT :: 0x8C8F;
    GL_INTERLEAVED_ATTRIBS_EXT :: 0x8C8C;
    GL_SEPARATE_ATTRIBS_EXT :: 0x8C8D;
    GL_PRIMITIVES_GENERATED_EXT :: 0x8C87;
    GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT :: 0x8C88;
    GL_RASTERIZER_DISCARD_EXT :: 0x8C89;
    GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT :: 0x8C8A;
    GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT :: 0x8C8B;
    GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT :: 0x8C80;
    GL_TRANSFORM_FEEDBACK_VARYINGS_EXT :: 0x8C83;
    GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT :: 0x8C7F;
    GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT :: 0x8C76;

    // GL_EXT_vertex_array
    GL_VERTEX_ARRAY_EXT :: 0x8074;
    GL_NORMAL_ARRAY_EXT :: 0x8075;
    GL_COLOR_ARRAY_EXT :: 0x8076;
    GL_INDEX_ARRAY_EXT :: 0x8077;
    GL_TEXTURE_COORD_ARRAY_EXT :: 0x8078;
    GL_EDGE_FLAG_ARRAY_EXT :: 0x8079;
    GL_VERTEX_ARRAY_SIZE_EXT :: 0x807A;
    GL_VERTEX_ARRAY_TYPE_EXT :: 0x807B;
    GL_VERTEX_ARRAY_STRIDE_EXT :: 0x807C;
    GL_VERTEX_ARRAY_COUNT_EXT :: 0x807D;
    GL_NORMAL_ARRAY_TYPE_EXT :: 0x807E;
    GL_NORMAL_ARRAY_STRIDE_EXT :: 0x807F;
    GL_NORMAL_ARRAY_COUNT_EXT :: 0x8080;
    GL_COLOR_ARRAY_SIZE_EXT :: 0x8081;
    GL_COLOR_ARRAY_TYPE_EXT :: 0x8082;
    GL_COLOR_ARRAY_STRIDE_EXT :: 0x8083;
    GL_COLOR_ARRAY_COUNT_EXT :: 0x8084;
    GL_INDEX_ARRAY_TYPE_EXT :: 0x8085;
    GL_INDEX_ARRAY_STRIDE_EXT :: 0x8086;
    GL_INDEX_ARRAY_COUNT_EXT :: 0x8087;
    GL_TEXTURE_COORD_ARRAY_SIZE_EXT :: 0x8088;
    GL_TEXTURE_COORD_ARRAY_TYPE_EXT :: 0x8089;
    GL_TEXTURE_COORD_ARRAY_STRIDE_EXT :: 0x808A;
    GL_TEXTURE_COORD_ARRAY_COUNT_EXT :: 0x808B;
    GL_EDGE_FLAG_ARRAY_STRIDE_EXT :: 0x808C;
    GL_EDGE_FLAG_ARRAY_COUNT_EXT :: 0x808D;
    GL_VERTEX_ARRAY_POINTER_EXT :: 0x808E;
    GL_NORMAL_ARRAY_POINTER_EXT :: 0x808F;
    GL_COLOR_ARRAY_POINTER_EXT :: 0x8090;
    GL_INDEX_ARRAY_POINTER_EXT :: 0x8091;
    GL_TEXTURE_COORD_ARRAY_POINTER_EXT :: 0x8092;
    GL_EDGE_FLAG_ARRAY_POINTER_EXT :: 0x8093;

    // GL_EXT_vertex_array_bgra
    // GL_BGRA :: 0x80E1;

    // GL_EXT_vertex_attrib_64bit
    // GL_DOUBLE :: 0x140A;
    GL_DOUBLE_VEC2_EXT :: 0x8FFC;
    GL_DOUBLE_VEC3_EXT :: 0x8FFD;
    GL_DOUBLE_VEC4_EXT :: 0x8FFE;
    GL_DOUBLE_MAT2_EXT :: 0x8F46;
    GL_DOUBLE_MAT3_EXT :: 0x8F47;
    GL_DOUBLE_MAT4_EXT :: 0x8F48;
    GL_DOUBLE_MAT2x3_EXT :: 0x8F49;
    GL_DOUBLE_MAT2x4_EXT :: 0x8F4A;
    GL_DOUBLE_MAT3x2_EXT :: 0x8F4B;
    GL_DOUBLE_MAT3x4_EXT :: 0x8F4C;
    GL_DOUBLE_MAT4x2_EXT :: 0x8F4D;
    GL_DOUBLE_MAT4x3_EXT :: 0x8F4E;

    // GL_EXT_vertex_shader
    GL_VERTEX_SHADER_EXT :: 0x8780;
    GL_VERTEX_SHADER_BINDING_EXT :: 0x8781;
    GL_OP_INDEX_EXT :: 0x8782;
    GL_OP_NEGATE_EXT :: 0x8783;
    GL_OP_DOT3_EXT :: 0x8784;
    GL_OP_DOT4_EXT :: 0x8785;
    GL_OP_MUL_EXT :: 0x8786;
    GL_OP_ADD_EXT :: 0x8787;
    GL_OP_MADD_EXT :: 0x8788;
    GL_OP_FRAC_EXT :: 0x8789;
    GL_OP_MAX_EXT :: 0x878A;
    GL_OP_MIN_EXT :: 0x878B;
    GL_OP_SET_GE_EXT :: 0x878C;
    GL_OP_SET_LT_EXT :: 0x878D;
    GL_OP_CLAMP_EXT :: 0x878E;
    GL_OP_FLOOR_EXT :: 0x878F;
    GL_OP_ROUND_EXT :: 0x8790;
    GL_OP_EXP_BASE_2_EXT :: 0x8791;
    GL_OP_LOG_BASE_2_EXT :: 0x8792;
    GL_OP_POWER_EXT :: 0x8793;
    GL_OP_RECIP_EXT :: 0x8794;
    GL_OP_RECIP_SQRT_EXT :: 0x8795;
    GL_OP_SUB_EXT :: 0x8796;
    GL_OP_CROSS_PRODUCT_EXT :: 0x8797;
    GL_OP_MULTIPLY_MATRIX_EXT :: 0x8798;
    GL_OP_MOV_EXT :: 0x8799;
    GL_OUTPUT_VERTEX_EXT :: 0x879A;
    GL_OUTPUT_COLOR0_EXT :: 0x879B;
    GL_OUTPUT_COLOR1_EXT :: 0x879C;
    GL_OUTPUT_TEXTURE_COORD0_EXT :: 0x879D;
    GL_OUTPUT_TEXTURE_COORD1_EXT :: 0x879E;
    GL_OUTPUT_TEXTURE_COORD2_EXT :: 0x879F;
    GL_OUTPUT_TEXTURE_COORD3_EXT :: 0x87A0;
    GL_OUTPUT_TEXTURE_COORD4_EXT :: 0x87A1;
    GL_OUTPUT_TEXTURE_COORD5_EXT :: 0x87A2;
    GL_OUTPUT_TEXTURE_COORD6_EXT :: 0x87A3;
    GL_OUTPUT_TEXTURE_COORD7_EXT :: 0x87A4;
    GL_OUTPUT_TEXTURE_COORD8_EXT :: 0x87A5;
    GL_OUTPUT_TEXTURE_COORD9_EXT :: 0x87A6;
    GL_OUTPUT_TEXTURE_COORD10_EXT :: 0x87A7;
    GL_OUTPUT_TEXTURE_COORD11_EXT :: 0x87A8;
    GL_OUTPUT_TEXTURE_COORD12_EXT :: 0x87A9;
    GL_OUTPUT_TEXTURE_COORD13_EXT :: 0x87AA;
    GL_OUTPUT_TEXTURE_COORD14_EXT :: 0x87AB;
    GL_OUTPUT_TEXTURE_COORD15_EXT :: 0x87AC;
    GL_OUTPUT_TEXTURE_COORD16_EXT :: 0x87AD;
    GL_OUTPUT_TEXTURE_COORD17_EXT :: 0x87AE;
    GL_OUTPUT_TEXTURE_COORD18_EXT :: 0x87AF;
    GL_OUTPUT_TEXTURE_COORD19_EXT :: 0x87B0;
    GL_OUTPUT_TEXTURE_COORD20_EXT :: 0x87B1;
    GL_OUTPUT_TEXTURE_COORD21_EXT :: 0x87B2;
    GL_OUTPUT_TEXTURE_COORD22_EXT :: 0x87B3;
    GL_OUTPUT_TEXTURE_COORD23_EXT :: 0x87B4;
    GL_OUTPUT_TEXTURE_COORD24_EXT :: 0x87B5;
    GL_OUTPUT_TEXTURE_COORD25_EXT :: 0x87B6;
    GL_OUTPUT_TEXTURE_COORD26_EXT :: 0x87B7;
    GL_OUTPUT_TEXTURE_COORD27_EXT :: 0x87B8;
    GL_OUTPUT_TEXTURE_COORD28_EXT :: 0x87B9;
    GL_OUTPUT_TEXTURE_COORD29_EXT :: 0x87BA;
    GL_OUTPUT_TEXTURE_COORD30_EXT :: 0x87BB;
    GL_OUTPUT_TEXTURE_COORD31_EXT :: 0x87BC;
    GL_OUTPUT_FOG_EXT :: 0x87BD;
    GL_SCALAR_EXT :: 0x87BE;
    GL_VECTOR_EXT :: 0x87BF;
    GL_MATRIX_EXT :: 0x87C0;
    GL_VARIANT_EXT :: 0x87C1;
    GL_INVARIANT_EXT :: 0x87C2;
    GL_LOCAL_CONSTANT_EXT :: 0x87C3;
    GL_LOCAL_EXT :: 0x87C4;
    GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT :: 0x87C5;
    GL_MAX_VERTEX_SHADER_VARIANTS_EXT :: 0x87C6;
    GL_MAX_VERTEX_SHADER_INVARIANTS_EXT :: 0x87C7;
    GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT :: 0x87C8;
    GL_MAX_VERTEX_SHADER_LOCALS_EXT :: 0x87C9;
    GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT :: 0x87CA;
    GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT :: 0x87CB;
    GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT :: 0x87CC;
    GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT :: 0x87CD;
    GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT :: 0x87CE;
    GL_VERTEX_SHADER_INSTRUCTIONS_EXT :: 0x87CF;
    GL_VERTEX_SHADER_VARIANTS_EXT :: 0x87D0;
    GL_VERTEX_SHADER_INVARIANTS_EXT :: 0x87D1;
    GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT :: 0x87D2;
    GL_VERTEX_SHADER_LOCALS_EXT :: 0x87D3;
    GL_VERTEX_SHADER_OPTIMIZED_EXT :: 0x87D4;
    GL_X_EXT :: 0x87D5;
    GL_Y_EXT :: 0x87D6;
    GL_Z_EXT :: 0x87D7;
    GL_W_EXT :: 0x87D8;
    GL_NEGATIVE_X_EXT :: 0x87D9;
    GL_NEGATIVE_Y_EXT :: 0x87DA;
    GL_NEGATIVE_Z_EXT :: 0x87DB;
    GL_NEGATIVE_W_EXT :: 0x87DC;
    GL_ZERO_EXT :: 0x87DD;
    GL_ONE_EXT :: 0x87DE;
    GL_NEGATIVE_ONE_EXT :: 0x87DF;
    GL_NORMALIZED_RANGE_EXT :: 0x87E0;
    GL_FULL_RANGE_EXT :: 0x87E1;
    GL_CURRENT_VERTEX_EXT :: 0x87E2;
    GL_MVP_MATRIX_EXT :: 0x87E3;
    GL_VARIANT_VALUE_EXT :: 0x87E4;
    GL_VARIANT_DATATYPE_EXT :: 0x87E5;
    GL_VARIANT_ARRAY_STRIDE_EXT :: 0x87E6;
    GL_VARIANT_ARRAY_TYPE_EXT :: 0x87E7;
    GL_VARIANT_ARRAY_EXT :: 0x87E8;
    GL_VARIANT_ARRAY_POINTER_EXT :: 0x87E9;
    GL_INVARIANT_VALUE_EXT :: 0x87EA;
    GL_INVARIANT_DATATYPE_EXT :: 0x87EB;
    GL_LOCAL_CONSTANT_VALUE_EXT :: 0x87EC;
    GL_LOCAL_CONSTANT_DATATYPE_EXT :: 0x87ED;

    // GL_EXT_vertex_weighting
    GL_MODELVIEW0_STACK_DEPTH_EXT :: 0x0BA3;
    GL_MODELVIEW1_STACK_DEPTH_EXT :: 0x8502;
    GL_MODELVIEW0_MATRIX_EXT :: 0x0BA6;
    GL_MODELVIEW1_MATRIX_EXT :: 0x8506;
    GL_VERTEX_WEIGHTING_EXT :: 0x8509;
    GL_MODELVIEW0_EXT :: 0x1700;
    GL_MODELVIEW1_EXT :: 0x850A;
    GL_CURRENT_VERTEX_WEIGHT_EXT :: 0x850B;
    GL_VERTEX_WEIGHT_ARRAY_EXT :: 0x850C;
    GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT :: 0x850D;
    GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT :: 0x850E;
    GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT :: 0x850F;
    GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT :: 0x8510;

    // GL_EXT_win32_keyed_mutex

    // GL_EXT_window_rectangles
    GL_INCLUSIVE_EXT :: 0x8F10;
    GL_EXCLUSIVE_EXT :: 0x8F11;
    GL_WINDOW_RECTANGLE_EXT :: 0x8F12;
    GL_WINDOW_RECTANGLE_MODE_EXT :: 0x8F13;
    GL_MAX_WINDOW_RECTANGLES_EXT :: 0x8F14;
    GL_NUM_WINDOW_RECTANGLES_EXT :: 0x8F15;

    // GL_EXT_x11_sync_object
    GL_SYNC_X11_FENCE_EXT :: 0x90E1;

    // GL_GREMEDY_frame_terminator

    // GL_GREMEDY_string_marker

    // GL_HP_convolution_border_modes
    GL_IGNORE_BORDER_HP :: 0x8150;
    GL_CONSTANT_BORDER_HP :: 0x8151;
    GL_REPLICATE_BORDER_HP :: 0x8153;
    GL_CONVOLUTION_BORDER_COLOR_HP :: 0x8154;

    // GL_HP_image_transform
    GL_IMAGE_SCALE_X_HP :: 0x8155;
    GL_IMAGE_SCALE_Y_HP :: 0x8156;
    GL_IMAGE_TRANSLATE_X_HP :: 0x8157;
    GL_IMAGE_TRANSLATE_Y_HP :: 0x8158;
    GL_IMAGE_ROTATE_ANGLE_HP :: 0x8159;
    GL_IMAGE_ROTATE_ORIGIN_X_HP :: 0x815A;
    GL_IMAGE_ROTATE_ORIGIN_Y_HP :: 0x815B;
    GL_IMAGE_MAG_FILTER_HP :: 0x815C;
    GL_IMAGE_MIN_FILTER_HP :: 0x815D;
    GL_IMAGE_CUBIC_WEIGHT_HP :: 0x815E;
    GL_CUBIC_HP :: 0x815F;
    GL_AVERAGE_HP :: 0x8160;
    GL_IMAGE_TRANSFORM_2D_HP :: 0x8161;
    GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP :: 0x8162;
    GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP :: 0x8163;

    // GL_HP_occlusion_test
    GL_OCCLUSION_TEST_HP :: 0x8165;
    GL_OCCLUSION_TEST_RESULT_HP :: 0x8166;

    // GL_HP_texture_lighting
    GL_TEXTURE_LIGHTING_MODE_HP :: 0x8167;
    GL_TEXTURE_POST_SPECULAR_HP :: 0x8168;
    GL_TEXTURE_PRE_SPECULAR_HP :: 0x8169;

    // GL_IBM_cull_vertex
    GL_CULL_VERTEX_IBM :: 103050;

    // GL_IBM_multimode_draw_arrays

    // GL_IBM_rasterpos_clip
    GL_RASTER_POSITION_UNCLIPPED_IBM :: 0x19262;

    // GL_IBM_static_data
    GL_ALL_STATIC_DATA_IBM :: 103060;
    GL_STATIC_VERTEX_ARRAY_IBM :: 103061;

    // GL_IBM_texture_mirrored_repeat
    GL_MIRRORED_REPEAT_IBM :: 0x8370;

    // GL_IBM_vertex_array_lists
    GL_VERTEX_ARRAY_LIST_IBM :: 103070;
    GL_NORMAL_ARRAY_LIST_IBM :: 103071;
    GL_COLOR_ARRAY_LIST_IBM :: 103072;
    GL_INDEX_ARRAY_LIST_IBM :: 103073;
    GL_TEXTURE_COORD_ARRAY_LIST_IBM :: 103074;
    GL_EDGE_FLAG_ARRAY_LIST_IBM :: 103075;
    GL_FOG_COORDINATE_ARRAY_LIST_IBM :: 103076;
    GL_SECONDARY_COLOR_ARRAY_LIST_IBM :: 103077;
    GL_VERTEX_ARRAY_LIST_STRIDE_IBM :: 103080;
    GL_NORMAL_ARRAY_LIST_STRIDE_IBM :: 103081;
    GL_COLOR_ARRAY_LIST_STRIDE_IBM :: 103082;
    GL_INDEX_ARRAY_LIST_STRIDE_IBM :: 103083;
    GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM :: 103084;
    GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM :: 103085;
    GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM :: 103086;
    GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM :: 103087;

    // GL_INGR_blend_func_separate

    // GL_INGR_color_clamp
    GL_RED_MIN_CLAMP_INGR :: 0x8560;
    GL_GREEN_MIN_CLAMP_INGR :: 0x8561;
    GL_BLUE_MIN_CLAMP_INGR :: 0x8562;
    GL_ALPHA_MIN_CLAMP_INGR :: 0x8563;
    GL_RED_MAX_CLAMP_INGR :: 0x8564;
    GL_GREEN_MAX_CLAMP_INGR :: 0x8565;
    GL_BLUE_MAX_CLAMP_INGR :: 0x8566;
    GL_ALPHA_MAX_CLAMP_INGR :: 0x8567;

    // GL_INGR_interlace_read
    GL_INTERLACE_READ_INGR :: 0x8568;

    // GL_INTEL_conservative_rasterization
    GL_CONSERVATIVE_RASTERIZATION_INTEL :: 0x83FE;

    // GL_INTEL_fragment_shader_ordering

    // GL_INTEL_framebuffer_CMAA

    // GL_INTEL_map_texture
    GL_TEXTURE_MEMORY_LAYOUT_INTEL :: 0x83FF;
    GL_LAYOUT_DEFAULT_INTEL :: 0;
    GL_LAYOUT_LINEAR_INTEL :: 1;
    GL_LAYOUT_LINEAR_CPU_CACHED_INTEL :: 2;

    // GL_INTEL_parallel_arrays
    GL_PARALLEL_ARRAYS_INTEL :: 0x83F4;
    GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL :: 0x83F5;
    GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL :: 0x83F6;
    GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL :: 0x83F7;
    GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL :: 0x83F8;

    // GL_INTEL_performance_query
    GL_PERFQUERY_SINGLE_CONTEXT_INTEL :: 0x00000000;
    GL_PERFQUERY_GLOBAL_CONTEXT_INTEL :: 0x00000001;
    GL_PERFQUERY_WAIT_INTEL :: 0x83FB;
    GL_PERFQUERY_FLUSH_INTEL :: 0x83FA;
    GL_PERFQUERY_DONOT_FLUSH_INTEL :: 0x83F9;
    GL_PERFQUERY_COUNTER_EVENT_INTEL :: 0x94F0;
    GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL :: 0x94F1;
    GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL :: 0x94F2;
    GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL :: 0x94F3;
    GL_PERFQUERY_COUNTER_RAW_INTEL :: 0x94F4;
    GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL :: 0x94F5;
    GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL :: 0x94F8;
    GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL :: 0x94F9;
    GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL :: 0x94FA;
    GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL :: 0x94FB;
    GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL :: 0x94FC;
    GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL :: 0x94FD;
    GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL :: 0x94FE;
    GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL :: 0x94FF;
    GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL :: 0x9500;

    // GL_KHR_blend_equation_advanced
    GL_MULTIPLY_KHR :: 0x9294;
    GL_SCREEN_KHR :: 0x9295;
    GL_OVERLAY_KHR :: 0x9296;
    GL_DARKEN_KHR :: 0x9297;
    GL_LIGHTEN_KHR :: 0x9298;
    GL_COLORDODGE_KHR :: 0x9299;
    GL_COLORBURN_KHR :: 0x929A;
    GL_HARDLIGHT_KHR :: 0x929B;
    GL_SOFTLIGHT_KHR :: 0x929C;
    GL_DIFFERENCE_KHR :: 0x929E;
    GL_EXCLUSION_KHR :: 0x92A0;
    GL_HSL_HUE_KHR :: 0x92AD;
    GL_HSL_SATURATION_KHR :: 0x92AE;
    GL_HSL_COLOR_KHR :: 0x92AF;
    GL_HSL_LUMINOSITY_KHR :: 0x92B0;

    // GL_KHR_blend_equation_advanced_coherent
    GL_BLEND_ADVANCED_COHERENT_KHR :: 0x9285;

    // GL_KHR_context_flush_control
    // GL_CONTEXT_RELEASE_BEHAVIOR :: 0x82FB;
    // GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH :: 0x82FC;
    // GL_NONE :: 0;
    GL_CONTEXT_RELEASE_BEHAVIOR_KHR :: 0x82FB;
    GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR :: 0x82FC;
    // GL_NONE :: 0;

    // GL_KHR_debug
    // GL_DEBUG_OUTPUT_SYNCHRONOUS :: 0x8242;
    // GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH :: 0x8243;
    // GL_DEBUG_CALLBACK_FUNCTION :: 0x8244;
    // GL_DEBUG_CALLBACK_USER_PARAM :: 0x8245;
    // GL_DEBUG_SOURCE_API :: 0x8246;
    // GL_DEBUG_SOURCE_WINDOW_SYSTEM :: 0x8247;
    // GL_DEBUG_SOURCE_SHADER_COMPILER :: 0x8248;
    // GL_DEBUG_SOURCE_THIRD_PARTY :: 0x8249;
    // GL_DEBUG_SOURCE_APPLICATION :: 0x824A;
    // GL_DEBUG_SOURCE_OTHER :: 0x824B;
    // GL_DEBUG_TYPE_ERROR :: 0x824C;
    // GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR :: 0x824D;
    // GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR :: 0x824E;
    // GL_DEBUG_TYPE_PORTABILITY :: 0x824F;
    // GL_DEBUG_TYPE_PERFORMANCE :: 0x8250;
    // GL_DEBUG_TYPE_OTHER :: 0x8251;
    // GL_DEBUG_TYPE_MARKER :: 0x8268;
    // GL_DEBUG_TYPE_PUSH_GROUP :: 0x8269;
    // GL_DEBUG_TYPE_POP_GROUP :: 0x826A;
    // GL_DEBUG_SEVERITY_NOTIFICATION :: 0x826B;
    // GL_MAX_DEBUG_GROUP_STACK_DEPTH :: 0x826C;
    // GL_DEBUG_GROUP_STACK_DEPTH :: 0x826D;
    // GL_BUFFER :: 0x82E0;
    // GL_SHADER :: 0x82E1;
    // GL_PROGRAM :: 0x82E2;
    // GL_VERTEX_ARRAY :: 0x8074;
    // GL_QUERY :: 0x82E3;
    // GL_PROGRAM_PIPELINE :: 0x82E4;
    // GL_SAMPLER :: 0x82E6;
    // GL_MAX_LABEL_LENGTH :: 0x82E8;
    // GL_MAX_DEBUG_MESSAGE_LENGTH :: 0x9143;
    // GL_MAX_DEBUG_LOGGED_MESSAGES :: 0x9144;
    // GL_DEBUG_LOGGED_MESSAGES :: 0x9145;
    // GL_DEBUG_SEVERITY_HIGH :: 0x9146;
    // GL_DEBUG_SEVERITY_MEDIUM :: 0x9147;
    // GL_DEBUG_SEVERITY_LOW :: 0x9148;
    // GL_DEBUG_OUTPUT :: 0x92E0;
    // GL_CONTEXT_FLAG_DEBUG_BIT :: 0x00000002;
    // GL_STACK_OVERFLOW :: 0x0503;
    // GL_STACK_UNDERFLOW :: 0x0504;
    GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR :: 0x8242;
    GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR :: 0x8243;
    GL_DEBUG_CALLBACK_FUNCTION_KHR :: 0x8244;
    GL_DEBUG_CALLBACK_USER_PARAM_KHR :: 0x8245;
    GL_DEBUG_SOURCE_API_KHR :: 0x8246;
    GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR :: 0x8247;
    GL_DEBUG_SOURCE_SHADER_COMPILER_KHR :: 0x8248;
    GL_DEBUG_SOURCE_THIRD_PARTY_KHR :: 0x8249;
    GL_DEBUG_SOURCE_APPLICATION_KHR :: 0x824A;
    GL_DEBUG_SOURCE_OTHER_KHR :: 0x824B;
    GL_DEBUG_TYPE_ERROR_KHR :: 0x824C;
    GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR :: 0x824D;
    GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR :: 0x824E;
    GL_DEBUG_TYPE_PORTABILITY_KHR :: 0x824F;
    GL_DEBUG_TYPE_PERFORMANCE_KHR :: 0x8250;
    GL_DEBUG_TYPE_OTHER_KHR :: 0x8251;
    GL_DEBUG_TYPE_MARKER_KHR :: 0x8268;
    GL_DEBUG_TYPE_PUSH_GROUP_KHR :: 0x8269;
    GL_DEBUG_TYPE_POP_GROUP_KHR :: 0x826A;
    GL_DEBUG_SEVERITY_NOTIFICATION_KHR :: 0x826B;
    GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR :: 0x826C;
    GL_DEBUG_GROUP_STACK_DEPTH_KHR :: 0x826D;
    GL_BUFFER_KHR :: 0x82E0;
    GL_SHADER_KHR :: 0x82E1;
    GL_PROGRAM_KHR :: 0x82E2;
    GL_VERTEX_ARRAY_KHR :: 0x8074;
    GL_QUERY_KHR :: 0x82E3;
    GL_PROGRAM_PIPELINE_KHR :: 0x82E4;
    GL_SAMPLER_KHR :: 0x82E6;
    GL_MAX_LABEL_LENGTH_KHR :: 0x82E8;
    GL_MAX_DEBUG_MESSAGE_LENGTH_KHR :: 0x9143;
    GL_MAX_DEBUG_LOGGED_MESSAGES_KHR :: 0x9144;
    GL_DEBUG_LOGGED_MESSAGES_KHR :: 0x9145;
    GL_DEBUG_SEVERITY_HIGH_KHR :: 0x9146;
    GL_DEBUG_SEVERITY_MEDIUM_KHR :: 0x9147;
    GL_DEBUG_SEVERITY_LOW_KHR :: 0x9148;
    GL_DEBUG_OUTPUT_KHR :: 0x92E0;
    GL_CONTEXT_FLAG_DEBUG_BIT_KHR :: 0x00000002;
    GL_STACK_OVERFLOW_KHR :: 0x0503;
    GL_STACK_UNDERFLOW_KHR :: 0x0504;
    // GL_DISPLAY_LIST :: 0x82E7;

    // GL_KHR_no_error
    GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR :: 0x00000008;

    // GL_KHR_parallel_shader_compile
    GL_MAX_SHADER_COMPILER_THREADS_KHR :: 0x91B0;
    GL_COMPLETION_STATUS_KHR :: 0x91B1;

    // GL_KHR_robust_buffer_access_behavior

    // GL_KHR_robustness
    // GL_NO_ERROR :: 0;
    GL_CONTEXT_ROBUST_ACCESS :: 0x90F3;
    // GL_LOSE_CONTEXT_ON_RESET :: 0x8252;
    // GL_GUILTY_CONTEXT_RESET :: 0x8253;
    // GL_INNOCENT_CONTEXT_RESET :: 0x8254;
    // GL_UNKNOWN_CONTEXT_RESET :: 0x8255;
    // GL_RESET_NOTIFICATION_STRATEGY :: 0x8256;
    // GL_NO_RESET_NOTIFICATION :: 0x8261;
    // GL_CONTEXT_LOST :: 0x0507;
    // GL_NO_ERROR :: 0;
    GL_CONTEXT_ROBUST_ACCESS_KHR :: 0x90F3;
    GL_LOSE_CONTEXT_ON_RESET_KHR :: 0x8252;
    GL_GUILTY_CONTEXT_RESET_KHR :: 0x8253;
    GL_INNOCENT_CONTEXT_RESET_KHR :: 0x8254;
    GL_UNKNOWN_CONTEXT_RESET_KHR :: 0x8255;
    GL_RESET_NOTIFICATION_STRATEGY_KHR :: 0x8256;
    GL_NO_RESET_NOTIFICATION_KHR :: 0x8261;
    GL_CONTEXT_LOST_KHR :: 0x0507;

    // GL_KHR_texture_compression_astc_hdr
    GL_COMPRESSED_RGBA_ASTC_4x4_KHR :: 0x93B0;
    GL_COMPRESSED_RGBA_ASTC_5x4_KHR :: 0x93B1;
    GL_COMPRESSED_RGBA_ASTC_5x5_KHR :: 0x93B2;
    GL_COMPRESSED_RGBA_ASTC_6x5_KHR :: 0x93B3;
    GL_COMPRESSED_RGBA_ASTC_6x6_KHR :: 0x93B4;
    GL_COMPRESSED_RGBA_ASTC_8x5_KHR :: 0x93B5;
    GL_COMPRESSED_RGBA_ASTC_8x6_KHR :: 0x93B6;
    GL_COMPRESSED_RGBA_ASTC_8x8_KHR :: 0x93B7;
    GL_COMPRESSED_RGBA_ASTC_10x5_KHR :: 0x93B8;
    GL_COMPRESSED_RGBA_ASTC_10x6_KHR :: 0x93B9;
    GL_COMPRESSED_RGBA_ASTC_10x8_KHR :: 0x93BA;
    GL_COMPRESSED_RGBA_ASTC_10x10_KHR :: 0x93BB;
    GL_COMPRESSED_RGBA_ASTC_12x10_KHR :: 0x93BC;
    GL_COMPRESSED_RGBA_ASTC_12x12_KHR :: 0x93BD;
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR :: 0x93D0;
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR :: 0x93D1;
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR :: 0x93D2;
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR :: 0x93D3;
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR :: 0x93D4;
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR :: 0x93D5;
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR :: 0x93D6;
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR :: 0x93D7;
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR :: 0x93D8;
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR :: 0x93D9;
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR :: 0x93DA;
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR :: 0x93DB;
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR :: 0x93DC;
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR :: 0x93DD;

    // GL_KHR_texture_compression_astc_ldr
    // GL_COMPRESSED_RGBA_ASTC_4x4_KHR :: 0x93B0;
    // GL_COMPRESSED_RGBA_ASTC_5x4_KHR :: 0x93B1;
    // GL_COMPRESSED_RGBA_ASTC_5x5_KHR :: 0x93B2;
    // GL_COMPRESSED_RGBA_ASTC_6x5_KHR :: 0x93B3;
    // GL_COMPRESSED_RGBA_ASTC_6x6_KHR :: 0x93B4;
    // GL_COMPRESSED_RGBA_ASTC_8x5_KHR :: 0x93B5;
    // GL_COMPRESSED_RGBA_ASTC_8x6_KHR :: 0x93B6;
    // GL_COMPRESSED_RGBA_ASTC_8x8_KHR :: 0x93B7;
    // GL_COMPRESSED_RGBA_ASTC_10x5_KHR :: 0x93B8;
    // GL_COMPRESSED_RGBA_ASTC_10x6_KHR :: 0x93B9;
    // GL_COMPRESSED_RGBA_ASTC_10x8_KHR :: 0x93BA;
    // GL_COMPRESSED_RGBA_ASTC_10x10_KHR :: 0x93BB;
    // GL_COMPRESSED_RGBA_ASTC_12x10_KHR :: 0x93BC;
    // GL_COMPRESSED_RGBA_ASTC_12x12_KHR :: 0x93BD;
    // GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR :: 0x93D0;
    // GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR :: 0x93D1;
    // GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR :: 0x93D2;
    // GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR :: 0x93D3;
    // GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR :: 0x93D4;
    // GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR :: 0x93D5;
    // GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR :: 0x93D6;
    // GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR :: 0x93D7;
    // GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR :: 0x93D8;
    // GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR :: 0x93D9;
    // GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR :: 0x93DA;
    // GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR :: 0x93DB;
    // GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR :: 0x93DC;
    // GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR :: 0x93DD;

    // GL_KHR_texture_compression_astc_sliced_3d

    // GL_MESAX_texture_stack
    GL_TEXTURE_1D_STACK_MESAX :: 0x8759;
    GL_TEXTURE_2D_STACK_MESAX :: 0x875A;
    GL_PROXY_TEXTURE_1D_STACK_MESAX :: 0x875B;
    GL_PROXY_TEXTURE_2D_STACK_MESAX :: 0x875C;
    GL_TEXTURE_1D_STACK_BINDING_MESAX :: 0x875D;
    GL_TEXTURE_2D_STACK_BINDING_MESAX :: 0x875E;

    // GL_MESA_pack_invert
    GL_PACK_INVERT_MESA :: 0x8758;

    // GL_MESA_program_binary_formats
    GL_PROGRAM_BINARY_FORMAT_MESA :: 0x875F;

    // GL_MESA_resize_buffers

    // GL_MESA_shader_integer_functions

    // GL_MESA_tile_raster_order
    GL_TILE_RASTER_ORDER_FIXED_MESA :: 0x8BB8;
    GL_TILE_RASTER_ORDER_INCREASING_X_MESA :: 0x8BB9;
    GL_TILE_RASTER_ORDER_INCREASING_Y_MESA :: 0x8BBA;

    // GL_MESA_window_pos

    // GL_MESA_ycbcr_texture
    GL_UNSIGNED_SHORT_8_8_MESA :: 0x85BA;
    GL_UNSIGNED_SHORT_8_8_REV_MESA :: 0x85BB;
    GL_YCBCR_MESA :: 0x8757;

    // GL_NVX_blend_equation_advanced_multi_draw_buffers

    // GL_NVX_conditional_render

    // GL_NVX_gpu_memory_info
    GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX :: 0x9047;
    GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX :: 0x9048;
    GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX :: 0x9049;
    GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX :: 0x904A;
    GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX :: 0x904B;

    // GL_NVX_linked_gpu_multicast
    GL_LGPU_SEPARATE_STORAGE_BIT_NVX :: 0x0800;
    GL_MAX_LGPU_GPUS_NVX :: 0x92BA;

    // GL_NV_alpha_to_coverage_dither_control
    GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV :: 0x934D;
    GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV :: 0x934E;
    GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV :: 0x934F;
    GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV :: 0x92BF;

    // GL_NV_bindless_multi_draw_indirect

    // GL_NV_bindless_multi_draw_indirect_count

    // GL_NV_bindless_texture

    // GL_NV_blend_equation_advanced
    GL_BLEND_OVERLAP_NV :: 0x9281;
    GL_BLEND_PREMULTIPLIED_SRC_NV :: 0x9280;
    GL_BLUE_NV :: 0x1905;
    GL_COLORBURN_NV :: 0x929A;
    GL_COLORDODGE_NV :: 0x9299;
    GL_CONJOINT_NV :: 0x9284;
    GL_CONTRAST_NV :: 0x92A1;
    GL_DARKEN_NV :: 0x9297;
    GL_DIFFERENCE_NV :: 0x929E;
    GL_DISJOINT_NV :: 0x9283;
    GL_DST_ATOP_NV :: 0x928F;
    GL_DST_IN_NV :: 0x928B;
    GL_DST_NV :: 0x9287;
    GL_DST_OUT_NV :: 0x928D;
    GL_DST_OVER_NV :: 0x9289;
    GL_EXCLUSION_NV :: 0x92A0;
    GL_GREEN_NV :: 0x1904;
    GL_HARDLIGHT_NV :: 0x929B;
    GL_HARDMIX_NV :: 0x92A9;
    GL_HSL_COLOR_NV :: 0x92AF;
    GL_HSL_HUE_NV :: 0x92AD;
    GL_HSL_LUMINOSITY_NV :: 0x92B0;
    GL_HSL_SATURATION_NV :: 0x92AE;
    // GL_INVERT :: 0x150A;
    GL_INVERT_OVG_NV :: 0x92B4;
    GL_INVERT_RGB_NV :: 0x92A3;
    GL_LIGHTEN_NV :: 0x9298;
    GL_LINEARBURN_NV :: 0x92A5;
    GL_LINEARDODGE_NV :: 0x92A4;
    GL_LINEARLIGHT_NV :: 0x92A7;
    GL_MINUS_CLAMPED_NV :: 0x92B3;
    GL_MINUS_NV :: 0x929F;
    GL_MULTIPLY_NV :: 0x9294;
    GL_OVERLAY_NV :: 0x9296;
    GL_PINLIGHT_NV :: 0x92A8;
    GL_PLUS_CLAMPED_ALPHA_NV :: 0x92B2;
    GL_PLUS_CLAMPED_NV :: 0x92B1;
    GL_PLUS_DARKER_NV :: 0x9292;
    GL_PLUS_NV :: 0x9291;
    GL_RED_NV :: 0x1903;
    GL_SCREEN_NV :: 0x9295;
    GL_SOFTLIGHT_NV :: 0x929C;
    GL_SRC_ATOP_NV :: 0x928E;
    GL_SRC_IN_NV :: 0x928A;
    GL_SRC_NV :: 0x9286;
    GL_SRC_OUT_NV :: 0x928C;
    GL_SRC_OVER_NV :: 0x9288;
    GL_UNCORRELATED_NV :: 0x9282;
    GL_VIVIDLIGHT_NV :: 0x92A6;
    GL_XOR_NV :: 0x1506;
    // GL_ZERO :: 0;

    // GL_NV_blend_equation_advanced_coherent
    GL_BLEND_ADVANCED_COHERENT_NV :: 0x9285;

    // GL_NV_blend_minmax_factor
    // GL_FACTOR_MIN_AMD :: 0x901C;
    // GL_FACTOR_MAX_AMD :: 0x901D;

    // GL_NV_blend_square

    // GL_NV_clip_space_w_scaling
    GL_VIEWPORT_POSITION_W_SCALE_NV :: 0x937C;
    GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV :: 0x937D;
    GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV :: 0x937E;

    // GL_NV_command_list
    GL_TERMINATE_SEQUENCE_COMMAND_NV :: 0x0000;
    GL_NOP_COMMAND_NV :: 0x0001;
    GL_DRAW_ELEMENTS_COMMAND_NV :: 0x0002;
    GL_DRAW_ARRAYS_COMMAND_NV :: 0x0003;
    GL_DRAW_ELEMENTS_STRIP_COMMAND_NV :: 0x0004;
    GL_DRAW_ARRAYS_STRIP_COMMAND_NV :: 0x0005;
    GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV :: 0x0006;
    GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV :: 0x0007;
    GL_ELEMENT_ADDRESS_COMMAND_NV :: 0x0008;
    GL_ATTRIBUTE_ADDRESS_COMMAND_NV :: 0x0009;
    GL_UNIFORM_ADDRESS_COMMAND_NV :: 0x000A;
    GL_BLEND_COLOR_COMMAND_NV :: 0x000B;
    GL_STENCIL_REF_COMMAND_NV :: 0x000C;
    GL_LINE_WIDTH_COMMAND_NV :: 0x000D;
    GL_POLYGON_OFFSET_COMMAND_NV :: 0x000E;
    GL_ALPHA_REF_COMMAND_NV :: 0x000F;
    GL_VIEWPORT_COMMAND_NV :: 0x0010;
    GL_SCISSOR_COMMAND_NV :: 0x0011;
    GL_FRONT_FACE_COMMAND_NV :: 0x0012;

    // GL_NV_compute_program5
    GL_COMPUTE_PROGRAM_NV :: 0x90FB;
    GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV :: 0x90FC;

    // GL_NV_conditional_render
    GL_QUERY_WAIT_NV :: 0x8E13;
    GL_QUERY_NO_WAIT_NV :: 0x8E14;
    GL_QUERY_BY_REGION_WAIT_NV :: 0x8E15;
    GL_QUERY_BY_REGION_NO_WAIT_NV :: 0x8E16;

    // GL_NV_conservative_raster
    GL_CONSERVATIVE_RASTERIZATION_NV :: 0x9346;
    GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV :: 0x9347;
    GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV :: 0x9348;
    GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV :: 0x9349;

    // GL_NV_conservative_raster_dilate
    GL_CONSERVATIVE_RASTER_DILATE_NV :: 0x9379;
    GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV :: 0x937A;
    GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV :: 0x937B;

    // GL_NV_conservative_raster_pre_snap
    GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV :: 0x9550;

    // GL_NV_conservative_raster_pre_snap_triangles
    GL_CONSERVATIVE_RASTER_MODE_NV :: 0x954D;
    GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV :: 0x954E;
    GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV :: 0x954F;
    // GL_CONSERVATIVE_RASTER_MODE_NV :: 0x954D;

    // GL_NV_conservative_raster_underestimation

    // GL_NV_copy_depth_to_color
    GL_DEPTH_STENCIL_TO_RGBA_NV :: 0x886E;
    GL_DEPTH_STENCIL_TO_BGRA_NV :: 0x886F;

    // GL_NV_copy_image

    // GL_NV_deep_texture3D
    GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV :: 0x90D0;
    GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV :: 0x90D1;

    // GL_NV_depth_buffer_float
    GL_DEPTH_COMPONENT32F_NV :: 0x8DAB;
    GL_DEPTH32F_STENCIL8_NV :: 0x8DAC;
    GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV :: 0x8DAD;
    GL_DEPTH_BUFFER_FLOAT_MODE_NV :: 0x8DAF;

    // GL_NV_depth_clamp
    GL_DEPTH_CLAMP_NV :: 0x864F;

    // GL_NV_draw_texture

    // GL_NV_draw_vulkan_image

    // GL_NV_evaluators
    GL_EVAL_2D_NV :: 0x86C0;
    GL_EVAL_TRIANGULAR_2D_NV :: 0x86C1;
    GL_MAP_TESSELLATION_NV :: 0x86C2;
    GL_MAP_ATTRIB_U_ORDER_NV :: 0x86C3;
    GL_MAP_ATTRIB_V_ORDER_NV :: 0x86C4;
    GL_EVAL_FRACTIONAL_TESSELLATION_NV :: 0x86C5;
    GL_EVAL_VERTEX_ATTRIB0_NV :: 0x86C6;
    GL_EVAL_VERTEX_ATTRIB1_NV :: 0x86C7;
    GL_EVAL_VERTEX_ATTRIB2_NV :: 0x86C8;
    GL_EVAL_VERTEX_ATTRIB3_NV :: 0x86C9;
    GL_EVAL_VERTEX_ATTRIB4_NV :: 0x86CA;
    GL_EVAL_VERTEX_ATTRIB5_NV :: 0x86CB;
    GL_EVAL_VERTEX_ATTRIB6_NV :: 0x86CC;
    GL_EVAL_VERTEX_ATTRIB7_NV :: 0x86CD;
    GL_EVAL_VERTEX_ATTRIB8_NV :: 0x86CE;
    GL_EVAL_VERTEX_ATTRIB9_NV :: 0x86CF;
    GL_EVAL_VERTEX_ATTRIB10_NV :: 0x86D0;
    GL_EVAL_VERTEX_ATTRIB11_NV :: 0x86D1;
    GL_EVAL_VERTEX_ATTRIB12_NV :: 0x86D2;
    GL_EVAL_VERTEX_ATTRIB13_NV :: 0x86D3;
    GL_EVAL_VERTEX_ATTRIB14_NV :: 0x86D4;
    GL_EVAL_VERTEX_ATTRIB15_NV :: 0x86D5;
    GL_MAX_MAP_TESSELLATION_NV :: 0x86D6;
    GL_MAX_RATIONAL_EVAL_ORDER_NV :: 0x86D7;

    // GL_NV_explicit_multisample
    GL_SAMPLE_POSITION_NV :: 0x8E50;
    GL_SAMPLE_MASK_NV :: 0x8E51;
    GL_SAMPLE_MASK_VALUE_NV :: 0x8E52;
    GL_TEXTURE_BINDING_RENDERBUFFER_NV :: 0x8E53;
    GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV :: 0x8E54;
    GL_TEXTURE_RENDERBUFFER_NV :: 0x8E55;
    GL_SAMPLER_RENDERBUFFER_NV :: 0x8E56;
    GL_INT_SAMPLER_RENDERBUFFER_NV :: 0x8E57;
    GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV :: 0x8E58;
    GL_MAX_SAMPLE_MASK_WORDS_NV :: 0x8E59;

    // GL_NV_fence
    GL_ALL_COMPLETED_NV :: 0x84F2;
    GL_FENCE_STATUS_NV :: 0x84F3;
    GL_FENCE_CONDITION_NV :: 0x84F4;

    // GL_NV_fill_rectangle
    GL_FILL_RECTANGLE_NV :: 0x933C;

    // GL_NV_float_buffer
    GL_FLOAT_R_NV :: 0x8880;
    GL_FLOAT_RG_NV :: 0x8881;
    GL_FLOAT_RGB_NV :: 0x8882;
    GL_FLOAT_RGBA_NV :: 0x8883;
    GL_FLOAT_R16_NV :: 0x8884;
    GL_FLOAT_R32_NV :: 0x8885;
    GL_FLOAT_RG16_NV :: 0x8886;
    GL_FLOAT_RG32_NV :: 0x8887;
    GL_FLOAT_RGB16_NV :: 0x8888;
    GL_FLOAT_RGB32_NV :: 0x8889;
    GL_FLOAT_RGBA16_NV :: 0x888A;
    GL_FLOAT_RGBA32_NV :: 0x888B;
    GL_TEXTURE_FLOAT_COMPONENTS_NV :: 0x888C;
    GL_FLOAT_CLEAR_COLOR_VALUE_NV :: 0x888D;
    GL_FLOAT_RGBA_MODE_NV :: 0x888E;

    // GL_NV_fog_distance
    GL_FOG_DISTANCE_MODE_NV :: 0x855A;
    GL_EYE_RADIAL_NV :: 0x855B;
    GL_EYE_PLANE_ABSOLUTE_NV :: 0x855C;
    // GL_EYE_PLANE :: 0x2502;

    // GL_NV_fragment_coverage_to_color
    GL_FRAGMENT_COVERAGE_TO_COLOR_NV :: 0x92DD;
    GL_FRAGMENT_COVERAGE_COLOR_NV :: 0x92DE;

    // GL_NV_fragment_program
    GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV :: 0x8868;
    GL_FRAGMENT_PROGRAM_NV :: 0x8870;
    GL_MAX_TEXTURE_COORDS_NV :: 0x8871;
    GL_MAX_TEXTURE_IMAGE_UNITS_NV :: 0x8872;
    GL_FRAGMENT_PROGRAM_BINDING_NV :: 0x8873;
    GL_PROGRAM_ERROR_STRING_NV :: 0x8874;

    // GL_NV_fragment_program2
    GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV :: 0x88F4;
    GL_MAX_PROGRAM_CALL_DEPTH_NV :: 0x88F5;
    GL_MAX_PROGRAM_IF_DEPTH_NV :: 0x88F6;
    GL_MAX_PROGRAM_LOOP_DEPTH_NV :: 0x88F7;
    GL_MAX_PROGRAM_LOOP_COUNT_NV :: 0x88F8;

    // GL_NV_fragment_program4

    // GL_NV_fragment_program_option

    // GL_NV_fragment_shader_interlock

    // GL_NV_framebuffer_mixed_samples
    // GL_RASTER_MULTISAMPLE_EXT :: 0x9327;
    GL_COVERAGE_MODULATION_TABLE_NV :: 0x9331;
    // GL_RASTER_SAMPLES_EXT :: 0x9328;
    // GL_MAX_RASTER_SAMPLES_EXT :: 0x9329;
    // GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT :: 0x932A;
    // GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT :: 0x932B;
    // GL_EFFECTIVE_RASTER_SAMPLES_EXT :: 0x932C;
    GL_COLOR_SAMPLES_NV :: 0x8E20;
    GL_DEPTH_SAMPLES_NV :: 0x932D;
    GL_STENCIL_SAMPLES_NV :: 0x932E;
    GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV :: 0x932F;
    GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV :: 0x9330;
    GL_COVERAGE_MODULATION_NV :: 0x9332;
    GL_COVERAGE_MODULATION_TABLE_SIZE_NV :: 0x9333;

    // GL_NV_framebuffer_multisample_coverage
    GL_RENDERBUFFER_COVERAGE_SAMPLES_NV :: 0x8CAB;
    GL_RENDERBUFFER_COLOR_SAMPLES_NV :: 0x8E10;
    GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV :: 0x8E11;
    GL_MULTISAMPLE_COVERAGE_MODES_NV :: 0x8E12;

    // GL_NV_geometry_program4
    // GL_LINES_ADJACENCY_EXT :: 0x000A;
    // GL_LINE_STRIP_ADJACENCY_EXT :: 0x000B;
    // GL_TRIANGLES_ADJACENCY_EXT :: 0x000C;
    // GL_TRIANGLE_STRIP_ADJACENCY_EXT :: 0x000D;
    GL_GEOMETRY_PROGRAM_NV :: 0x8C26;
    GL_MAX_PROGRAM_OUTPUT_VERTICES_NV :: 0x8C27;
    GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV :: 0x8C28;
    // GL_GEOMETRY_VERTICES_OUT_EXT :: 0x8DDA;
    // GL_GEOMETRY_INPUT_TYPE_EXT :: 0x8DDB;
    // GL_GEOMETRY_OUTPUT_TYPE_EXT :: 0x8DDC;
    // GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT :: 0x8C29;
    // GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT :: 0x8DA7;
    // GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT :: 0x8DA8;
    // GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT :: 0x8DA9;
    // GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT :: 0x8CD4;
    // GL_PROGRAM_POINT_SIZE_EXT :: 0x8642;

    // GL_NV_geometry_shader4

    // GL_NV_geometry_shader_passthrough

    // GL_NV_gpu_multicast
    GL_PER_GPU_STORAGE_BIT_NV :: 0x0800;
    GL_MULTICAST_GPUS_NV :: 0x92BA;
    GL_RENDER_GPU_MASK_NV :: 0x9558;
    GL_PER_GPU_STORAGE_NV :: 0x9548;
    GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV :: 0x9549;

    // GL_NV_gpu_program4
    GL_MIN_PROGRAM_TEXEL_OFFSET_NV :: 0x8904;
    GL_MAX_PROGRAM_TEXEL_OFFSET_NV :: 0x8905;
    GL_PROGRAM_ATTRIB_COMPONENTS_NV :: 0x8906;
    GL_PROGRAM_RESULT_COMPONENTS_NV :: 0x8907;
    GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV :: 0x8908;
    GL_MAX_PROGRAM_RESULT_COMPONENTS_NV :: 0x8909;
    GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV :: 0x8DA5;
    GL_MAX_PROGRAM_GENERIC_RESULTS_NV :: 0x8DA6;

    // GL_NV_gpu_program5
    GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV :: 0x8E5A;
    GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV :: 0x8E5B;
    GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV :: 0x8E5C;
    GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV :: 0x8E5D;
    GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV :: 0x8E5E;
    GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV :: 0x8E5F;
    GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV :: 0x8F44;
    GL_MAX_PROGRAM_SUBROUTINE_NUM_NV :: 0x8F45;

    // GL_NV_gpu_program5_mem_extended

    // GL_NV_gpu_shader5
    // GL_INT64_NV :: 0x140E;
    // GL_UNSIGNED_INT64_NV :: 0x140F;
    // GL_INT8_NV :: 0x8FE0;
    // GL_INT8_VEC2_NV :: 0x8FE1;
    // GL_INT8_VEC3_NV :: 0x8FE2;
    // GL_INT8_VEC4_NV :: 0x8FE3;
    // GL_INT16_NV :: 0x8FE4;
    // GL_INT16_VEC2_NV :: 0x8FE5;
    // GL_INT16_VEC3_NV :: 0x8FE6;
    // GL_INT16_VEC4_NV :: 0x8FE7;
    // GL_INT64_VEC2_NV :: 0x8FE9;
    // GL_INT64_VEC3_NV :: 0x8FEA;
    // GL_INT64_VEC4_NV :: 0x8FEB;
    // GL_UNSIGNED_INT8_NV :: 0x8FEC;
    // GL_UNSIGNED_INT8_VEC2_NV :: 0x8FED;
    // GL_UNSIGNED_INT8_VEC3_NV :: 0x8FEE;
    // GL_UNSIGNED_INT8_VEC4_NV :: 0x8FEF;
    // GL_UNSIGNED_INT16_NV :: 0x8FF0;
    // GL_UNSIGNED_INT16_VEC2_NV :: 0x8FF1;
    // GL_UNSIGNED_INT16_VEC3_NV :: 0x8FF2;
    // GL_UNSIGNED_INT16_VEC4_NV :: 0x8FF3;
    // GL_UNSIGNED_INT64_VEC2_NV :: 0x8FF5;
    // GL_UNSIGNED_INT64_VEC3_NV :: 0x8FF6;
    // GL_UNSIGNED_INT64_VEC4_NV :: 0x8FF7;
    // GL_FLOAT16_NV :: 0x8FF8;
    // GL_FLOAT16_VEC2_NV :: 0x8FF9;
    // GL_FLOAT16_VEC3_NV :: 0x8FFA;
    // GL_FLOAT16_VEC4_NV :: 0x8FFB;
    // GL_PATCHES :: 0x000E;

    // GL_NV_half_float
    GL_HALF_FLOAT_NV :: 0x140B;

    // GL_NV_internalformat_sample_query
    // GL_RENDERBUFFER :: 0x8D41;
    // GL_TEXTURE_2D_MULTISAMPLE :: 0x9100;
    // GL_TEXTURE_2D_MULTISAMPLE_ARRAY :: 0x9102;
    GL_MULTISAMPLES_NV :: 0x9371;
    GL_SUPERSAMPLE_SCALE_X_NV :: 0x9372;
    GL_SUPERSAMPLE_SCALE_Y_NV :: 0x9373;
    GL_CONFORMANT_NV :: 0x9374;

    // GL_NV_light_max_exponent
    GL_MAX_SHININESS_NV :: 0x8504;
    GL_MAX_SPOT_EXPONENT_NV :: 0x8505;

    // GL_NV_multisample_coverage
    // GL_SAMPLES_ARB :: 0x80A9;
    // GL_COLOR_SAMPLES_NV :: 0x8E20;

    // GL_NV_multisample_filter_hint
    GL_MULTISAMPLE_FILTER_HINT_NV :: 0x8534;

    // GL_NV_occlusion_query
    GL_PIXEL_COUNTER_BITS_NV :: 0x8864;
    GL_CURRENT_OCCLUSION_QUERY_ID_NV :: 0x8865;
    GL_PIXEL_COUNT_NV :: 0x8866;
    GL_PIXEL_COUNT_AVAILABLE_NV :: 0x8867;

    // GL_NV_packed_depth_stencil
    GL_DEPTH_STENCIL_NV :: 0x84F9;
    GL_UNSIGNED_INT_24_8_NV :: 0x84FA;

    // GL_NV_parameter_buffer_object
    GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV :: 0x8DA0;
    GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV :: 0x8DA1;
    GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV :: 0x8DA2;
    GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV :: 0x8DA3;
    GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV :: 0x8DA4;

    // GL_NV_parameter_buffer_object2

    // GL_NV_path_rendering
    GL_PATH_FORMAT_SVG_NV :: 0x9070;
    GL_PATH_FORMAT_PS_NV :: 0x9071;
    GL_STANDARD_FONT_NAME_NV :: 0x9072;
    GL_SYSTEM_FONT_NAME_NV :: 0x9073;
    GL_FILE_NAME_NV :: 0x9074;
    GL_PATH_STROKE_WIDTH_NV :: 0x9075;
    GL_PATH_END_CAPS_NV :: 0x9076;
    GL_PATH_INITIAL_END_CAP_NV :: 0x9077;
    GL_PATH_TERMINAL_END_CAP_NV :: 0x9078;
    GL_PATH_JOIN_STYLE_NV :: 0x9079;
    GL_PATH_MITER_LIMIT_NV :: 0x907A;
    GL_PATH_DASH_CAPS_NV :: 0x907B;
    GL_PATH_INITIAL_DASH_CAP_NV :: 0x907C;
    GL_PATH_TERMINAL_DASH_CAP_NV :: 0x907D;
    GL_PATH_DASH_OFFSET_NV :: 0x907E;
    GL_PATH_CLIENT_LENGTH_NV :: 0x907F;
    GL_PATH_FILL_MODE_NV :: 0x9080;
    GL_PATH_FILL_MASK_NV :: 0x9081;
    GL_PATH_FILL_COVER_MODE_NV :: 0x9082;
    GL_PATH_STROKE_COVER_MODE_NV :: 0x9083;
    GL_PATH_STROKE_MASK_NV :: 0x9084;
    GL_COUNT_UP_NV :: 0x9088;
    GL_COUNT_DOWN_NV :: 0x9089;
    GL_PATH_OBJECT_BOUNDING_BOX_NV :: 0x908A;
    GL_CONVEX_HULL_NV :: 0x908B;
    GL_BOUNDING_BOX_NV :: 0x908D;
    GL_TRANSLATE_X_NV :: 0x908E;
    GL_TRANSLATE_Y_NV :: 0x908F;
    GL_TRANSLATE_2D_NV :: 0x9090;
    GL_TRANSLATE_3D_NV :: 0x9091;
    GL_AFFINE_2D_NV :: 0x9092;
    GL_AFFINE_3D_NV :: 0x9094;
    GL_TRANSPOSE_AFFINE_2D_NV :: 0x9096;
    GL_TRANSPOSE_AFFINE_3D_NV :: 0x9098;
    GL_UTF8_NV :: 0x909A;
    GL_UTF16_NV :: 0x909B;
    GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV :: 0x909C;
    GL_PATH_COMMAND_COUNT_NV :: 0x909D;
    GL_PATH_COORD_COUNT_NV :: 0x909E;
    GL_PATH_DASH_ARRAY_COUNT_NV :: 0x909F;
    GL_PATH_COMPUTED_LENGTH_NV :: 0x90A0;
    GL_PATH_FILL_BOUNDING_BOX_NV :: 0x90A1;
    GL_PATH_STROKE_BOUNDING_BOX_NV :: 0x90A2;
    GL_SQUARE_NV :: 0x90A3;
    GL_ROUND_NV :: 0x90A4;
    GL_TRIANGULAR_NV :: 0x90A5;
    GL_BEVEL_NV :: 0x90A6;
    GL_MITER_REVERT_NV :: 0x90A7;
    GL_MITER_TRUNCATE_NV :: 0x90A8;
    GL_SKIP_MISSING_GLYPH_NV :: 0x90A9;
    GL_USE_MISSING_GLYPH_NV :: 0x90AA;
    GL_PATH_ERROR_POSITION_NV :: 0x90AB;
    GL_ACCUM_ADJACENT_PAIRS_NV :: 0x90AD;
    GL_ADJACENT_PAIRS_NV :: 0x90AE;
    GL_FIRST_TO_REST_NV :: 0x90AF;
    GL_PATH_GEN_MODE_NV :: 0x90B0;
    GL_PATH_GEN_COEFF_NV :: 0x90B1;
    GL_PATH_GEN_COMPONENTS_NV :: 0x90B3;
    GL_PATH_STENCIL_FUNC_NV :: 0x90B7;
    GL_PATH_STENCIL_REF_NV :: 0x90B8;
    GL_PATH_STENCIL_VALUE_MASK_NV :: 0x90B9;
    GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV :: 0x90BD;
    GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV :: 0x90BE;
    GL_PATH_COVER_DEPTH_FUNC_NV :: 0x90BF;
    GL_PATH_DASH_OFFSET_RESET_NV :: 0x90B4;
    GL_MOVE_TO_RESETS_NV :: 0x90B5;
    GL_MOVE_TO_CONTINUES_NV :: 0x90B6;
    GL_CLOSE_PATH_NV :: 0x00;
    GL_MOVE_TO_NV :: 0x02;
    GL_RELATIVE_MOVE_TO_NV :: 0x03;
    GL_LINE_TO_NV :: 0x04;
    GL_RELATIVE_LINE_TO_NV :: 0x05;
    GL_HORIZONTAL_LINE_TO_NV :: 0x06;
    GL_RELATIVE_HORIZONTAL_LINE_TO_NV :: 0x07;
    GL_VERTICAL_LINE_TO_NV :: 0x08;
    GL_RELATIVE_VERTICAL_LINE_TO_NV :: 0x09;
    GL_QUADRATIC_CURVE_TO_NV :: 0x0A;
    GL_RELATIVE_QUADRATIC_CURVE_TO_NV :: 0x0B;
    GL_CUBIC_CURVE_TO_NV :: 0x0C;
    GL_RELATIVE_CUBIC_CURVE_TO_NV :: 0x0D;
    GL_SMOOTH_QUADRATIC_CURVE_TO_NV :: 0x0E;
    GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV :: 0x0F;
    GL_SMOOTH_CUBIC_CURVE_TO_NV :: 0x10;
    GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV :: 0x11;
    GL_SMALL_CCW_ARC_TO_NV :: 0x12;
    GL_RELATIVE_SMALL_CCW_ARC_TO_NV :: 0x13;
    GL_SMALL_CW_ARC_TO_NV :: 0x14;
    GL_RELATIVE_SMALL_CW_ARC_TO_NV :: 0x15;
    GL_LARGE_CCW_ARC_TO_NV :: 0x16;
    GL_RELATIVE_LARGE_CCW_ARC_TO_NV :: 0x17;
    GL_LARGE_CW_ARC_TO_NV :: 0x18;
    GL_RELATIVE_LARGE_CW_ARC_TO_NV :: 0x19;
    GL_RESTART_PATH_NV :: 0xF0;
    GL_DUP_FIRST_CUBIC_CURVE_TO_NV :: 0xF2;
    GL_DUP_LAST_CUBIC_CURVE_TO_NV :: 0xF4;
    GL_RECT_NV :: 0xF6;
    GL_CIRCULAR_CCW_ARC_TO_NV :: 0xF8;
    GL_CIRCULAR_CW_ARC_TO_NV :: 0xFA;
    GL_CIRCULAR_TANGENT_ARC_TO_NV :: 0xFC;
    GL_ARC_TO_NV :: 0xFE;
    GL_RELATIVE_ARC_TO_NV :: 0xFF;
    GL_BOLD_BIT_NV :: 0x01;
    GL_ITALIC_BIT_NV :: 0x02;
    GL_GLYPH_WIDTH_BIT_NV :: 0x01;
    GL_GLYPH_HEIGHT_BIT_NV :: 0x02;
    GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV :: 0x04;
    GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV :: 0x08;
    GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV :: 0x10;
    GL_GLYPH_VERTICAL_BEARING_X_BIT_NV :: 0x20;
    GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV :: 0x40;
    GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV :: 0x80;
    GL_GLYPH_HAS_KERNING_BIT_NV :: 0x100;
    GL_FONT_X_MIN_BOUNDS_BIT_NV :: 0x00010000;
    GL_FONT_Y_MIN_BOUNDS_BIT_NV :: 0x00020000;
    GL_FONT_X_MAX_BOUNDS_BIT_NV :: 0x00040000;
    GL_FONT_Y_MAX_BOUNDS_BIT_NV :: 0x00080000;
    GL_FONT_UNITS_PER_EM_BIT_NV :: 0x00100000;
    GL_FONT_ASCENDER_BIT_NV :: 0x00200000;
    GL_FONT_DESCENDER_BIT_NV :: 0x00400000;
    GL_FONT_HEIGHT_BIT_NV :: 0x00800000;
    GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV :: 0x01000000;
    GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV :: 0x02000000;
    GL_FONT_UNDERLINE_POSITION_BIT_NV :: 0x04000000;
    GL_FONT_UNDERLINE_THICKNESS_BIT_NV :: 0x08000000;
    GL_FONT_HAS_KERNING_BIT_NV :: 0x10000000;
    GL_ROUNDED_RECT_NV :: 0xE8;
    GL_RELATIVE_ROUNDED_RECT_NV :: 0xE9;
    GL_ROUNDED_RECT2_NV :: 0xEA;
    GL_RELATIVE_ROUNDED_RECT2_NV :: 0xEB;
    GL_ROUNDED_RECT4_NV :: 0xEC;
    GL_RELATIVE_ROUNDED_RECT4_NV :: 0xED;
    GL_ROUNDED_RECT8_NV :: 0xEE;
    GL_RELATIVE_ROUNDED_RECT8_NV :: 0xEF;
    GL_RELATIVE_RECT_NV :: 0xF7;
    GL_FONT_GLYPHS_AVAILABLE_NV :: 0x9368;
    GL_FONT_TARGET_UNAVAILABLE_NV :: 0x9369;
    GL_FONT_UNAVAILABLE_NV :: 0x936A;
    GL_FONT_UNINTELLIGIBLE_NV :: 0x936B;
    GL_CONIC_CURVE_TO_NV :: 0x1A;
    GL_RELATIVE_CONIC_CURVE_TO_NV :: 0x1B;
    GL_FONT_NUM_GLYPH_INDICES_BIT_NV :: 0x20000000;
    GL_STANDARD_FONT_FORMAT_NV :: 0x936C;
    GL_2_BYTES_NV :: 0x1407;
    GL_3_BYTES_NV :: 0x1408;
    GL_4_BYTES_NV :: 0x1409;
    GL_EYE_LINEAR_NV :: 0x2400;
    GL_OBJECT_LINEAR_NV :: 0x2401;
    GL_CONSTANT_NV :: 0x8576;
    GL_PATH_FOG_GEN_MODE_NV :: 0x90AC;
    // GL_PRIMARY_COLOR :: 0x8577;
    GL_PRIMARY_COLOR_NV :: 0x852C;
    GL_SECONDARY_COLOR_NV :: 0x852D;
    GL_PATH_GEN_COLOR_FORMAT_NV :: 0x90B2;
    GL_PATH_PROJECTION_NV :: 0x1701;
    GL_PATH_MODELVIEW_NV :: 0x1700;
    GL_PATH_MODELVIEW_STACK_DEPTH_NV :: 0x0BA3;
    GL_PATH_MODELVIEW_MATRIX_NV :: 0x0BA6;
    GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV :: 0x0D36;
    GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV :: 0x84E3;
    GL_PATH_PROJECTION_STACK_DEPTH_NV :: 0x0BA4;
    GL_PATH_PROJECTION_MATRIX_NV :: 0x0BA7;
    GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV :: 0x0D38;
    GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV :: 0x84E4;
    GL_FRAGMENT_INPUT_NV :: 0x936D;

    // GL_NV_path_rendering_shared_edge
    GL_SHARED_EDGE_NV :: 0xC0;

    // GL_NV_pixel_data_range
    GL_WRITE_PIXEL_DATA_RANGE_NV :: 0x8878;
    GL_READ_PIXEL_DATA_RANGE_NV :: 0x8879;
    GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV :: 0x887A;
    GL_READ_PIXEL_DATA_RANGE_LENGTH_NV :: 0x887B;
    GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV :: 0x887C;
    GL_READ_PIXEL_DATA_RANGE_POINTER_NV :: 0x887D;

    // GL_NV_point_sprite
    GL_POINT_SPRITE_NV :: 0x8861;
    GL_COORD_REPLACE_NV :: 0x8862;
    GL_POINT_SPRITE_R_MODE_NV :: 0x8863;

    // GL_NV_present_video
    GL_FRAME_NV :: 0x8E26;
    GL_FIELDS_NV :: 0x8E27;
    GL_CURRENT_TIME_NV :: 0x8E28;
    GL_NUM_FILL_STREAMS_NV :: 0x8E29;
    GL_PRESENT_TIME_NV :: 0x8E2A;
    GL_PRESENT_DURATION_NV :: 0x8E2B;

    // GL_NV_primitive_restart
    GL_PRIMITIVE_RESTART_NV :: 0x8558;
    GL_PRIMITIVE_RESTART_INDEX_NV :: 0x8559;

    // GL_NV_query_resource
    GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV :: 0x9540;
    GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV :: 0x9542;
    GL_QUERY_RESOURCE_SYS_RESERVED_NV :: 0x9544;
    GL_QUERY_RESOURCE_TEXTURE_NV :: 0x9545;
    GL_QUERY_RESOURCE_RENDERBUFFER_NV :: 0x9546;
    GL_QUERY_RESOURCE_BUFFEROBJECT_NV :: 0x9547;

    // GL_NV_query_resource_tag

    // GL_NV_register_combiners
    GL_REGISTER_COMBINERS_NV :: 0x8522;
    GL_VARIABLE_A_NV :: 0x8523;
    GL_VARIABLE_B_NV :: 0x8524;
    GL_VARIABLE_C_NV :: 0x8525;
    GL_VARIABLE_D_NV :: 0x8526;
    GL_VARIABLE_E_NV :: 0x8527;
    GL_VARIABLE_F_NV :: 0x8528;
    GL_VARIABLE_G_NV :: 0x8529;
    GL_CONSTANT_COLOR0_NV :: 0x852A;
    GL_CONSTANT_COLOR1_NV :: 0x852B;
    // GL_PRIMARY_COLOR_NV :: 0x852C;
    // GL_SECONDARY_COLOR_NV :: 0x852D;
    GL_SPARE0_NV :: 0x852E;
    GL_SPARE1_NV :: 0x852F;
    GL_DISCARD_NV :: 0x8530;
    GL_E_TIMES_F_NV :: 0x8531;
    GL_SPARE0_PLUS_SECONDARY_COLOR_NV :: 0x8532;
    GL_UNSIGNED_IDENTITY_NV :: 0x8536;
    GL_UNSIGNED_INVERT_NV :: 0x8537;
    GL_EXPAND_NORMAL_NV :: 0x8538;
    GL_EXPAND_NEGATE_NV :: 0x8539;
    GL_HALF_BIAS_NORMAL_NV :: 0x853A;
    GL_HALF_BIAS_NEGATE_NV :: 0x853B;
    GL_SIGNED_IDENTITY_NV :: 0x853C;
    GL_SIGNED_NEGATE_NV :: 0x853D;
    GL_SCALE_BY_TWO_NV :: 0x853E;
    GL_SCALE_BY_FOUR_NV :: 0x853F;
    GL_SCALE_BY_ONE_HALF_NV :: 0x8540;
    GL_BIAS_BY_NEGATIVE_ONE_HALF_NV :: 0x8541;
    GL_COMBINER_INPUT_NV :: 0x8542;
    GL_COMBINER_MAPPING_NV :: 0x8543;
    GL_COMBINER_COMPONENT_USAGE_NV :: 0x8544;
    GL_COMBINER_AB_DOT_PRODUCT_NV :: 0x8545;
    GL_COMBINER_CD_DOT_PRODUCT_NV :: 0x8546;
    GL_COMBINER_MUX_SUM_NV :: 0x8547;
    GL_COMBINER_SCALE_NV :: 0x8548;
    GL_COMBINER_BIAS_NV :: 0x8549;
    GL_COMBINER_AB_OUTPUT_NV :: 0x854A;
    GL_COMBINER_CD_OUTPUT_NV :: 0x854B;
    GL_COMBINER_SUM_OUTPUT_NV :: 0x854C;
    GL_MAX_GENERAL_COMBINERS_NV :: 0x854D;
    GL_NUM_GENERAL_COMBINERS_NV :: 0x854E;
    GL_COLOR_SUM_CLAMP_NV :: 0x854F;
    GL_COMBINER0_NV :: 0x8550;
    GL_COMBINER1_NV :: 0x8551;
    GL_COMBINER2_NV :: 0x8552;
    GL_COMBINER3_NV :: 0x8553;
    GL_COMBINER4_NV :: 0x8554;
    GL_COMBINER5_NV :: 0x8555;
    GL_COMBINER6_NV :: 0x8556;
    GL_COMBINER7_NV :: 0x8557;
    // GL_TEXTURE0_ARB :: 0x84C0;
    // GL_TEXTURE1_ARB :: 0x84C1;
    // GL_ZERO :: 0;
    // GL_NONE :: 0;
    // GL_FOG :: 0x0B60;

    // GL_NV_register_combiners2
    GL_PER_STAGE_CONSTANTS_NV :: 0x8535;

    // GL_NV_robustness_video_memory_purge
    GL_PURGED_CONTEXT_RESET_NV :: 0x92BB;

    // GL_NV_sample_locations
    GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV :: 0x933D;
    GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV :: 0x933E;
    GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV :: 0x933F;
    GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV :: 0x9340;
    GL_SAMPLE_LOCATION_NV :: 0x8E50;
    GL_PROGRAMMABLE_SAMPLE_LOCATION_NV :: 0x9341;
    GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV :: 0x9342;
    GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV :: 0x9343;

    // GL_NV_sample_mask_override_coverage

    // GL_NV_shader_atomic_counters

    // GL_NV_shader_atomic_float

    // GL_NV_shader_atomic_float64

    // GL_NV_shader_atomic_fp16_vector

    // GL_NV_shader_atomic_int64

    // GL_NV_shader_buffer_load
    GL_BUFFER_GPU_ADDRESS_NV :: 0x8F1D;
    GL_GPU_ADDRESS_NV :: 0x8F34;
    GL_MAX_SHADER_BUFFER_ADDRESS_NV :: 0x8F35;

    // GL_NV_shader_buffer_store
    GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV :: 0x00000010;
    // GL_READ_WRITE :: 0x88BA;
    // GL_WRITE_ONLY :: 0x88B9;

    // GL_NV_shader_storage_buffer_object

    // GL_NV_shader_thread_group
    GL_WARP_SIZE_NV :: 0x9339;
    GL_WARPS_PER_SM_NV :: 0x933A;
    GL_SM_COUNT_NV :: 0x933B;

    // GL_NV_shader_thread_shuffle

    // GL_NV_stereo_view_rendering

    // GL_NV_tessellation_program5
    GL_MAX_PROGRAM_PATCH_ATTRIBS_NV :: 0x86D8;
    GL_TESS_CONTROL_PROGRAM_NV :: 0x891E;
    GL_TESS_EVALUATION_PROGRAM_NV :: 0x891F;
    GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV :: 0x8C74;
    GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV :: 0x8C75;

    // GL_NV_texgen_emboss
    GL_EMBOSS_LIGHT_NV :: 0x855D;
    GL_EMBOSS_CONSTANT_NV :: 0x855E;
    GL_EMBOSS_MAP_NV :: 0x855F;

    // GL_NV_texgen_reflection
    GL_NORMAL_MAP_NV :: 0x8511;
    GL_REFLECTION_MAP_NV :: 0x8512;

    // GL_NV_texture_barrier

    // GL_NV_texture_compression_vtc

    // GL_NV_texture_env_combine4
    GL_COMBINE4_NV :: 0x8503;
    GL_SOURCE3_RGB_NV :: 0x8583;
    GL_SOURCE3_ALPHA_NV :: 0x858B;
    GL_OPERAND3_RGB_NV :: 0x8593;
    GL_OPERAND3_ALPHA_NV :: 0x859B;

    // GL_NV_texture_expand_normal
    GL_TEXTURE_UNSIGNED_REMAP_MODE_NV :: 0x888F;

    // GL_NV_texture_multisample
    GL_TEXTURE_COVERAGE_SAMPLES_NV :: 0x9045;
    GL_TEXTURE_COLOR_SAMPLES_NV :: 0x9046;

    // GL_NV_texture_rectangle
    GL_TEXTURE_RECTANGLE_NV :: 0x84F5;
    GL_TEXTURE_BINDING_RECTANGLE_NV :: 0x84F6;
    GL_PROXY_TEXTURE_RECTANGLE_NV :: 0x84F7;
    GL_MAX_RECTANGLE_TEXTURE_SIZE_NV :: 0x84F8;

    // GL_NV_texture_rectangle_compressed

    // GL_NV_texture_shader
    GL_OFFSET_TEXTURE_RECTANGLE_NV :: 0x864C;
    GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV :: 0x864D;
    GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV :: 0x864E;
    GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV :: 0x86D9;
    GL_UNSIGNED_INT_S8_S8_8_8_NV :: 0x86DA;
    GL_UNSIGNED_INT_8_8_S8_S8_REV_NV :: 0x86DB;
    GL_DSDT_MAG_INTENSITY_NV :: 0x86DC;
    GL_SHADER_CONSISTENT_NV :: 0x86DD;
    GL_TEXTURE_SHADER_NV :: 0x86DE;
    GL_SHADER_OPERATION_NV :: 0x86DF;
    GL_CULL_MODES_NV :: 0x86E0;
    GL_OFFSET_TEXTURE_MATRIX_NV :: 0x86E1;
    GL_OFFSET_TEXTURE_SCALE_NV :: 0x86E2;
    GL_OFFSET_TEXTURE_BIAS_NV :: 0x86E3;
    GL_OFFSET_TEXTURE_2D_MATRIX_NV :: 0x86E1;
    GL_OFFSET_TEXTURE_2D_SCALE_NV :: 0x86E2;
    GL_OFFSET_TEXTURE_2D_BIAS_NV :: 0x86E3;
    GL_PREVIOUS_TEXTURE_INPUT_NV :: 0x86E4;
    GL_CONST_EYE_NV :: 0x86E5;
    GL_PASS_THROUGH_NV :: 0x86E6;
    GL_CULL_FRAGMENT_NV :: 0x86E7;
    GL_OFFSET_TEXTURE_2D_NV :: 0x86E8;
    GL_DEPENDENT_AR_TEXTURE_2D_NV :: 0x86E9;
    GL_DEPENDENT_GB_TEXTURE_2D_NV :: 0x86EA;
    GL_DOT_PRODUCT_NV :: 0x86EC;
    GL_DOT_PRODUCT_DEPTH_REPLACE_NV :: 0x86ED;
    GL_DOT_PRODUCT_TEXTURE_2D_NV :: 0x86EE;
    GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV :: 0x86F0;
    GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV :: 0x86F1;
    GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV :: 0x86F2;
    GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV :: 0x86F3;
    GL_HILO_NV :: 0x86F4;
    GL_DSDT_NV :: 0x86F5;
    GL_DSDT_MAG_NV :: 0x86F6;
    GL_DSDT_MAG_VIB_NV :: 0x86F7;
    GL_HILO16_NV :: 0x86F8;
    GL_SIGNED_HILO_NV :: 0x86F9;
    GL_SIGNED_HILO16_NV :: 0x86FA;
    GL_SIGNED_RGBA_NV :: 0x86FB;
    GL_SIGNED_RGBA8_NV :: 0x86FC;
    GL_SIGNED_RGB_NV :: 0x86FE;
    GL_SIGNED_RGB8_NV :: 0x86FF;
    GL_SIGNED_LUMINANCE_NV :: 0x8701;
    GL_SIGNED_LUMINANCE8_NV :: 0x8702;
    GL_SIGNED_LUMINANCE_ALPHA_NV :: 0x8703;
    GL_SIGNED_LUMINANCE8_ALPHA8_NV :: 0x8704;
    GL_SIGNED_ALPHA_NV :: 0x8705;
    GL_SIGNED_ALPHA8_NV :: 0x8706;
    GL_SIGNED_INTENSITY_NV :: 0x8707;
    GL_SIGNED_INTENSITY8_NV :: 0x8708;
    GL_DSDT8_NV :: 0x8709;
    GL_DSDT8_MAG8_NV :: 0x870A;
    GL_DSDT8_MAG8_INTENSITY8_NV :: 0x870B;
    GL_SIGNED_RGB_UNSIGNED_ALPHA_NV :: 0x870C;
    GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV :: 0x870D;
    GL_HI_SCALE_NV :: 0x870E;
    GL_LO_SCALE_NV :: 0x870F;
    GL_DS_SCALE_NV :: 0x8710;
    GL_DT_SCALE_NV :: 0x8711;
    GL_MAGNITUDE_SCALE_NV :: 0x8712;
    GL_VIBRANCE_SCALE_NV :: 0x8713;
    GL_HI_BIAS_NV :: 0x8714;
    GL_LO_BIAS_NV :: 0x8715;
    GL_DS_BIAS_NV :: 0x8716;
    GL_DT_BIAS_NV :: 0x8717;
    GL_MAGNITUDE_BIAS_NV :: 0x8718;
    GL_VIBRANCE_BIAS_NV :: 0x8719;
    GL_TEXTURE_BORDER_VALUES_NV :: 0x871A;
    GL_TEXTURE_HI_SIZE_NV :: 0x871B;
    GL_TEXTURE_LO_SIZE_NV :: 0x871C;
    GL_TEXTURE_DS_SIZE_NV :: 0x871D;
    GL_TEXTURE_DT_SIZE_NV :: 0x871E;
    GL_TEXTURE_MAG_SIZE_NV :: 0x871F;

    // GL_NV_texture_shader2
    GL_DOT_PRODUCT_TEXTURE_3D_NV :: 0x86EF;

    // GL_NV_texture_shader3
    GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV :: 0x8850;
    GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV :: 0x8851;
    GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV :: 0x8852;
    GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV :: 0x8853;
    GL_OFFSET_HILO_TEXTURE_2D_NV :: 0x8854;
    GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV :: 0x8855;
    GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV :: 0x8856;
    GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV :: 0x8857;
    GL_DEPENDENT_HILO_TEXTURE_2D_NV :: 0x8858;
    GL_DEPENDENT_RGB_TEXTURE_3D_NV :: 0x8859;
    GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV :: 0x885A;
    GL_DOT_PRODUCT_PASS_THROUGH_NV :: 0x885B;
    GL_DOT_PRODUCT_TEXTURE_1D_NV :: 0x885C;
    GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV :: 0x885D;
    GL_HILO8_NV :: 0x885E;
    GL_SIGNED_HILO8_NV :: 0x885F;
    GL_FORCE_BLUE_TO_ONE_NV :: 0x8860;

    // GL_NV_transform_feedback
    GL_BACK_PRIMARY_COLOR_NV :: 0x8C77;
    GL_BACK_SECONDARY_COLOR_NV :: 0x8C78;
    GL_TEXTURE_COORD_NV :: 0x8C79;
    GL_CLIP_DISTANCE_NV :: 0x8C7A;
    GL_VERTEX_ID_NV :: 0x8C7B;
    GL_PRIMITIVE_ID_NV :: 0x8C7C;
    GL_GENERIC_ATTRIB_NV :: 0x8C7D;
    GL_TRANSFORM_FEEDBACK_ATTRIBS_NV :: 0x8C7E;
    GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV :: 0x8C7F;
    GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV :: 0x8C80;
    GL_ACTIVE_VARYINGS_NV :: 0x8C81;
    GL_ACTIVE_VARYING_MAX_LENGTH_NV :: 0x8C82;
    GL_TRANSFORM_FEEDBACK_VARYINGS_NV :: 0x8C83;
    GL_TRANSFORM_FEEDBACK_BUFFER_START_NV :: 0x8C84;
    GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV :: 0x8C85;
    GL_TRANSFORM_FEEDBACK_RECORD_NV :: 0x8C86;
    GL_PRIMITIVES_GENERATED_NV :: 0x8C87;
    GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV :: 0x8C88;
    GL_RASTERIZER_DISCARD_NV :: 0x8C89;
    GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV :: 0x8C8A;
    GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV :: 0x8C8B;
    GL_INTERLEAVED_ATTRIBS_NV :: 0x8C8C;
    GL_SEPARATE_ATTRIBS_NV :: 0x8C8D;
    GL_TRANSFORM_FEEDBACK_BUFFER_NV :: 0x8C8E;
    GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV :: 0x8C8F;
    GL_LAYER_NV :: 0x8DAA;
    GL_NEXT_BUFFER_NV :: -2;
    GL_SKIP_COMPONENTS4_NV :: -3;
    GL_SKIP_COMPONENTS3_NV :: -4;
    GL_SKIP_COMPONENTS2_NV :: -5;
    GL_SKIP_COMPONENTS1_NV :: -6;

    // GL_NV_transform_feedback2
    GL_TRANSFORM_FEEDBACK_NV :: 0x8E22;
    GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV :: 0x8E23;
    GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV :: 0x8E24;
    GL_TRANSFORM_FEEDBACK_BINDING_NV :: 0x8E25;

    // GL_NV_uniform_buffer_unified_memory
    GL_UNIFORM_BUFFER_UNIFIED_NV :: 0x936E;
    GL_UNIFORM_BUFFER_ADDRESS_NV :: 0x936F;
    GL_UNIFORM_BUFFER_LENGTH_NV :: 0x9370;

    // GL_NV_vdpau_interop
    GL_SURFACE_STATE_NV :: 0x86EB;
    GL_SURFACE_REGISTERED_NV :: 0x86FD;
    GL_SURFACE_MAPPED_NV :: 0x8700;
    GL_WRITE_DISCARD_NV :: 0x88BE;

    // GL_NV_vertex_array_range
    GL_VERTEX_ARRAY_RANGE_NV :: 0x851D;
    GL_VERTEX_ARRAY_RANGE_LENGTH_NV :: 0x851E;
    GL_VERTEX_ARRAY_RANGE_VALID_NV :: 0x851F;
    GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV :: 0x8520;
    GL_VERTEX_ARRAY_RANGE_POINTER_NV :: 0x8521;

    // GL_NV_vertex_array_range2
    GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV :: 0x8533;

    // GL_NV_vertex_attrib_integer_64bit
    // GL_INT64_NV :: 0x140E;
    // GL_UNSIGNED_INT64_NV :: 0x140F;

    // GL_NV_vertex_buffer_unified_memory
    GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV :: 0x8F1E;
    GL_ELEMENT_ARRAY_UNIFIED_NV :: 0x8F1F;
    GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV :: 0x8F20;
    GL_VERTEX_ARRAY_ADDRESS_NV :: 0x8F21;
    GL_NORMAL_ARRAY_ADDRESS_NV :: 0x8F22;
    GL_COLOR_ARRAY_ADDRESS_NV :: 0x8F23;
    GL_INDEX_ARRAY_ADDRESS_NV :: 0x8F24;
    GL_TEXTURE_COORD_ARRAY_ADDRESS_NV :: 0x8F25;
    GL_EDGE_FLAG_ARRAY_ADDRESS_NV :: 0x8F26;
    GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV :: 0x8F27;
    GL_FOG_COORD_ARRAY_ADDRESS_NV :: 0x8F28;
    GL_ELEMENT_ARRAY_ADDRESS_NV :: 0x8F29;
    GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV :: 0x8F2A;
    GL_VERTEX_ARRAY_LENGTH_NV :: 0x8F2B;
    GL_NORMAL_ARRAY_LENGTH_NV :: 0x8F2C;
    GL_COLOR_ARRAY_LENGTH_NV :: 0x8F2D;
    GL_INDEX_ARRAY_LENGTH_NV :: 0x8F2E;
    GL_TEXTURE_COORD_ARRAY_LENGTH_NV :: 0x8F2F;
    GL_EDGE_FLAG_ARRAY_LENGTH_NV :: 0x8F30;
    GL_SECONDARY_COLOR_ARRAY_LENGTH_NV :: 0x8F31;
    GL_FOG_COORD_ARRAY_LENGTH_NV :: 0x8F32;
    GL_ELEMENT_ARRAY_LENGTH_NV :: 0x8F33;
    GL_DRAW_INDIRECT_UNIFIED_NV :: 0x8F40;
    GL_DRAW_INDIRECT_ADDRESS_NV :: 0x8F41;
    GL_DRAW_INDIRECT_LENGTH_NV :: 0x8F42;

    // GL_NV_vertex_program
    GL_VERTEX_PROGRAM_NV :: 0x8620;
    GL_VERTEX_STATE_PROGRAM_NV :: 0x8621;
    GL_ATTRIB_ARRAY_SIZE_NV :: 0x8623;
    GL_ATTRIB_ARRAY_STRIDE_NV :: 0x8624;
    GL_ATTRIB_ARRAY_TYPE_NV :: 0x8625;
    GL_CURRENT_ATTRIB_NV :: 0x8626;
    GL_PROGRAM_LENGTH_NV :: 0x8627;
    GL_PROGRAM_STRING_NV :: 0x8628;
    GL_MODELVIEW_PROJECTION_NV :: 0x8629;
    GL_IDENTITY_NV :: 0x862A;
    GL_INVERSE_NV :: 0x862B;
    GL_TRANSPOSE_NV :: 0x862C;
    GL_INVERSE_TRANSPOSE_NV :: 0x862D;
    GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV :: 0x862E;
    GL_MAX_TRACK_MATRICES_NV :: 0x862F;
    GL_MATRIX0_NV :: 0x8630;
    GL_MATRIX1_NV :: 0x8631;
    GL_MATRIX2_NV :: 0x8632;
    GL_MATRIX3_NV :: 0x8633;
    GL_MATRIX4_NV :: 0x8634;
    GL_MATRIX5_NV :: 0x8635;
    GL_MATRIX6_NV :: 0x8636;
    GL_MATRIX7_NV :: 0x8637;
    GL_CURRENT_MATRIX_STACK_DEPTH_NV :: 0x8640;
    GL_CURRENT_MATRIX_NV :: 0x8641;
    GL_VERTEX_PROGRAM_POINT_SIZE_NV :: 0x8642;
    GL_VERTEX_PROGRAM_TWO_SIDE_NV :: 0x8643;
    GL_PROGRAM_PARAMETER_NV :: 0x8644;
    GL_ATTRIB_ARRAY_POINTER_NV :: 0x8645;
    GL_PROGRAM_TARGET_NV :: 0x8646;
    GL_PROGRAM_RESIDENT_NV :: 0x8647;
    GL_TRACK_MATRIX_NV :: 0x8648;
    GL_TRACK_MATRIX_TRANSFORM_NV :: 0x8649;
    GL_VERTEX_PROGRAM_BINDING_NV :: 0x864A;
    GL_PROGRAM_ERROR_POSITION_NV :: 0x864B;
    GL_VERTEX_ATTRIB_ARRAY0_NV :: 0x8650;
    GL_VERTEX_ATTRIB_ARRAY1_NV :: 0x8651;
    GL_VERTEX_ATTRIB_ARRAY2_NV :: 0x8652;
    GL_VERTEX_ATTRIB_ARRAY3_NV :: 0x8653;
    GL_VERTEX_ATTRIB_ARRAY4_NV :: 0x8654;
    GL_VERTEX_ATTRIB_ARRAY5_NV :: 0x8655;
    GL_VERTEX_ATTRIB_ARRAY6_NV :: 0x8656;
    GL_VERTEX_ATTRIB_ARRAY7_NV :: 0x8657;
    GL_VERTEX_ATTRIB_ARRAY8_NV :: 0x8658;
    GL_VERTEX_ATTRIB_ARRAY9_NV :: 0x8659;
    GL_VERTEX_ATTRIB_ARRAY10_NV :: 0x865A;
    GL_VERTEX_ATTRIB_ARRAY11_NV :: 0x865B;
    GL_VERTEX_ATTRIB_ARRAY12_NV :: 0x865C;
    GL_VERTEX_ATTRIB_ARRAY13_NV :: 0x865D;
    GL_VERTEX_ATTRIB_ARRAY14_NV :: 0x865E;
    GL_VERTEX_ATTRIB_ARRAY15_NV :: 0x865F;
    GL_MAP1_VERTEX_ATTRIB0_4_NV :: 0x8660;
    GL_MAP1_VERTEX_ATTRIB1_4_NV :: 0x8661;
    GL_MAP1_VERTEX_ATTRIB2_4_NV :: 0x8662;
    GL_MAP1_VERTEX_ATTRIB3_4_NV :: 0x8663;
    GL_MAP1_VERTEX_ATTRIB4_4_NV :: 0x8664;
    GL_MAP1_VERTEX_ATTRIB5_4_NV :: 0x8665;
    GL_MAP1_VERTEX_ATTRIB6_4_NV :: 0x8666;
    GL_MAP1_VERTEX_ATTRIB7_4_NV :: 0x8667;
    GL_MAP1_VERTEX_ATTRIB8_4_NV :: 0x8668;
    GL_MAP1_VERTEX_ATTRIB9_4_NV :: 0x8669;
    GL_MAP1_VERTEX_ATTRIB10_4_NV :: 0x866A;
    GL_MAP1_VERTEX_ATTRIB11_4_NV :: 0x866B;
    GL_MAP1_VERTEX_ATTRIB12_4_NV :: 0x866C;
    GL_MAP1_VERTEX_ATTRIB13_4_NV :: 0x866D;
    GL_MAP1_VERTEX_ATTRIB14_4_NV :: 0x866E;
    GL_MAP1_VERTEX_ATTRIB15_4_NV :: 0x866F;
    GL_MAP2_VERTEX_ATTRIB0_4_NV :: 0x8670;
    GL_MAP2_VERTEX_ATTRIB1_4_NV :: 0x8671;
    GL_MAP2_VERTEX_ATTRIB2_4_NV :: 0x8672;
    GL_MAP2_VERTEX_ATTRIB3_4_NV :: 0x8673;
    GL_MAP2_VERTEX_ATTRIB4_4_NV :: 0x8674;
    GL_MAP2_VERTEX_ATTRIB5_4_NV :: 0x8675;
    GL_MAP2_VERTEX_ATTRIB6_4_NV :: 0x8676;
    GL_MAP2_VERTEX_ATTRIB7_4_NV :: 0x8677;
    GL_MAP2_VERTEX_ATTRIB8_4_NV :: 0x8678;
    GL_MAP2_VERTEX_ATTRIB9_4_NV :: 0x8679;
    GL_MAP2_VERTEX_ATTRIB10_4_NV :: 0x867A;
    GL_MAP2_VERTEX_ATTRIB11_4_NV :: 0x867B;
    GL_MAP2_VERTEX_ATTRIB12_4_NV :: 0x867C;
    GL_MAP2_VERTEX_ATTRIB13_4_NV :: 0x867D;
    GL_MAP2_VERTEX_ATTRIB14_4_NV :: 0x867E;
    GL_MAP2_VERTEX_ATTRIB15_4_NV :: 0x867F;

    // GL_NV_vertex_program1_1

    // GL_NV_vertex_program2

    // GL_NV_vertex_program2_option
    // GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV :: 0x88F4;
    // GL_MAX_PROGRAM_CALL_DEPTH_NV :: 0x88F5;

    // GL_NV_vertex_program3
    // GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB :: 0x8B4C;

    // GL_NV_vertex_program4
    GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV :: 0x88FD;

    // GL_NV_video_capture
    GL_VIDEO_BUFFER_NV :: 0x9020;
    GL_VIDEO_BUFFER_BINDING_NV :: 0x9021;
    GL_FIELD_UPPER_NV :: 0x9022;
    GL_FIELD_LOWER_NV :: 0x9023;
    GL_NUM_VIDEO_CAPTURE_STREAMS_NV :: 0x9024;
    GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV :: 0x9025;
    GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV :: 0x9026;
    GL_LAST_VIDEO_CAPTURE_STATUS_NV :: 0x9027;
    GL_VIDEO_BUFFER_PITCH_NV :: 0x9028;
    GL_VIDEO_COLOR_CONVERSION_MATRIX_NV :: 0x9029;
    GL_VIDEO_COLOR_CONVERSION_MAX_NV :: 0x902A;
    GL_VIDEO_COLOR_CONVERSION_MIN_NV :: 0x902B;
    GL_VIDEO_COLOR_CONVERSION_OFFSET_NV :: 0x902C;
    GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV :: 0x902D;
    GL_PARTIAL_SUCCESS_NV :: 0x902E;
    GL_SUCCESS_NV :: 0x902F;
    GL_FAILURE_NV :: 0x9030;
    GL_YCBYCR8_422_NV :: 0x9031;
    GL_YCBAYCR8A_4224_NV :: 0x9032;
    GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV :: 0x9033;
    GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV :: 0x9034;
    GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV :: 0x9035;
    GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV :: 0x9036;
    GL_Z4Y12Z4CB12Z4CR12_444_NV :: 0x9037;
    GL_VIDEO_CAPTURE_FRAME_WIDTH_NV :: 0x9038;
    GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV :: 0x9039;
    GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV :: 0x903A;
    GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV :: 0x903B;
    GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV :: 0x903C;

    // GL_NV_viewport_array2

    // GL_NV_viewport_swizzle
    GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV :: 0x9350;
    GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV :: 0x9351;
    GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV :: 0x9352;
    GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV :: 0x9353;
    GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV :: 0x9354;
    GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV :: 0x9355;
    GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV :: 0x9356;
    GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV :: 0x9357;
    GL_VIEWPORT_SWIZZLE_X_NV :: 0x9358;
    GL_VIEWPORT_SWIZZLE_Y_NV :: 0x9359;
    GL_VIEWPORT_SWIZZLE_Z_NV :: 0x935A;
    GL_VIEWPORT_SWIZZLE_W_NV :: 0x935B;

    // GL_OES_byte_coordinates
    // GL_BYTE :: 0x1400;

    // GL_OES_compressed_paletted_texture
    GL_PALETTE4_RGB8_OES :: 0x8B90;
    GL_PALETTE4_RGBA8_OES :: 0x8B91;
    GL_PALETTE4_R5_G6_B5_OES :: 0x8B92;
    GL_PALETTE4_RGBA4_OES :: 0x8B93;
    GL_PALETTE4_RGB5_A1_OES :: 0x8B94;
    GL_PALETTE8_RGB8_OES :: 0x8B95;
    GL_PALETTE8_RGBA8_OES :: 0x8B96;
    GL_PALETTE8_R5_G6_B5_OES :: 0x8B97;
    GL_PALETTE8_RGBA4_OES :: 0x8B98;
    GL_PALETTE8_RGB5_A1_OES :: 0x8B99;

    // GL_OES_fixed_point
    GL_FIXED_OES :: 0x140C;

    // GL_OES_query_matrix

    // GL_OES_read_format
    GL_IMPLEMENTATION_COLOR_READ_TYPE_OES :: 0x8B9A;
    GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES :: 0x8B9B;

    // GL_OES_single_precision

    // GL_OML_interlace
    GL_INTERLACE_OML :: 0x8980;
    GL_INTERLACE_READ_OML :: 0x8981;

    // GL_OML_resample
    GL_PACK_RESAMPLE_OML :: 0x8984;
    GL_UNPACK_RESAMPLE_OML :: 0x8985;
    GL_RESAMPLE_REPLICATE_OML :: 0x8986;
    GL_RESAMPLE_ZERO_FILL_OML :: 0x8987;
    GL_RESAMPLE_AVERAGE_OML :: 0x8988;
    GL_RESAMPLE_DECIMATE_OML :: 0x8989;

    // GL_OML_subsample
    GL_FORMAT_SUBSAMPLE_24_24_OML :: 0x8982;
    GL_FORMAT_SUBSAMPLE_244_244_OML :: 0x8983;

    // GL_OVR_multiview
    GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR :: 0x9630;
    GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR :: 0x9632;
    GL_MAX_VIEWS_OVR :: 0x9631;
    GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR :: 0x9633;

    // GL_OVR_multiview2

    // GL_PGI_misc_hints
    GL_PREFER_DOUBLEBUFFER_HINT_PGI :: 0x1A1F8;
    GL_CONSERVE_MEMORY_HINT_PGI :: 0x1A1FD;
    GL_RECLAIM_MEMORY_HINT_PGI :: 0x1A1FE;
    GL_NATIVE_GRAPHICS_HANDLE_PGI :: 0x1A202;
    GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI :: 0x1A203;
    GL_NATIVE_GRAPHICS_END_HINT_PGI :: 0x1A204;
    GL_ALWAYS_FAST_HINT_PGI :: 0x1A20C;
    GL_ALWAYS_SOFT_HINT_PGI :: 0x1A20D;
    GL_ALLOW_DRAW_OBJ_HINT_PGI :: 0x1A20E;
    GL_ALLOW_DRAW_WIN_HINT_PGI :: 0x1A20F;
    GL_ALLOW_DRAW_FRG_HINT_PGI :: 0x1A210;
    GL_ALLOW_DRAW_MEM_HINT_PGI :: 0x1A211;
    GL_STRICT_DEPTHFUNC_HINT_PGI :: 0x1A216;
    GL_STRICT_LIGHTING_HINT_PGI :: 0x1A217;
    GL_STRICT_SCISSOR_HINT_PGI :: 0x1A218;
    GL_FULL_STIPPLE_HINT_PGI :: 0x1A219;
    GL_CLIP_NEAR_HINT_PGI :: 0x1A220;
    GL_CLIP_FAR_HINT_PGI :: 0x1A221;
    GL_WIDE_LINE_HINT_PGI :: 0x1A222;
    GL_BACK_NORMALS_HINT_PGI :: 0x1A223;

    // GL_PGI_vertex_hints
    GL_VERTEX_DATA_HINT_PGI :: 0x1A22A;
    GL_VERTEX_CONSISTENT_HINT_PGI :: 0x1A22B;
    GL_MATERIAL_SIDE_HINT_PGI :: 0x1A22C;
    GL_MAX_VERTEX_HINT_PGI :: 0x1A22D;
    GL_COLOR3_BIT_PGI :: 0x00010000;
    GL_COLOR4_BIT_PGI :: 0x00020000;
    GL_EDGEFLAG_BIT_PGI :: 0x00040000;
    GL_INDEX_BIT_PGI :: 0x00080000;
    GL_MAT_AMBIENT_BIT_PGI :: 0x00100000;
    GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI :: 0x00200000;
    GL_MAT_DIFFUSE_BIT_PGI :: 0x00400000;
    GL_MAT_EMISSION_BIT_PGI :: 0x00800000;
    GL_MAT_COLOR_INDEXES_BIT_PGI :: 0x01000000;
    GL_MAT_SHININESS_BIT_PGI :: 0x02000000;
    GL_MAT_SPECULAR_BIT_PGI :: 0x04000000;
    GL_NORMAL_BIT_PGI :: 0x08000000;
    GL_TEXCOORD1_BIT_PGI :: 0x10000000;
    GL_TEXCOORD2_BIT_PGI :: 0x20000000;
    GL_TEXCOORD3_BIT_PGI :: 0x40000000;
    GL_TEXCOORD4_BIT_PGI :: 0x80000000;
    GL_VERTEX23_BIT_PGI :: 0x00000004;
    GL_VERTEX4_BIT_PGI :: 0x00000008;

    // GL_REND_screen_coordinates
    GL_SCREEN_COORDINATES_REND :: 0x8490;
    GL_INVERTED_SCREEN_W_REND :: 0x8491;

    // GL_S3_s3tc
    GL_RGB_S3TC :: 0x83A0;
    GL_RGB4_S3TC :: 0x83A1;
    GL_RGBA_S3TC :: 0x83A2;
    GL_RGBA4_S3TC :: 0x83A3;
    GL_RGBA_DXT5_S3TC :: 0x83A4;
    GL_RGBA4_DXT5_S3TC :: 0x83A5;

    // GL_SGIS_detail_texture
    GL_DETAIL_TEXTURE_2D_SGIS :: 0x8095;
    GL_DETAIL_TEXTURE_2D_BINDING_SGIS :: 0x8096;
    GL_LINEAR_DETAIL_SGIS :: 0x8097;
    GL_LINEAR_DETAIL_ALPHA_SGIS :: 0x8098;
    GL_LINEAR_DETAIL_COLOR_SGIS :: 0x8099;
    GL_DETAIL_TEXTURE_LEVEL_SGIS :: 0x809A;
    GL_DETAIL_TEXTURE_MODE_SGIS :: 0x809B;
    GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS :: 0x809C;

    // GL_SGIS_fog_function
    GL_FOG_FUNC_SGIS :: 0x812A;
    GL_FOG_FUNC_POINTS_SGIS :: 0x812B;
    GL_MAX_FOG_FUNC_POINTS_SGIS :: 0x812C;

    // GL_SGIS_generate_mipmap
    GL_GENERATE_MIPMAP_SGIS :: 0x8191;
    GL_GENERATE_MIPMAP_HINT_SGIS :: 0x8192;

    // GL_SGIS_multisample
    GL_MULTISAMPLE_SGIS :: 0x809D;
    GL_SAMPLE_ALPHA_TO_MASK_SGIS :: 0x809E;
    GL_SAMPLE_ALPHA_TO_ONE_SGIS :: 0x809F;
    GL_SAMPLE_MASK_SGIS :: 0x80A0;
    GL_1PASS_SGIS :: 0x80A1;
    GL_2PASS_0_SGIS :: 0x80A2;
    GL_2PASS_1_SGIS :: 0x80A3;
    GL_4PASS_0_SGIS :: 0x80A4;
    GL_4PASS_1_SGIS :: 0x80A5;
    GL_4PASS_2_SGIS :: 0x80A6;
    GL_4PASS_3_SGIS :: 0x80A7;
    GL_SAMPLE_BUFFERS_SGIS :: 0x80A8;
    GL_SAMPLES_SGIS :: 0x80A9;
    GL_SAMPLE_MASK_VALUE_SGIS :: 0x80AA;
    GL_SAMPLE_MASK_INVERT_SGIS :: 0x80AB;
    GL_SAMPLE_PATTERN_SGIS :: 0x80AC;

    // GL_SGIS_pixel_texture
    GL_PIXEL_TEXTURE_SGIS :: 0x8353;
    GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS :: 0x8354;
    GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS :: 0x8355;
    GL_PIXEL_GROUP_COLOR_SGIS :: 0x8356;

    // GL_SGIS_point_line_texgen
    GL_EYE_DISTANCE_TO_POINT_SGIS :: 0x81F0;
    GL_OBJECT_DISTANCE_TO_POINT_SGIS :: 0x81F1;
    GL_EYE_DISTANCE_TO_LINE_SGIS :: 0x81F2;
    GL_OBJECT_DISTANCE_TO_LINE_SGIS :: 0x81F3;
    GL_EYE_POINT_SGIS :: 0x81F4;
    GL_OBJECT_POINT_SGIS :: 0x81F5;
    GL_EYE_LINE_SGIS :: 0x81F6;
    GL_OBJECT_LINE_SGIS :: 0x81F7;

    // GL_SGIS_point_parameters
    GL_POINT_SIZE_MIN_SGIS :: 0x8126;
    GL_POINT_SIZE_MAX_SGIS :: 0x8127;
    GL_POINT_FADE_THRESHOLD_SIZE_SGIS :: 0x8128;
    GL_DISTANCE_ATTENUATION_SGIS :: 0x8129;

    // GL_SGIS_sharpen_texture
    GL_LINEAR_SHARPEN_SGIS :: 0x80AD;
    GL_LINEAR_SHARPEN_ALPHA_SGIS :: 0x80AE;
    GL_LINEAR_SHARPEN_COLOR_SGIS :: 0x80AF;
    GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS :: 0x80B0;

    // GL_SGIS_texture4D
    GL_PACK_SKIP_VOLUMES_SGIS :: 0x8130;
    GL_PACK_IMAGE_DEPTH_SGIS :: 0x8131;
    GL_UNPACK_SKIP_VOLUMES_SGIS :: 0x8132;
    GL_UNPACK_IMAGE_DEPTH_SGIS :: 0x8133;
    GL_TEXTURE_4D_SGIS :: 0x8134;
    GL_PROXY_TEXTURE_4D_SGIS :: 0x8135;
    GL_TEXTURE_4DSIZE_SGIS :: 0x8136;
    GL_TEXTURE_WRAP_Q_SGIS :: 0x8137;
    GL_MAX_4D_TEXTURE_SIZE_SGIS :: 0x8138;
    GL_TEXTURE_4D_BINDING_SGIS :: 0x814F;

    // GL_SGIS_texture_border_clamp
    GL_CLAMP_TO_BORDER_SGIS :: 0x812D;

    // GL_SGIS_texture_color_mask
    GL_TEXTURE_COLOR_WRITEMASK_SGIS :: 0x81EF;

    // GL_SGIS_texture_edge_clamp
    GL_CLAMP_TO_EDGE_SGIS :: 0x812F;

    // GL_SGIS_texture_filter4
    GL_FILTER4_SGIS :: 0x8146;
    GL_TEXTURE_FILTER4_SIZE_SGIS :: 0x8147;

    // GL_SGIS_texture_lod
    GL_TEXTURE_MIN_LOD_SGIS :: 0x813A;
    GL_TEXTURE_MAX_LOD_SGIS :: 0x813B;
    GL_TEXTURE_BASE_LEVEL_SGIS :: 0x813C;
    GL_TEXTURE_MAX_LEVEL_SGIS :: 0x813D;

    // GL_SGIS_texture_select
    GL_DUAL_ALPHA4_SGIS :: 0x8110;
    GL_DUAL_ALPHA8_SGIS :: 0x8111;
    GL_DUAL_ALPHA12_SGIS :: 0x8112;
    GL_DUAL_ALPHA16_SGIS :: 0x8113;
    GL_DUAL_LUMINANCE4_SGIS :: 0x8114;
    GL_DUAL_LUMINANCE8_SGIS :: 0x8115;
    GL_DUAL_LUMINANCE12_SGIS :: 0x8116;
    GL_DUAL_LUMINANCE16_SGIS :: 0x8117;
    GL_DUAL_INTENSITY4_SGIS :: 0x8118;
    GL_DUAL_INTENSITY8_SGIS :: 0x8119;
    GL_DUAL_INTENSITY12_SGIS :: 0x811A;
    GL_DUAL_INTENSITY16_SGIS :: 0x811B;
    GL_DUAL_LUMINANCE_ALPHA4_SGIS :: 0x811C;
    GL_DUAL_LUMINANCE_ALPHA8_SGIS :: 0x811D;
    GL_QUAD_ALPHA4_SGIS :: 0x811E;
    GL_QUAD_ALPHA8_SGIS :: 0x811F;
    GL_QUAD_LUMINANCE4_SGIS :: 0x8120;
    GL_QUAD_LUMINANCE8_SGIS :: 0x8121;
    GL_QUAD_INTENSITY4_SGIS :: 0x8122;
    GL_QUAD_INTENSITY8_SGIS :: 0x8123;
    GL_DUAL_TEXTURE_SELECT_SGIS :: 0x8124;
    GL_QUAD_TEXTURE_SELECT_SGIS :: 0x8125;

    // GL_SGIX_async
    GL_ASYNC_MARKER_SGIX :: 0x8329;

    // GL_SGIX_async_histogram
    GL_ASYNC_HISTOGRAM_SGIX :: 0x832C;
    GL_MAX_ASYNC_HISTOGRAM_SGIX :: 0x832D;

    // GL_SGIX_async_pixel
    GL_ASYNC_TEX_IMAGE_SGIX :: 0x835C;
    GL_ASYNC_DRAW_PIXELS_SGIX :: 0x835D;
    GL_ASYNC_READ_PIXELS_SGIX :: 0x835E;
    GL_MAX_ASYNC_TEX_IMAGE_SGIX :: 0x835F;
    GL_MAX_ASYNC_DRAW_PIXELS_SGIX :: 0x8360;
    GL_MAX_ASYNC_READ_PIXELS_SGIX :: 0x8361;

    // GL_SGIX_blend_alpha_minmax
    GL_ALPHA_MIN_SGIX :: 0x8320;
    GL_ALPHA_MAX_SGIX :: 0x8321;

    // GL_SGIX_calligraphic_fragment
    GL_CALLIGRAPHIC_FRAGMENT_SGIX :: 0x8183;

    // GL_SGIX_clipmap
    GL_LINEAR_CLIPMAP_LINEAR_SGIX :: 0x8170;
    GL_TEXTURE_CLIPMAP_CENTER_SGIX :: 0x8171;
    GL_TEXTURE_CLIPMAP_FRAME_SGIX :: 0x8172;
    GL_TEXTURE_CLIPMAP_OFFSET_SGIX :: 0x8173;
    GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX :: 0x8174;
    GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX :: 0x8175;
    GL_TEXTURE_CLIPMAP_DEPTH_SGIX :: 0x8176;
    GL_MAX_CLIPMAP_DEPTH_SGIX :: 0x8177;
    GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX :: 0x8178;
    GL_NEAREST_CLIPMAP_NEAREST_SGIX :: 0x844D;
    GL_NEAREST_CLIPMAP_LINEAR_SGIX :: 0x844E;
    GL_LINEAR_CLIPMAP_NEAREST_SGIX :: 0x844F;

    // GL_SGIX_convolution_accuracy
    GL_CONVOLUTION_HINT_SGIX :: 0x8316;

    // GL_SGIX_depth_pass_instrument

    // GL_SGIX_depth_texture
    GL_DEPTH_COMPONENT16_SGIX :: 0x81A5;
    GL_DEPTH_COMPONENT24_SGIX :: 0x81A6;
    GL_DEPTH_COMPONENT32_SGIX :: 0x81A7;

    // GL_SGIX_flush_raster

    // GL_SGIX_fog_offset
    GL_FOG_OFFSET_SGIX :: 0x8198;
    GL_FOG_OFFSET_VALUE_SGIX :: 0x8199;

    // GL_SGIX_fragment_lighting
    GL_FRAGMENT_LIGHTING_SGIX :: 0x8400;
    GL_FRAGMENT_COLOR_MATERIAL_SGIX :: 0x8401;
    GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX :: 0x8402;
    GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX :: 0x8403;
    GL_MAX_FRAGMENT_LIGHTS_SGIX :: 0x8404;
    GL_MAX_ACTIVE_LIGHTS_SGIX :: 0x8405;
    GL_CURRENT_RASTER_NORMAL_SGIX :: 0x8406;
    GL_LIGHT_ENV_MODE_SGIX :: 0x8407;
    GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX :: 0x8408;
    GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX :: 0x8409;
    GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX :: 0x840A;
    GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX :: 0x840B;
    GL_FRAGMENT_LIGHT0_SGIX :: 0x840C;
    GL_FRAGMENT_LIGHT1_SGIX :: 0x840D;
    GL_FRAGMENT_LIGHT2_SGIX :: 0x840E;
    GL_FRAGMENT_LIGHT3_SGIX :: 0x840F;
    GL_FRAGMENT_LIGHT4_SGIX :: 0x8410;
    GL_FRAGMENT_LIGHT5_SGIX :: 0x8411;
    GL_FRAGMENT_LIGHT6_SGIX :: 0x8412;
    GL_FRAGMENT_LIGHT7_SGIX :: 0x8413;

    // GL_SGIX_framezoom
    GL_FRAMEZOOM_SGIX :: 0x818B;
    GL_FRAMEZOOM_FACTOR_SGIX :: 0x818C;
    GL_MAX_FRAMEZOOM_FACTOR_SGIX :: 0x818D;

    // GL_SGIX_igloo_interface

    // GL_SGIX_instruments
    GL_INSTRUMENT_BUFFER_POINTER_SGIX :: 0x8180;
    GL_INSTRUMENT_MEASUREMENTS_SGIX :: 0x8181;

    // GL_SGIX_interlace
    GL_INTERLACE_SGIX :: 0x8094;

    // GL_SGIX_ir_instrument1
    GL_IR_INSTRUMENT1_SGIX :: 0x817F;

    // GL_SGIX_list_priority
    GL_LIST_PRIORITY_SGIX :: 0x8182;

    // GL_SGIX_pixel_texture
    GL_PIXEL_TEX_GEN_SGIX :: 0x8139;
    GL_PIXEL_TEX_GEN_MODE_SGIX :: 0x832B;

    // GL_SGIX_pixel_tiles
    GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX :: 0x813E;
    GL_PIXEL_TILE_CACHE_INCREMENT_SGIX :: 0x813F;
    GL_PIXEL_TILE_WIDTH_SGIX :: 0x8140;
    GL_PIXEL_TILE_HEIGHT_SGIX :: 0x8141;
    GL_PIXEL_TILE_GRID_WIDTH_SGIX :: 0x8142;
    GL_PIXEL_TILE_GRID_HEIGHT_SGIX :: 0x8143;
    GL_PIXEL_TILE_GRID_DEPTH_SGIX :: 0x8144;
    GL_PIXEL_TILE_CACHE_SIZE_SGIX :: 0x8145;

    // GL_SGIX_polynomial_ffd
    GL_TEXTURE_DEFORMATION_BIT_SGIX :: 0x00000001;
    GL_GEOMETRY_DEFORMATION_BIT_SGIX :: 0x00000002;
    GL_GEOMETRY_DEFORMATION_SGIX :: 0x8194;
    GL_TEXTURE_DEFORMATION_SGIX :: 0x8195;
    GL_DEFORMATIONS_MASK_SGIX :: 0x8196;
    GL_MAX_DEFORMATION_ORDER_SGIX :: 0x8197;

    // GL_SGIX_reference_plane
    GL_REFERENCE_PLANE_SGIX :: 0x817D;
    GL_REFERENCE_PLANE_EQUATION_SGIX :: 0x817E;

    // GL_SGIX_resample
    GL_PACK_RESAMPLE_SGIX :: 0x842E;
    GL_UNPACK_RESAMPLE_SGIX :: 0x842F;
    GL_RESAMPLE_REPLICATE_SGIX :: 0x8433;
    GL_RESAMPLE_ZERO_FILL_SGIX :: 0x8434;
    GL_RESAMPLE_DECIMATE_SGIX :: 0x8430;

    // GL_SGIX_scalebias_hint
    GL_SCALEBIAS_HINT_SGIX :: 0x8322;

    // GL_SGIX_shadow
    GL_TEXTURE_COMPARE_SGIX :: 0x819A;
    GL_TEXTURE_COMPARE_OPERATOR_SGIX :: 0x819B;
    GL_TEXTURE_LEQUAL_R_SGIX :: 0x819C;
    GL_TEXTURE_GEQUAL_R_SGIX :: 0x819D;

    // GL_SGIX_shadow_ambient
    GL_SHADOW_AMBIENT_SGIX :: 0x80BF;

    // GL_SGIX_sprite
    GL_SPRITE_SGIX :: 0x8148;
    GL_SPRITE_MODE_SGIX :: 0x8149;
    GL_SPRITE_AXIS_SGIX :: 0x814A;
    GL_SPRITE_TRANSLATION_SGIX :: 0x814B;
    GL_SPRITE_AXIAL_SGIX :: 0x814C;
    GL_SPRITE_OBJECT_ALIGNED_SGIX :: 0x814D;
    GL_SPRITE_EYE_ALIGNED_SGIX :: 0x814E;

    // GL_SGIX_subsample
    GL_PACK_SUBSAMPLE_RATE_SGIX :: 0x85A0;
    GL_UNPACK_SUBSAMPLE_RATE_SGIX :: 0x85A1;
    GL_PIXEL_SUBSAMPLE_4444_SGIX :: 0x85A2;
    GL_PIXEL_SUBSAMPLE_2424_SGIX :: 0x85A3;
    GL_PIXEL_SUBSAMPLE_4242_SGIX :: 0x85A4;

    // GL_SGIX_tag_sample_buffer

    // GL_SGIX_texture_add_env
    GL_TEXTURE_ENV_BIAS_SGIX :: 0x80BE;

    // GL_SGIX_texture_coordinate_clamp
    GL_TEXTURE_MAX_CLAMP_S_SGIX :: 0x8369;
    GL_TEXTURE_MAX_CLAMP_T_SGIX :: 0x836A;
    GL_TEXTURE_MAX_CLAMP_R_SGIX :: 0x836B;

    // GL_SGIX_texture_lod_bias
    GL_TEXTURE_LOD_BIAS_S_SGIX :: 0x818E;
    GL_TEXTURE_LOD_BIAS_T_SGIX :: 0x818F;
    GL_TEXTURE_LOD_BIAS_R_SGIX :: 0x8190;

    // GL_SGIX_texture_multi_buffer
    GL_TEXTURE_MULTI_BUFFER_HINT_SGIX :: 0x812E;

    // GL_SGIX_texture_scale_bias
    GL_POST_TEXTURE_FILTER_BIAS_SGIX :: 0x8179;
    GL_POST_TEXTURE_FILTER_SCALE_SGIX :: 0x817A;
    GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX :: 0x817B;
    GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX :: 0x817C;

    // GL_SGIX_vertex_preclip
    GL_VERTEX_PRECLIP_SGIX :: 0x83EE;
    GL_VERTEX_PRECLIP_HINT_SGIX :: 0x83EF;

    // GL_SGIX_ycrcb
    GL_YCRCB_422_SGIX :: 0x81BB;
    GL_YCRCB_444_SGIX :: 0x81BC;

    // GL_SGIX_ycrcb_subsample

    // GL_SGIX_ycrcba
    GL_YCRCB_SGIX :: 0x8318;
    GL_YCRCBA_SGIX :: 0x8319;

    // GL_SGI_color_matrix
    GL_COLOR_MATRIX_SGI :: 0x80B1;
    GL_COLOR_MATRIX_STACK_DEPTH_SGI :: 0x80B2;
    GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI :: 0x80B3;
    GL_POST_COLOR_MATRIX_RED_SCALE_SGI :: 0x80B4;
    GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI :: 0x80B5;
    GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI :: 0x80B6;
    GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI :: 0x80B7;
    GL_POST_COLOR_MATRIX_RED_BIAS_SGI :: 0x80B8;
    GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI :: 0x80B9;
    GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI :: 0x80BA;
    GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI :: 0x80BB;

    // GL_SGI_color_table
    GL_COLOR_TABLE_SGI :: 0x80D0;
    GL_POST_CONVOLUTION_COLOR_TABLE_SGI :: 0x80D1;
    GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI :: 0x80D2;
    GL_PROXY_COLOR_TABLE_SGI :: 0x80D3;
    GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI :: 0x80D4;
    GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI :: 0x80D5;
    GL_COLOR_TABLE_SCALE_SGI :: 0x80D6;
    GL_COLOR_TABLE_BIAS_SGI :: 0x80D7;
    GL_COLOR_TABLE_FORMAT_SGI :: 0x80D8;
    GL_COLOR_TABLE_WIDTH_SGI :: 0x80D9;
    GL_COLOR_TABLE_RED_SIZE_SGI :: 0x80DA;
    GL_COLOR_TABLE_GREEN_SIZE_SGI :: 0x80DB;
    GL_COLOR_TABLE_BLUE_SIZE_SGI :: 0x80DC;
    GL_COLOR_TABLE_ALPHA_SIZE_SGI :: 0x80DD;
    GL_COLOR_TABLE_LUMINANCE_SIZE_SGI :: 0x80DE;
    GL_COLOR_TABLE_INTENSITY_SIZE_SGI :: 0x80DF;

    // GL_SGI_texture_color_table
    GL_TEXTURE_COLOR_TABLE_SGI :: 0x80BC;
    GL_PROXY_TEXTURE_COLOR_TABLE_SGI :: 0x80BD;

    // GL_SUNX_constant_data
    GL_UNPACK_CONSTANT_DATA_SUNX :: 0x81D5;
    GL_TEXTURE_CONSTANT_DATA_SUNX :: 0x81D6;

    // GL_SUN_convolution_border_modes
    GL_WRAP_BORDER_SUN :: 0x81D4;

    // GL_SUN_global_alpha
    GL_GLOBAL_ALPHA_SUN :: 0x81D9;
    GL_GLOBAL_ALPHA_FACTOR_SUN :: 0x81DA;

    // GL_SUN_mesh_array
    GL_QUAD_MESH_SUN :: 0x8614;
    GL_TRIANGLE_MESH_SUN :: 0x8615;

    // GL_SUN_slice_accum
    GL_SLICE_ACCUM_SUN :: 0x85CC;

    // GL_SUN_triangle_list
    GL_RESTART_SUN :: 0x0001;
    GL_REPLACE_MIDDLE_SUN :: 0x0002;
    GL_REPLACE_OLDEST_SUN :: 0x0003;
    GL_TRIANGLE_LIST_SUN :: 0x81D7;
    GL_REPLACEMENT_CODE_SUN :: 0x81D8;
    GL_REPLACEMENT_CODE_ARRAY_SUN :: 0x85C0;
    GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN :: 0x85C1;
    GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN :: 0x85C2;
    GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN :: 0x85C3;
    GL_R1UI_V3F_SUN :: 0x85C4;
    GL_R1UI_C4UB_V3F_SUN :: 0x85C5;
    GL_R1UI_C3F_V3F_SUN :: 0x85C6;
    GL_R1UI_N3F_V3F_SUN :: 0x85C7;
    GL_R1UI_C4F_N3F_V3F_SUN :: 0x85C8;
    GL_R1UI_T2F_V3F_SUN :: 0x85C9;
    GL_R1UI_T2F_N3F_V3F_SUN :: 0x85CA;
    GL_R1UI_T2F_C4F_N3F_V3F_SUN :: 0x85CB;

    // GL_SUN_vertex

    // GL_WIN_phong_shading
    GL_PHONG_WIN :: 0x80EA;
    GL_PHONG_HINT_WIN :: 0x80EB;

    // GL_WIN_specular_fog
    GL_FOG_SPECULAR_TEXTURE_WIN :: 0x80EC;

    // Extension functions:

    // GL_3DFX_multisample

    // GL_3DFX_tbuffer
    glTbufferMask3DFX : (mask: GLuint) #c_call;

    // GL_3DFX_texture_compression_FXT1

    // GL_AMD_blend_minmax_factor

    // GL_AMD_conservative_depth

    // GL_AMD_debug_output
    glDebugMessageEnableAMD : (category: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) #c_call;
    glDebugMessageInsertAMD : (category: GLenum, severity: GLenum, id: GLuint, length: GLsizei, buf: *GLchar) #c_call;
    glDebugMessageCallbackAMD : (callback: GLDEBUGPROCAMD, userParam: *void) #c_call;
    glGetDebugMessageLogAMD : (count: GLuint, bufsize: GLsizei, categories: *GLenum, severities: *GLuint, ids: *GLuint, lengths: *GLsizei, message: *GLchar) -> GLuint #c_call;

    // GL_AMD_depth_clamp_separate

    // GL_AMD_draw_buffers_blend
    glBlendFuncIndexedAMD : (buf: GLuint, src: GLenum, dst: GLenum) #c_call;
    glBlendFuncSeparateIndexedAMD : (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) #c_call;
    glBlendEquationIndexedAMD : (buf: GLuint, mode: GLenum) #c_call;
    glBlendEquationSeparateIndexedAMD : (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) #c_call;

    // GL_AMD_framebuffer_sample_positions
    glFramebufferSamplePositionsfvAMD : (target: GLenum, numsamples: GLuint, pixelindex: GLuint, values: *GLfloat) #c_call;
    glNamedFramebufferSamplePositionsfvAMD : (framebuffer: GLuint, numsamples: GLuint, pixelindex: GLuint, values: *GLfloat) #c_call;
    glGetFramebufferParameterfvAMD : (target: GLenum, pname: GLenum, numsamples: GLuint, pixelindex: GLuint, size: GLsizei, values: *GLfloat) #c_call;
    glGetNamedFramebufferParameterfvAMD : (framebuffer: GLuint, pname: GLenum, numsamples: GLuint, pixelindex: GLuint, size: GLsizei, values: *GLfloat) #c_call;

    // GL_AMD_gcn_shader

    // GL_AMD_gpu_shader_half_float

    // GL_AMD_gpu_shader_int16

    // GL_AMD_gpu_shader_int64
    glUniform1i64NV : (location: GLint, x: GLint64EXT) #c_call;
    glUniform2i64NV : (location: GLint, x: GLint64EXT, y: GLint64EXT) #c_call;
    glUniform3i64NV : (location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) #c_call;
    glUniform4i64NV : (location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) #c_call;
    glUniform1i64vNV : (location: GLint, count: GLsizei, value: *GLint64EXT) #c_call;
    glUniform2i64vNV : (location: GLint, count: GLsizei, value: *GLint64EXT) #c_call;
    glUniform3i64vNV : (location: GLint, count: GLsizei, value: *GLint64EXT) #c_call;
    glUniform4i64vNV : (location: GLint, count: GLsizei, value: *GLint64EXT) #c_call;
    glUniform1ui64NV : (location: GLint, x: GLuint64EXT) #c_call;
    glUniform2ui64NV : (location: GLint, x: GLuint64EXT, y: GLuint64EXT) #c_call;
    glUniform3ui64NV : (location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) #c_call;
    glUniform4ui64NV : (location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) #c_call;
    glUniform1ui64vNV : (location: GLint, count: GLsizei, value: *GLuint64EXT) #c_call;
    glUniform2ui64vNV : (location: GLint, count: GLsizei, value: *GLuint64EXT) #c_call;
    glUniform3ui64vNV : (location: GLint, count: GLsizei, value: *GLuint64EXT) #c_call;
    glUniform4ui64vNV : (location: GLint, count: GLsizei, value: *GLuint64EXT) #c_call;
    glGetUniformi64vNV : (program: GLuint, location: GLint, params: *GLint64EXT) #c_call;
    glGetUniformui64vNV : (program: GLuint, location: GLint, params: *GLuint64EXT) #c_call;
    glProgramUniform1i64NV : (program: GLuint, location: GLint, x: GLint64EXT) #c_call;
    glProgramUniform2i64NV : (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT) #c_call;
    glProgramUniform3i64NV : (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) #c_call;
    glProgramUniform4i64NV : (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) #c_call;
    glProgramUniform1i64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) #c_call;
    glProgramUniform2i64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) #c_call;
    glProgramUniform3i64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) #c_call;
    glProgramUniform4i64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) #c_call;
    glProgramUniform1ui64NV : (program: GLuint, location: GLint, x: GLuint64EXT) #c_call;
    glProgramUniform2ui64NV : (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT) #c_call;
    glProgramUniform3ui64NV : (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) #c_call;
    glProgramUniform4ui64NV : (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) #c_call;
    glProgramUniform1ui64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) #c_call;
    glProgramUniform2ui64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) #c_call;
    glProgramUniform3ui64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) #c_call;
    glProgramUniform4ui64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) #c_call;

    // GL_AMD_interleaved_elements
    glVertexAttribParameteriAMD : (index: GLuint, pname: GLenum, param: GLint) #c_call;

    // GL_AMD_multi_draw_indirect
    glMultiDrawArraysIndirectAMD : (mode: GLenum, indirect: *void, primcount: GLsizei, stride: GLsizei) #c_call;
    glMultiDrawElementsIndirectAMD : (mode: GLenum, type: GLenum, indirect: *void, primcount: GLsizei, stride: GLsizei) #c_call;

    // GL_AMD_name_gen_delete
    glGenNamesAMD : (identifier: GLenum, num: GLuint, names: *GLuint) #c_call;
    glDeleteNamesAMD : (identifier: GLenum, num: GLuint, names: *GLuint) #c_call;
    glIsNameAMD : (identifier: GLenum, name: GLuint) -> GLboolean #c_call;

    // GL_AMD_occlusion_query_event
    glQueryObjectParameteruiAMD : (target: GLenum, id: GLuint, pname: GLenum, param: GLuint) #c_call;

    // GL_AMD_performance_monitor
    glGetPerfMonitorGroupsAMD : (numGroups: *GLint, groupsSize: GLsizei, groups: *GLuint) #c_call;
    glGetPerfMonitorCountersAMD : (group: GLuint, numCounters: *GLint, maxActiveCounters: *GLint, counterSize: GLsizei, counters: *GLuint) #c_call;
    glGetPerfMonitorGroupStringAMD : (group: GLuint, bufSize: GLsizei, length: *GLsizei, groupString: *GLchar) #c_call;
    glGetPerfMonitorCounterStringAMD : (group: GLuint, counter: GLuint, bufSize: GLsizei, length: *GLsizei, counterString: *GLchar) #c_call;
    glGetPerfMonitorCounterInfoAMD : (group: GLuint, counter: GLuint, pname: GLenum, data: *void) #c_call;
    glGenPerfMonitorsAMD : (n: GLsizei, monitors: *GLuint) #c_call;
    glDeletePerfMonitorsAMD : (n: GLsizei, monitors: *GLuint) #c_call;
    glSelectPerfMonitorCountersAMD : (monitor: GLuint, enable: GLboolean, group: GLuint, numCounters: GLint, counterList: *GLuint) #c_call;
    glBeginPerfMonitorAMD : (monitor: GLuint) #c_call;
    glEndPerfMonitorAMD : (monitor: GLuint) #c_call;
    glGetPerfMonitorCounterDataAMD : (monitor: GLuint, pname: GLenum, dataSize: GLsizei, data: *GLuint, bytesWritten: *GLint) #c_call;

    // GL_AMD_pinned_memory

    // GL_AMD_query_buffer_object

    // GL_AMD_sample_positions
    glSetMultisamplefvAMD : (pname: GLenum, index: GLuint, val: *GLfloat) #c_call;

    // GL_AMD_seamless_cubemap_per_texture

    // GL_AMD_shader_atomic_counter_ops

    // GL_AMD_shader_ballot

    // GL_AMD_shader_explicit_vertex_parameter

    // GL_AMD_shader_gpu_shader_half_float_fetch

    // GL_AMD_shader_image_load_store_lod

    // GL_AMD_shader_stencil_export

    // GL_AMD_shader_trinary_minmax

    // GL_AMD_sparse_texture
    glTexStorageSparseAMD : (target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) #c_call;
    glTextureStorageSparseAMD : (texture: GLuint, target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) #c_call;

    // GL_AMD_stencil_operation_extended
    glStencilOpValueAMD : (face: GLenum, value: GLuint) #c_call;

    // GL_AMD_texture_gather_bias_lod

    // GL_AMD_texture_texture4

    // GL_AMD_transform_feedback3_lines_triangles

    // GL_AMD_transform_feedback4

    // GL_AMD_vertex_shader_layer

    // GL_AMD_vertex_shader_tessellator
    glTessellationFactorAMD : (factor: GLfloat) #c_call;
    glTessellationModeAMD : (mode: GLenum) #c_call;

    // GL_AMD_vertex_shader_viewport_index

    // GL_APPLE_aux_depth_stencil

    // GL_APPLE_client_storage

    // GL_APPLE_element_array
    glElementPointerAPPLE : (type: GLenum, pointer: *void) #c_call;
    glDrawElementArrayAPPLE : (mode: GLenum, first: GLint, count: GLsizei) #c_call;
    glDrawRangeElementArrayAPPLE : (mode: GLenum, start: GLuint, end: GLuint, first: GLint, count: GLsizei) #c_call;
    glMultiDrawElementArrayAPPLE : (mode: GLenum, first: *GLint, count: *GLsizei, primcount: GLsizei) #c_call;
    glMultiDrawRangeElementArrayAPPLE : (mode: GLenum, start: GLuint, end: GLuint, first: *GLint, count: *GLsizei, primcount: GLsizei) #c_call;

    // GL_APPLE_fence
    glGenFencesAPPLE : (n: GLsizei, fences: *GLuint) #c_call;
    glDeleteFencesAPPLE : (n: GLsizei, fences: *GLuint) #c_call;
    glSetFenceAPPLE : (fence: GLuint) #c_call;
    glIsFenceAPPLE : (fence: GLuint) -> GLboolean #c_call;
    glTestFenceAPPLE : (fence: GLuint) -> GLboolean #c_call;
    glFinishFenceAPPLE : (fence: GLuint) #c_call;
    glTestObjectAPPLE : (object: GLenum, name: GLuint) -> GLboolean #c_call;
    glFinishObjectAPPLE : (object: GLenum, name: GLint) #c_call;

    // GL_APPLE_float_pixels

    // GL_APPLE_flush_buffer_range
    glBufferParameteriAPPLE : (target: GLenum, pname: GLenum, param: GLint) #c_call;
    glFlushMappedBufferRangeAPPLE : (target: GLenum, offset: GLintptr, size: GLsizeiptr) #c_call;

    // GL_APPLE_object_purgeable
    glObjectPurgeableAPPLE : (objectType: GLenum, name: GLuint, option: GLenum) -> GLenum #c_call;
    glObjectUnpurgeableAPPLE : (objectType: GLenum, name: GLuint, option: GLenum) -> GLenum #c_call;
    glGetObjectParameterivAPPLE : (objectType: GLenum, name: GLuint, pname: GLenum, params: *GLint) #c_call;

    // GL_APPLE_rgb_422

    // GL_APPLE_row_bytes

    // GL_APPLE_specular_vector

    // GL_APPLE_texture_range
    glTextureRangeAPPLE : (target: GLenum, length: GLsizei, pointer: *void) #c_call;
    glGetTexParameterPointervAPPLE : (target: GLenum, pname: GLenum, params: **void) #c_call;

    // GL_APPLE_transform_hint

    // GL_APPLE_vertex_array_object
    glBindVertexArrayAPPLE : (array: GLuint) #c_call;
    glDeleteVertexArraysAPPLE : (n: GLsizei, arrays: *GLuint) #c_call;
    glGenVertexArraysAPPLE : (n: GLsizei, arrays: *GLuint) #c_call;
    glIsVertexArrayAPPLE : (array: GLuint) -> GLboolean #c_call;

    // GL_APPLE_vertex_array_range
    glVertexArrayRangeAPPLE : (length: GLsizei, pointer: *void) #c_call;
    glFlushVertexArrayRangeAPPLE : (length: GLsizei, pointer: *void) #c_call;
    glVertexArrayParameteriAPPLE : (pname: GLenum, param: GLint) #c_call;

    // GL_APPLE_vertex_program_evaluators
    glEnableVertexAttribAPPLE : (index: GLuint, pname: GLenum) #c_call;
    glDisableVertexAttribAPPLE : (index: GLuint, pname: GLenum) #c_call;
    glIsVertexAttribEnabledAPPLE : (index: GLuint, pname: GLenum) -> GLboolean #c_call;
    glMapVertexAttrib1dAPPLE : (index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: *GLdouble) #c_call;
    glMapVertexAttrib1fAPPLE : (index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: *GLfloat) #c_call;
    glMapVertexAttrib2dAPPLE : (index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: *GLdouble) #c_call;
    glMapVertexAttrib2fAPPLE : (index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: *GLfloat) #c_call;

    // GL_APPLE_ycbcr_422

    // GL_ARB_ES2_compatibility
    // glReleaseShaderCompiler : () #c_call;
    // glShaderBinary : (count: GLsizei, shaders: *GLuint, binaryformat: GLenum, binary: *void, length: GLsizei) #c_call;
    // glGetShaderPrecisionFormat : (shadertype: GLenum, precisiontype: GLenum, range: *GLint, precision: *GLint) #c_call;
    // glDepthRangef : (n: GLfloat, f: GLfloat) #c_call;
    // glClearDepthf : (d: GLfloat) #c_call;

    // GL_ARB_ES3_1_compatibility
    // glMemoryBarrierByRegion : (barriers: GLbitfield) #c_call;

    // GL_ARB_ES3_2_compatibility
    glPrimitiveBoundingBoxARB : (minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat) #c_call;

    // GL_ARB_ES3_compatibility

    // GL_ARB_arrays_of_arrays

    // GL_ARB_base_instance
    // glDrawArraysInstancedBaseInstance : (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint) #c_call;
    // glDrawElementsInstancedBaseInstance : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei, baseinstance: GLuint) #c_call;
    // glDrawElementsInstancedBaseVertexBaseInstance : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint) #c_call;

    // GL_ARB_bindless_texture
    glGetTextureHandleARB : (texture: GLuint) -> GLuint64 #c_call;
    glGetTextureSamplerHandleARB : (texture: GLuint, sampler: GLuint) -> GLuint64 #c_call;
    glMakeTextureHandleResidentARB : (handle: GLuint64) #c_call;
    glMakeTextureHandleNonResidentARB : (handle: GLuint64) #c_call;
    glGetImageHandleARB : (texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum) -> GLuint64 #c_call;
    glMakeImageHandleResidentARB : (handle: GLuint64, access: GLenum) #c_call;
    glMakeImageHandleNonResidentARB : (handle: GLuint64) #c_call;
    glUniformHandleui64ARB : (location: GLint, value: GLuint64) #c_call;
    glUniformHandleui64vARB : (location: GLint, count: GLsizei, value: *GLuint64) #c_call;
    glProgramUniformHandleui64ARB : (program: GLuint, location: GLint, value: GLuint64) #c_call;
    glProgramUniformHandleui64vARB : (program: GLuint, location: GLint, count: GLsizei, values: *GLuint64) #c_call;
    glIsTextureHandleResidentARB : (handle: GLuint64) -> GLboolean #c_call;
    glIsImageHandleResidentARB : (handle: GLuint64) -> GLboolean #c_call;
    glVertexAttribL1ui64ARB : (index: GLuint, x: GLuint64EXT) #c_call;
    glVertexAttribL1ui64vARB : (index: GLuint, v: *GLuint64EXT) #c_call;
    glGetVertexAttribLui64vARB : (index: GLuint, pname: GLenum, params: *GLuint64EXT) #c_call;

    // GL_ARB_blend_func_extended
    // glBindFragDataLocationIndexed : (program: GLuint, colorNumber: GLuint, index: GLuint, name: *GLchar) #c_call;
    // glGetFragDataIndex : (program: GLuint, name: *GLchar) -> GLint #c_call;

    // GL_ARB_buffer_storage
    // glBufferStorage : (target: GLenum, size: GLsizeiptr, data: *void, flags: GLbitfield) #c_call;

    // GL_ARB_cl_event
    // glCreateSyncFromCLeventARB : (context: *struct _cl_context, event: *struct _cl_event, flags: GLbitfield) -> GLsync #c_call;

    // GL_ARB_clear_buffer_object
    // glClearBufferData : (target: GLenum, internalformat: GLenum, format: GLenum, type: GLenum, data: *void) #c_call;
    // glClearBufferSubData : (target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: *void) #c_call;

    // GL_ARB_clear_texture
    // glClearTexImage : (texture: GLuint, level: GLint, format: GLenum, type: GLenum, data: *void) #c_call;
    // glClearTexSubImage : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, data: *void) #c_call;

    // GL_ARB_clip_control
    // glClipControl : (origin: GLenum, depth: GLenum) #c_call;

    // GL_ARB_color_buffer_float
    glClampColorARB : (target: GLenum, clamp: GLenum) #c_call;

    // GL_ARB_compatibility

    // GL_ARB_compressed_texture_pixel_storage

    // GL_ARB_compute_shader
    // glDispatchCompute : (num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint) #c_call;
    // glDispatchComputeIndirect : (indirect: GLintptr) #c_call;

    // GL_ARB_compute_variable_group_size
    glDispatchComputeGroupSizeARB : (num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint, group_size_x: GLuint, group_size_y: GLuint, group_size_z: GLuint) #c_call;

    // GL_ARB_conditional_render_inverted

    // GL_ARB_conservative_depth

    // GL_ARB_copy_buffer
    // glCopyBufferSubData : (readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) #c_call;

    // GL_ARB_copy_image
    // glCopyImageSubData : (srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) #c_call;

    // GL_ARB_cull_distance

    // GL_ARB_debug_output
    glDebugMessageControlARB : (source: GLenum, type: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) #c_call;
    glDebugMessageInsertARB : (source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) #c_call;
    glDebugMessageCallbackARB : (callback: GLDEBUGPROCARB, userParam: *void) #c_call;
    glGetDebugMessageLogARB : (count: GLuint, bufSize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint #c_call;

    // GL_ARB_depth_buffer_float

    // GL_ARB_depth_clamp

    // GL_ARB_depth_texture

    // GL_ARB_derivative_control

    // GL_ARB_direct_state_access
    // glCreateTransformFeedbacks : (n: GLsizei, ids: *GLuint) #c_call;
    // glTransformFeedbackBufferBase : (xfb: GLuint, index: GLuint, buffer: GLuint) #c_call;
    // glTransformFeedbackBufferRange : (xfb: GLuint, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #c_call;
    // glGetTransformFeedbackiv : (xfb: GLuint, pname: GLenum, param: *GLint) #c_call;
    // glGetTransformFeedbacki_v : (xfb: GLuint, pname: GLenum, index: GLuint, param: *GLint) #c_call;
    // glGetTransformFeedbacki64_v : (xfb: GLuint, pname: GLenum, index: GLuint, param: *GLint64) #c_call;
    // glCreateBuffers : (n: GLsizei, buffers: *GLuint) #c_call;
    // glNamedBufferStorage : (buffer: GLuint, size: GLsizeiptr, data: *void, flags: GLbitfield) #c_call;
    // glNamedBufferData : (buffer: GLuint, size: GLsizeiptr, data: *void, usage: GLenum) #c_call;
    // glNamedBufferSubData : (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *void) #c_call;
    // glCopyNamedBufferSubData : (readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) #c_call;
    // glClearNamedBufferData : (buffer: GLuint, internalformat: GLenum, format: GLenum, type: GLenum, data: *void) #c_call;
    // glClearNamedBufferSubData : (buffer: GLuint, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: *void) #c_call;
    // glMapNamedBuffer : (buffer: GLuint, access: GLenum) #c_call;
    // glMapNamedBufferRange : (buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) #c_call;
    // glUnmapNamedBuffer : (buffer: GLuint) -> GLboolean #c_call;
    // glFlushMappedNamedBufferRange : (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) #c_call;
    // glGetNamedBufferParameteriv : (buffer: GLuint, pname: GLenum, params: *GLint) #c_call;
    // glGetNamedBufferParameteri64v : (buffer: GLuint, pname: GLenum, params: *GLint64) #c_call;
    // glGetNamedBufferPointerv : (buffer: GLuint, pname: GLenum, params: **void) #c_call;
    // glGetNamedBufferSubData : (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *void) #c_call;
    // glCreateFramebuffers : (n: GLsizei, framebuffers: *GLuint) #c_call;
    // glNamedFramebufferRenderbuffer : (framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) #c_call;
    // glNamedFramebufferParameteri : (framebuffer: GLuint, pname: GLenum, param: GLint) #c_call;
    // glNamedFramebufferTexture : (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) #c_call;
    // glNamedFramebufferTextureLayer : (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) #c_call;
    // glNamedFramebufferDrawBuffer : (framebuffer: GLuint, buf: GLenum) #c_call;
    // glNamedFramebufferDrawBuffers : (framebuffer: GLuint, n: GLsizei, bufs: *GLenum) #c_call;
    // glNamedFramebufferReadBuffer : (framebuffer: GLuint, src: GLenum) #c_call;
    // glInvalidateNamedFramebufferData : (framebuffer: GLuint, numAttachments: GLsizei, attachments: *GLenum) #c_call;
    // glInvalidateNamedFramebufferSubData : (framebuffer: GLuint, numAttachments: GLsizei, attachments: *GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #c_call;
    // glClearNamedFramebufferiv : (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *GLint) #c_call;
    // glClearNamedFramebufferuiv : (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *GLuint) #c_call;
    // glClearNamedFramebufferfv : (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *GLfloat) #c_call;
    // glClearNamedFramebufferfi : (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) #c_call;
    // glBlitNamedFramebuffer : (readFramebuffer: GLuint, drawFramebuffer: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) #c_call;
    // glCheckNamedFramebufferStatus : (framebuffer: GLuint, target: GLenum) -> GLenum #c_call;
    // glGetNamedFramebufferParameteriv : (framebuffer: GLuint, pname: GLenum, param: *GLint) #c_call;
    // glGetNamedFramebufferAttachmentParameteriv : (framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: *GLint) #c_call;
    // glCreateRenderbuffers : (n: GLsizei, renderbuffers: *GLuint) #c_call;
    // glNamedRenderbufferStorage : (renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) #c_call;
    // glNamedRenderbufferStorageMultisample : (renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #c_call;
    // glGetNamedRenderbufferParameteriv : (renderbuffer: GLuint, pname: GLenum, params: *GLint) #c_call;
    // glCreateTextures : (target: GLenum, n: GLsizei, textures: *GLuint) #c_call;
    // glTextureBuffer : (texture: GLuint, internalformat: GLenum, buffer: GLuint) #c_call;
    // glTextureBufferRange : (texture: GLuint, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #c_call;
    // glTextureStorage1D : (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei) #c_call;
    // glTextureStorage2D : (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #c_call;
    // glTextureStorage3D : (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) #c_call;
    // glTextureStorage2DMultisample : (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) #c_call;
    // glTextureStorage3DMultisample : (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) #c_call;
    // glTextureSubImage1D : (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: *void) #c_call;
    // glTextureSubImage2D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) #c_call;
    // glTextureSubImage3D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: *void) #c_call;
    // glCompressedTextureSubImage1D : (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #c_call;
    // glCompressedTextureSubImage2D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #c_call;
    // glCompressedTextureSubImage3D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #c_call;
    // glCopyTextureSubImage1D : (texture: GLuint, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) #c_call;
    // glCopyTextureSubImage2D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #c_call;
    // glCopyTextureSubImage3D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #c_call;
    // glTextureParameterf : (texture: GLuint, pname: GLenum, param: GLfloat) #c_call;
    // glTextureParameterfv : (texture: GLuint, pname: GLenum, param: *GLfloat) #c_call;
    // glTextureParameteri : (texture: GLuint, pname: GLenum, param: GLint) #c_call;
    // glTextureParameterIiv : (texture: GLuint, pname: GLenum, params: *GLint) #c_call;
    // glTextureParameterIuiv : (texture: GLuint, pname: GLenum, params: *GLuint) #c_call;
    // glTextureParameteriv : (texture: GLuint, pname: GLenum, param: *GLint) #c_call;
    // glGenerateTextureMipmap : (texture: GLuint) #c_call;
    // glBindTextureUnit : (unit: GLuint, texture: GLuint) #c_call;
    // glGetTextureImage : (texture: GLuint, level: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: *void) #c_call;
    // glGetCompressedTextureImage : (texture: GLuint, level: GLint, bufSize: GLsizei, pixels: *void) #c_call;
    // glGetTextureLevelParameterfv : (texture: GLuint, level: GLint, pname: GLenum, params: *GLfloat) #c_call;
    // glGetTextureLevelParameteriv : (texture: GLuint, level: GLint, pname: GLenum, params: *GLint) #c_call;
    // glGetTextureParameterfv : (texture: GLuint, pname: GLenum, params: *GLfloat) #c_call;
    // glGetTextureParameterIiv : (texture: GLuint, pname: GLenum, params: *GLint) #c_call;
    // glGetTextureParameterIuiv : (texture: GLuint, pname: GLenum, params: *GLuint) #c_call;
    // glGetTextureParameteriv : (texture: GLuint, pname: GLenum, params: *GLint) #c_call;
    // glCreateVertexArrays : (n: GLsizei, arrays: *GLuint) #c_call;
    // glDisableVertexArrayAttrib : (vaobj: GLuint, index: GLuint) #c_call;
    // glEnableVertexArrayAttrib : (vaobj: GLuint, index: GLuint) #c_call;
    // glVertexArrayElementBuffer : (vaobj: GLuint, buffer: GLuint) #c_call;
    // glVertexArrayVertexBuffer : (vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) #c_call;
    // glVertexArrayVertexBuffers : (vaobj: GLuint, first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, strides: *GLsizei) #c_call;
    // glVertexArrayAttribBinding : (vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) #c_call;
    // glVertexArrayAttribFormat : (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint) #c_call;
    // glVertexArrayAttribIFormat : (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) #c_call;
    // glVertexArrayAttribLFormat : (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) #c_call;
    // glVertexArrayBindingDivisor : (vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) #c_call;
    // glGetVertexArrayiv : (vaobj: GLuint, pname: GLenum, param: *GLint) #c_call;
    // glGetVertexArrayIndexediv : (vaobj: GLuint, index: GLuint, pname: GLenum, param: *GLint) #c_call;
    // glGetVertexArrayIndexed64iv : (vaobj: GLuint, index: GLuint, pname: GLenum, param: *GLint64) #c_call;
    // glCreateSamplers : (n: GLsizei, samplers: *GLuint) #c_call;
    // glCreateProgramPipelines : (n: GLsizei, pipelines: *GLuint) #c_call;
    // glCreateQueries : (target: GLenum, n: GLsizei, ids: *GLuint) #c_call;
    // glGetQueryBufferObjecti64v : (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) #c_call;
    // glGetQueryBufferObjectiv : (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) #c_call;
    // glGetQueryBufferObjectui64v : (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) #c_call;
    // glGetQueryBufferObjectuiv : (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) #c_call;

    // GL_ARB_draw_buffers
    glDrawBuffersARB : (n: GLsizei, bufs: *GLenum) #c_call;

    // GL_ARB_draw_buffers_blend
    glBlendEquationiARB : (buf: GLuint, mode: GLenum) #c_call;
    glBlendEquationSeparateiARB : (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) #c_call;
    glBlendFunciARB : (buf: GLuint, src: GLenum, dst: GLenum) #c_call;
    glBlendFuncSeparateiARB : (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) #c_call;

    // GL_ARB_draw_elements_base_vertex
    // glDrawElementsBaseVertex : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, basevertex: GLint) #c_call;
    // glDrawRangeElementsBaseVertex : (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: *void, basevertex: GLint) #c_call;
    // glDrawElementsInstancedBaseVertex : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei, basevertex: GLint) #c_call;
    // glMultiDrawElementsBaseVertex : (mode: GLenum, count: *GLsizei, type: GLenum, indices: **void, drawcount: GLsizei, basevertex: *GLint) #c_call;

    // GL_ARB_draw_indirect
    // glDrawArraysIndirect : (mode: GLenum, indirect: *void) #c_call;
    // glDrawElementsIndirect : (mode: GLenum, type: GLenum, indirect: *void) #c_call;

    // GL_ARB_draw_instanced
    glDrawArraysInstancedARB : (mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) #c_call;
    glDrawElementsInstancedARB : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, primcount: GLsizei) #c_call;

    // GL_ARB_enhanced_layouts

    // GL_ARB_explicit_attrib_location

    // GL_ARB_explicit_uniform_location

    // GL_ARB_fragment_coord_conventions

    // GL_ARB_fragment_layer_viewport

    // GL_ARB_fragment_program
    glProgramStringARB : (target: GLenum, format: GLenum, len: GLsizei, str: *void) #c_call;
    glBindProgramARB : (target: GLenum, program: GLuint) #c_call;
    glDeleteProgramsARB : (n: GLsizei, programs: *GLuint) #c_call;
    glGenProgramsARB : (n: GLsizei, programs: *GLuint) #c_call;
    glProgramEnvParameter4dARB : (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #c_call;
    glProgramEnvParameter4dvARB : (target: GLenum, index: GLuint, params: *GLdouble) #c_call;
    glProgramEnvParameter4fARB : (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #c_call;
    glProgramEnvParameter4fvARB : (target: GLenum, index: GLuint, params: *GLfloat) #c_call;
    glProgramLocalParameter4dARB : (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #c_call;
    glProgramLocalParameter4dvARB : (target: GLenum, index: GLuint, params: *GLdouble) #c_call;
    glProgramLocalParameter4fARB : (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #c_call;
    glProgramLocalParameter4fvARB : (target: GLenum, index: GLuint, params: *GLfloat) #c_call;
    glGetProgramEnvParameterdvARB : (target: GLenum, index: GLuint, params: *GLdouble) #c_call;
    glGetProgramEnvParameterfvARB : (target: GLenum, index: GLuint, params: *GLfloat) #c_call;
    glGetProgramLocalParameterdvARB : (target: GLenum, index: GLuint, params: *GLdouble) #c_call;
    glGetProgramLocalParameterfvARB : (target: GLenum, index: GLuint, params: *GLfloat) #c_call;
    glGetProgramivARB : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetProgramStringARB : (target: GLenum, pname: GLenum, str: *void) #c_call;
    glIsProgramARB : (program: GLuint) -> GLboolean #c_call;

    // GL_ARB_fragment_program_shadow

    // GL_ARB_fragment_shader

    // GL_ARB_fragment_shader_interlock

    // GL_ARB_framebuffer_no_attachments
    // glFramebufferParameteri : (target: GLenum, pname: GLenum, param: GLint) #c_call;
    // glGetFramebufferParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #c_call;

    // GL_ARB_framebuffer_object
    // glIsRenderbuffer : (renderbuffer: GLuint) -> GLboolean #c_call;
    // glBindRenderbuffer : (target: GLenum, renderbuffer: GLuint) #c_call;
    // glDeleteRenderbuffers : (n: GLsizei, renderbuffers: *GLuint) #c_call;
    // glGenRenderbuffers : (n: GLsizei, renderbuffers: *GLuint) #c_call;
    // glRenderbufferStorage : (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) #c_call;
    // glGetRenderbufferParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    // glIsFramebuffer : (framebuffer: GLuint) -> GLboolean #c_call;
    // glBindFramebuffer : (target: GLenum, framebuffer: GLuint) #c_call;
    // glDeleteFramebuffers : (n: GLsizei, framebuffers: *GLuint) #c_call;
    // glGenFramebuffers : (n: GLsizei, framebuffers: *GLuint) #c_call;
    // glCheckFramebufferStatus : (target: GLenum) -> GLenum #c_call;
    // glFramebufferTexture1D : (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) #c_call;
    // glFramebufferTexture2D : (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) #c_call;
    // glFramebufferTexture3D : (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) #c_call;
    // glFramebufferRenderbuffer : (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) #c_call;
    // glGetFramebufferAttachmentParameteriv : (target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) #c_call;
    // glGenerateMipmap : (target: GLenum) #c_call;
    // glBlitFramebuffer : (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) #c_call;
    // glRenderbufferStorageMultisample : (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #c_call;
    // glFramebufferTextureLayer : (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) #c_call;

    // GL_ARB_framebuffer_sRGB

    // GL_ARB_geometry_shader4
    glProgramParameteriARB : (program: GLuint, pname: GLenum, value: GLint) #c_call;
    glFramebufferTextureARB : (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) #c_call;
    glFramebufferTextureLayerARB : (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) #c_call;
    glFramebufferTextureFaceARB : (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) #c_call;

    // GL_ARB_get_program_binary
    // glGetProgramBinary : (program: GLuint, bufSize: GLsizei, length: *GLsizei, binaryFormat: *GLenum, binary: *void) #c_call;
    // glProgramBinary : (program: GLuint, binaryFormat: GLenum, binary: *void, length: GLsizei) #c_call;
    // glProgramParameteri : (program: GLuint, pname: GLenum, value: GLint) #c_call;

    // GL_ARB_get_texture_sub_image
    // glGetTextureSubImage : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: *void) #c_call;
    // glGetCompressedTextureSubImage : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, bufSize: GLsizei, pixels: *void) #c_call;

    // GL_ARB_gl_spirv
    glSpecializeShaderARB : (shader: GLuint, pEntryPoint: *GLchar, numSpecializationConstants: GLuint, pConstantIndex: *GLuint, pConstantValue: *GLuint) #c_call;

    // GL_ARB_gpu_shader5

    // GL_ARB_gpu_shader_fp64
    // glUniform1d : (location: GLint, x: GLdouble) #c_call;
    // glUniform2d : (location: GLint, x: GLdouble, y: GLdouble) #c_call;
    // glUniform3d : (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) #c_call;
    // glUniform4d : (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #c_call;
    // glUniform1dv : (location: GLint, count: GLsizei, value: *GLdouble) #c_call;
    // glUniform2dv : (location: GLint, count: GLsizei, value: *GLdouble) #c_call;
    // glUniform3dv : (location: GLint, count: GLsizei, value: *GLdouble) #c_call;
    // glUniform4dv : (location: GLint, count: GLsizei, value: *GLdouble) #c_call;
    // glUniformMatrix2dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    // glUniformMatrix3dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    // glUniformMatrix4dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    // glUniformMatrix2x3dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    // glUniformMatrix2x4dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    // glUniformMatrix3x2dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    // glUniformMatrix3x4dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    // glUniformMatrix4x2dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    // glUniformMatrix4x3dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    // glGetUniformdv : (program: GLuint, location: GLint, params: *GLdouble) #c_call;

    // GL_ARB_gpu_shader_int64
    glUniform1i64ARB : (location: GLint, x: GLint64) #c_call;
    glUniform2i64ARB : (location: GLint, x: GLint64, y: GLint64) #c_call;
    glUniform3i64ARB : (location: GLint, x: GLint64, y: GLint64, z: GLint64) #c_call;
    glUniform4i64ARB : (location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64) #c_call;
    glUniform1i64vARB : (location: GLint, count: GLsizei, value: *GLint64) #c_call;
    glUniform2i64vARB : (location: GLint, count: GLsizei, value: *GLint64) #c_call;
    glUniform3i64vARB : (location: GLint, count: GLsizei, value: *GLint64) #c_call;
    glUniform4i64vARB : (location: GLint, count: GLsizei, value: *GLint64) #c_call;
    glUniform1ui64ARB : (location: GLint, x: GLuint64) #c_call;
    glUniform2ui64ARB : (location: GLint, x: GLuint64, y: GLuint64) #c_call;
    glUniform3ui64ARB : (location: GLint, x: GLuint64, y: GLuint64, z: GLuint64) #c_call;
    glUniform4ui64ARB : (location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64) #c_call;
    glUniform1ui64vARB : (location: GLint, count: GLsizei, value: *GLuint64) #c_call;
    glUniform2ui64vARB : (location: GLint, count: GLsizei, value: *GLuint64) #c_call;
    glUniform3ui64vARB : (location: GLint, count: GLsizei, value: *GLuint64) #c_call;
    glUniform4ui64vARB : (location: GLint, count: GLsizei, value: *GLuint64) #c_call;
    glGetUniformi64vARB : (program: GLuint, location: GLint, params: *GLint64) #c_call;
    glGetUniformui64vARB : (program: GLuint, location: GLint, params: *GLuint64) #c_call;
    glGetnUniformi64vARB : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint64) #c_call;
    glGetnUniformui64vARB : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLuint64) #c_call;
    glProgramUniform1i64ARB : (program: GLuint, location: GLint, x: GLint64) #c_call;
    glProgramUniform2i64ARB : (program: GLuint, location: GLint, x: GLint64, y: GLint64) #c_call;
    glProgramUniform3i64ARB : (program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64) #c_call;
    glProgramUniform4i64ARB : (program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64) #c_call;
    glProgramUniform1i64vARB : (program: GLuint, location: GLint, count: GLsizei, value: *GLint64) #c_call;
    glProgramUniform2i64vARB : (program: GLuint, location: GLint, count: GLsizei, value: *GLint64) #c_call;
    glProgramUniform3i64vARB : (program: GLuint, location: GLint, count: GLsizei, value: *GLint64) #c_call;
    glProgramUniform4i64vARB : (program: GLuint, location: GLint, count: GLsizei, value: *GLint64) #c_call;
    glProgramUniform1ui64ARB : (program: GLuint, location: GLint, x: GLuint64) #c_call;
    glProgramUniform2ui64ARB : (program: GLuint, location: GLint, x: GLuint64, y: GLuint64) #c_call;
    glProgramUniform3ui64ARB : (program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64) #c_call;
    glProgramUniform4ui64ARB : (program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64) #c_call;
    glProgramUniform1ui64vARB : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64) #c_call;
    glProgramUniform2ui64vARB : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64) #c_call;
    glProgramUniform3ui64vARB : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64) #c_call;
    glProgramUniform4ui64vARB : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64) #c_call;

    // GL_ARB_half_float_pixel

    // GL_ARB_half_float_vertex

    // GL_ARB_imaging
    // glBlendColor : (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) #c_call;
    // glBlendEquation : (mode: GLenum) #c_call;
    glColorTable : (target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type: GLenum, table: *void) #c_call;
    glColorTableParameterfv : (target: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glColorTableParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glCopyColorTable : (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) #c_call;
    glGetColorTable : (target: GLenum, format: GLenum, type: GLenum, table: *void) #c_call;
    glGetColorTableParameterfv : (target: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetColorTableParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glColorSubTable : (target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type: GLenum, data: *void) #c_call;
    glCopyColorSubTable : (target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) #c_call;
    glConvolutionFilter1D : (target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type: GLenum, image: *void) #c_call;
    glConvolutionFilter2D : (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, image: *void) #c_call;
    glConvolutionParameterf : (target: GLenum, pname: GLenum, params: GLfloat) #c_call;
    glConvolutionParameterfv : (target: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glConvolutionParameteri : (target: GLenum, pname: GLenum, params: GLint) #c_call;
    glConvolutionParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glCopyConvolutionFilter1D : (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) #c_call;
    glCopyConvolutionFilter2D : (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #c_call;
    glGetConvolutionFilter : (target: GLenum, format: GLenum, type: GLenum, image: *void) #c_call;
    glGetConvolutionParameterfv : (target: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetConvolutionParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetSeparableFilter : (target: GLenum, format: GLenum, type: GLenum, row: *void, column: *void, span: *void) #c_call;
    glSeparableFilter2D : (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, row: *void, column: *void) #c_call;
    glGetHistogram : (target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, values: *void) #c_call;
    glGetHistogramParameterfv : (target: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetHistogramParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetMinmax : (target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, values: *void) #c_call;
    glGetMinmaxParameterfv : (target: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetMinmaxParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glHistogram : (target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) #c_call;
    glMinmax : (target: GLenum, internalformat: GLenum, sink: GLboolean) #c_call;
    glResetHistogram : (target: GLenum) #c_call;
    glResetMinmax : (target: GLenum) #c_call;

    // GL_ARB_indirect_parameters
    glMultiDrawArraysIndirectCountARB : (mode: GLenum, indirect: *void, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) #c_call;
    glMultiDrawElementsIndirectCountARB : (mode: GLenum, type: GLenum, indirect: *void, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) #c_call;

    // GL_ARB_instanced_arrays
    glVertexAttribDivisorARB : (index: GLuint, divisor: GLuint) #c_call;

    // GL_ARB_internalformat_query
    // glGetInternalformativ : (target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: *GLint) #c_call;

    // GL_ARB_internalformat_query2
    // glGetInternalformati64v : (target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: *GLint64) #c_call;

    // GL_ARB_invalidate_subdata
    // glInvalidateTexSubImage : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) #c_call;
    // glInvalidateTexImage : (texture: GLuint, level: GLint) #c_call;
    // glInvalidateBufferSubData : (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) #c_call;
    // glInvalidateBufferData : (buffer: GLuint) #c_call;
    // glInvalidateFramebuffer : (target: GLenum, numAttachments: GLsizei, attachments: *GLenum) #c_call;
    // glInvalidateSubFramebuffer : (target: GLenum, numAttachments: GLsizei, attachments: *GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #c_call;

    // GL_ARB_map_buffer_alignment

    // GL_ARB_map_buffer_range
    // glMapBufferRange : (target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) #c_call;
    // glFlushMappedBufferRange : (target: GLenum, offset: GLintptr, length: GLsizeiptr) #c_call;

    // GL_ARB_matrix_palette
    glCurrentPaletteMatrixARB : (index: GLint) #c_call;
    glMatrixIndexubvARB : (size: GLint, indices: *GLubyte) #c_call;
    glMatrixIndexusvARB : (size: GLint, indices: *GLushort) #c_call;
    glMatrixIndexuivARB : (size: GLint, indices: *GLuint) #c_call;
    glMatrixIndexPointerARB : (size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #c_call;

    // GL_ARB_multi_bind
    // glBindBuffersBase : (target: GLenum, first: GLuint, count: GLsizei, buffers: *GLuint) #c_call;
    // glBindBuffersRange : (target: GLenum, first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, sizes: *GLsizeiptr) #c_call;
    // glBindTextures : (first: GLuint, count: GLsizei, textures: *GLuint) #c_call;
    // glBindSamplers : (first: GLuint, count: GLsizei, samplers: *GLuint) #c_call;
    // glBindImageTextures : (first: GLuint, count: GLsizei, textures: *GLuint) #c_call;
    // glBindVertexBuffers : (first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, strides: *GLsizei) #c_call;

    // GL_ARB_multi_draw_indirect
    // glMultiDrawArraysIndirect : (mode: GLenum, indirect: *void, drawcount: GLsizei, stride: GLsizei) #c_call;
    // glMultiDrawElementsIndirect : (mode: GLenum, type: GLenum, indirect: *void, drawcount: GLsizei, stride: GLsizei) #c_call;

    // GL_ARB_multisample
    glSampleCoverageARB : (value: GLfloat, invert: GLboolean) #c_call;

    // GL_ARB_multitexture
    glActiveTextureARB : (texture: GLenum) #c_call;
    glClientActiveTextureARB : (texture: GLenum) #c_call;
    glMultiTexCoord1dARB : (target: GLenum, s: GLdouble) #c_call;
    glMultiTexCoord1dvARB : (target: GLenum, v: *GLdouble) #c_call;
    glMultiTexCoord1fARB : (target: GLenum, s: GLfloat) #c_call;
    glMultiTexCoord1fvARB : (target: GLenum, v: *GLfloat) #c_call;
    glMultiTexCoord1iARB : (target: GLenum, s: GLint) #c_call;
    glMultiTexCoord1ivARB : (target: GLenum, v: *GLint) #c_call;
    glMultiTexCoord1sARB : (target: GLenum, s: GLshort) #c_call;
    glMultiTexCoord1svARB : (target: GLenum, v: *GLshort) #c_call;
    glMultiTexCoord2dARB : (target: GLenum, s: GLdouble, t: GLdouble) #c_call;
    glMultiTexCoord2dvARB : (target: GLenum, v: *GLdouble) #c_call;
    glMultiTexCoord2fARB : (target: GLenum, s: GLfloat, t: GLfloat) #c_call;
    glMultiTexCoord2fvARB : (target: GLenum, v: *GLfloat) #c_call;
    glMultiTexCoord2iARB : (target: GLenum, s: GLint, t: GLint) #c_call;
    glMultiTexCoord2ivARB : (target: GLenum, v: *GLint) #c_call;
    glMultiTexCoord2sARB : (target: GLenum, s: GLshort, t: GLshort) #c_call;
    glMultiTexCoord2svARB : (target: GLenum, v: *GLshort) #c_call;
    glMultiTexCoord3dARB : (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) #c_call;
    glMultiTexCoord3dvARB : (target: GLenum, v: *GLdouble) #c_call;
    glMultiTexCoord3fARB : (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) #c_call;
    glMultiTexCoord3fvARB : (target: GLenum, v: *GLfloat) #c_call;
    glMultiTexCoord3iARB : (target: GLenum, s: GLint, t: GLint, r: GLint) #c_call;
    glMultiTexCoord3ivARB : (target: GLenum, v: *GLint) #c_call;
    glMultiTexCoord3sARB : (target: GLenum, s: GLshort, t: GLshort, r: GLshort) #c_call;
    glMultiTexCoord3svARB : (target: GLenum, v: *GLshort) #c_call;
    glMultiTexCoord4dARB : (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) #c_call;
    glMultiTexCoord4dvARB : (target: GLenum, v: *GLdouble) #c_call;
    glMultiTexCoord4fARB : (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) #c_call;
    glMultiTexCoord4fvARB : (target: GLenum, v: *GLfloat) #c_call;
    glMultiTexCoord4iARB : (target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) #c_call;
    glMultiTexCoord4ivARB : (target: GLenum, v: *GLint) #c_call;
    glMultiTexCoord4sARB : (target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) #c_call;
    glMultiTexCoord4svARB : (target: GLenum, v: *GLshort) #c_call;

    // GL_ARB_occlusion_query
    glGenQueriesARB : (n: GLsizei, ids: *GLuint) #c_call;
    glDeleteQueriesARB : (n: GLsizei, ids: *GLuint) #c_call;
    glIsQueryARB : (id: GLuint) -> GLboolean #c_call;
    glBeginQueryARB : (target: GLenum, id: GLuint) #c_call;
    glEndQueryARB : (target: GLenum) #c_call;
    glGetQueryivARB : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetQueryObjectivARB : (id: GLuint, pname: GLenum, params: *GLint) #c_call;
    glGetQueryObjectuivARB : (id: GLuint, pname: GLenum, params: *GLuint) #c_call;

    // GL_ARB_occlusion_query2

    // GL_ARB_parallel_shader_compile
    glMaxShaderCompilerThreadsARB : (count: GLuint) #c_call;

    // GL_ARB_pipeline_statistics_query

    // GL_ARB_pixel_buffer_object

    // GL_ARB_point_parameters
    glPointParameterfARB : (pname: GLenum, param: GLfloat) #c_call;
    glPointParameterfvARB : (pname: GLenum, params: *GLfloat) #c_call;

    // GL_ARB_point_sprite

    // GL_ARB_polygon_offset_clamp
    // glPolygonOffsetClamp : (factor: GLfloat, units: GLfloat, clamp: GLfloat) #c_call;

    // GL_ARB_post_depth_coverage

    // GL_ARB_program_interface_query
    // glGetProgramInterfaceiv : (program: GLuint, programInterface: GLenum, pname: GLenum, params: *GLint) #c_call;
    // glGetProgramResourceIndex : (program: GLuint, programInterface: GLenum, name: *GLchar) -> GLuint #c_call;
    // glGetProgramResourceName : (program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: *GLsizei, name: *GLchar) #c_call;
    // glGetProgramResourceiv : (program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: *GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) #c_call;
    // glGetProgramResourceLocation : (program: GLuint, programInterface: GLenum, name: *GLchar) -> GLint #c_call;
    // glGetProgramResourceLocationIndex : (program: GLuint, programInterface: GLenum, name: *GLchar) -> GLint #c_call;

    // GL_ARB_provoking_vertex
    // glProvokingVertex : (mode: GLenum) #c_call;

    // GL_ARB_query_buffer_object

    // GL_ARB_robust_buffer_access_behavior

    // GL_ARB_robustness
    glGetGraphicsResetStatusARB : () -> GLenum #c_call;
    glGetnTexImageARB : (target: GLenum, level: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, img: *void) #c_call;
    glReadnPixelsARB : (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, data: *void) #c_call;
    glGetnCompressedTexImageARB : (target: GLenum, lod: GLint, bufSize: GLsizei, img: *void) #c_call;
    glGetnUniformfvARB : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) #c_call;
    glGetnUniformivARB : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) #c_call;
    glGetnUniformuivARB : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLuint) #c_call;
    glGetnUniformdvARB : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLdouble) #c_call;
    glGetnMapdvARB : (target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLdouble) #c_call;
    glGetnMapfvARB : (target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLfloat) #c_call;
    glGetnMapivARB : (target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLint) #c_call;
    glGetnPixelMapfvARB : (map: GLenum, bufSize: GLsizei, values: *GLfloat) #c_call;
    glGetnPixelMapuivARB : (map: GLenum, bufSize: GLsizei, values: *GLuint) #c_call;
    glGetnPixelMapusvARB : (map: GLenum, bufSize: GLsizei, values: *GLushort) #c_call;
    glGetnPolygonStippleARB : (bufSize: GLsizei, pattern: *GLubyte) #c_call;
    glGetnColorTableARB : (target: GLenum, format: GLenum, type: GLenum, bufSize: GLsizei, table: *void) #c_call;
    glGetnConvolutionFilterARB : (target: GLenum, format: GLenum, type: GLenum, bufSize: GLsizei, image: *void) #c_call;
    glGetnSeparableFilterARB : (target: GLenum, format: GLenum, type: GLenum, rowBufSize: GLsizei, row: *void, columnBufSize: GLsizei, column: *void, span: *void) #c_call;
    glGetnHistogramARB : (target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, bufSize: GLsizei, values: *void) #c_call;
    glGetnMinmaxARB : (target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, bufSize: GLsizei, values: *void) #c_call;

    // GL_ARB_robustness_isolation

    // GL_ARB_sample_locations
    glFramebufferSampleLocationsfvARB : (target: GLenum, start: GLuint, count: GLsizei, v: *GLfloat) #c_call;
    glNamedFramebufferSampleLocationsfvARB : (framebuffer: GLuint, start: GLuint, count: GLsizei, v: *GLfloat) #c_call;
    glEvaluateDepthValuesARB : () #c_call;

    // GL_ARB_sample_shading
    glMinSampleShadingARB : (value: GLfloat) #c_call;

    // GL_ARB_sampler_objects
    // glGenSamplers : (count: GLsizei, samplers: *GLuint) #c_call;
    // glDeleteSamplers : (count: GLsizei, samplers: *GLuint) #c_call;
    // glIsSampler : (sampler: GLuint) -> GLboolean #c_call;
    // glBindSampler : (unit: GLuint, sampler: GLuint) #c_call;
    // glSamplerParameteri : (sampler: GLuint, pname: GLenum, param: GLint) #c_call;
    // glSamplerParameteriv : (sampler: GLuint, pname: GLenum, param: *GLint) #c_call;
    // glSamplerParameterf : (sampler: GLuint, pname: GLenum, param: GLfloat) #c_call;
    // glSamplerParameterfv : (sampler: GLuint, pname: GLenum, param: *GLfloat) #c_call;
    // glSamplerParameterIiv : (sampler: GLuint, pname: GLenum, param: *GLint) #c_call;
    // glSamplerParameterIuiv : (sampler: GLuint, pname: GLenum, param: *GLuint) #c_call;
    // glGetSamplerParameteriv : (sampler: GLuint, pname: GLenum, params: *GLint) #c_call;
    // glGetSamplerParameterIiv : (sampler: GLuint, pname: GLenum, params: *GLint) #c_call;
    // glGetSamplerParameterfv : (sampler: GLuint, pname: GLenum, params: *GLfloat) #c_call;
    // glGetSamplerParameterIuiv : (sampler: GLuint, pname: GLenum, params: *GLuint) #c_call;

    // GL_ARB_seamless_cube_map

    // GL_ARB_seamless_cubemap_per_texture

    // GL_ARB_separate_shader_objects
    // glUseProgramStages : (pipeline: GLuint, stages: GLbitfield, program: GLuint) #c_call;
    // glActiveShaderProgram : (pipeline: GLuint, program: GLuint) #c_call;
    // glCreateShaderProgramv : (type: GLenum, count: GLsizei, strings: **GLchar) -> GLuint #c_call;
    // glBindProgramPipeline : (pipeline: GLuint) #c_call;
    // glDeleteProgramPipelines : (n: GLsizei, pipelines: *GLuint) #c_call;
    // glGenProgramPipelines : (n: GLsizei, pipelines: *GLuint) #c_call;
    // glIsProgramPipeline : (pipeline: GLuint) -> GLboolean #c_call;
    // glGetProgramPipelineiv : (pipeline: GLuint, pname: GLenum, params: *GLint) #c_call;
    // glProgramParameteri : (program: GLuint, pname: GLenum, value: GLint) #c_call;
    // glProgramUniform1i : (program: GLuint, location: GLint, v0: GLint) #c_call;
    // glProgramUniform1iv : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #c_call;
    // glProgramUniform1f : (program: GLuint, location: GLint, v0: GLfloat) #c_call;
    // glProgramUniform1fv : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #c_call;
    // glProgramUniform1d : (program: GLuint, location: GLint, v0: GLdouble) #c_call;
    // glProgramUniform1dv : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #c_call;
    // glProgramUniform1ui : (program: GLuint, location: GLint, v0: GLuint) #c_call;
    // glProgramUniform1uiv : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #c_call;
    // glProgramUniform2i : (program: GLuint, location: GLint, v0: GLint, v1: GLint) #c_call;
    // glProgramUniform2iv : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #c_call;
    // glProgramUniform2f : (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) #c_call;
    // glProgramUniform2fv : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #c_call;
    // glProgramUniform2d : (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble) #c_call;
    // glProgramUniform2dv : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #c_call;
    // glProgramUniform2ui : (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) #c_call;
    // glProgramUniform2uiv : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #c_call;
    // glProgramUniform3i : (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) #c_call;
    // glProgramUniform3iv : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #c_call;
    // glProgramUniform3f : (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) #c_call;
    // glProgramUniform3fv : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #c_call;
    // glProgramUniform3d : (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble) #c_call;
    // glProgramUniform3dv : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #c_call;
    // glProgramUniform3ui : (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) #c_call;
    // glProgramUniform3uiv : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #c_call;
    // glProgramUniform4i : (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) #c_call;
    // glProgramUniform4iv : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #c_call;
    // glProgramUniform4f : (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) #c_call;
    // glProgramUniform4fv : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #c_call;
    // glProgramUniform4d : (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble) #c_call;
    // glProgramUniform4dv : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #c_call;
    // glProgramUniform4ui : (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) #c_call;
    // glProgramUniform4uiv : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #c_call;
    // glProgramUniformMatrix2fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    // glProgramUniformMatrix3fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    // glProgramUniformMatrix4fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    // glProgramUniformMatrix2dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    // glProgramUniformMatrix3dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    // glProgramUniformMatrix4dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    // glProgramUniformMatrix2x3fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    // glProgramUniformMatrix3x2fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    // glProgramUniformMatrix2x4fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    // glProgramUniformMatrix4x2fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    // glProgramUniformMatrix3x4fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    // glProgramUniformMatrix4x3fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    // glProgramUniformMatrix2x3dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    // glProgramUniformMatrix3x2dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    // glProgramUniformMatrix2x4dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    // glProgramUniformMatrix4x2dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    // glProgramUniformMatrix3x4dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    // glProgramUniformMatrix4x3dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    // glValidateProgramPipeline : (pipeline: GLuint) #c_call;
    // glGetProgramPipelineInfoLog : (pipeline: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) #c_call;

    // GL_ARB_shader_atomic_counter_ops

    // GL_ARB_shader_atomic_counters
    // glGetActiveAtomicCounterBufferiv : (program: GLuint, bufferIndex: GLuint, pname: GLenum, params: *GLint) #c_call;

    // GL_ARB_shader_ballot

    // GL_ARB_shader_bit_encoding

    // GL_ARB_shader_clock

    // GL_ARB_shader_draw_parameters

    // GL_ARB_shader_group_vote

    // GL_ARB_shader_image_load_store
    // glBindImageTexture : (unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) #c_call;
    // glMemoryBarrier : (barriers: GLbitfield) #c_call;

    // GL_ARB_shader_image_size

    // GL_ARB_shader_objects
    glDeleteObjectARB : (obj: GLhandleARB) #c_call;
    glGetHandleARB : (pname: GLenum) -> GLhandleARB #c_call;
    glDetachObjectARB : (containerObj: GLhandleARB, attachedObj: GLhandleARB) #c_call;
    glCreateShaderObjectARB : (shaderType: GLenum) -> GLhandleARB #c_call;
    glShaderSourceARB : (shaderObj: GLhandleARB, count: GLsizei, str: **GLcharARB, length: *GLint) #c_call;
    glCompileShaderARB : (shaderObj: GLhandleARB) #c_call;
    glCreateProgramObjectARB : () -> GLhandleARB #c_call;
    glAttachObjectARB : (containerObj: GLhandleARB, obj: GLhandleARB) #c_call;
    glLinkProgramARB : (programObj: GLhandleARB) #c_call;
    glUseProgramObjectARB : (programObj: GLhandleARB) #c_call;
    glValidateProgramARB : (programObj: GLhandleARB) #c_call;
    glUniform1fARB : (location: GLint, v0: GLfloat) #c_call;
    glUniform2fARB : (location: GLint, v0: GLfloat, v1: GLfloat) #c_call;
    glUniform3fARB : (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) #c_call;
    glUniform4fARB : (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) #c_call;
    glUniform1iARB : (location: GLint, v0: GLint) #c_call;
    glUniform2iARB : (location: GLint, v0: GLint, v1: GLint) #c_call;
    glUniform3iARB : (location: GLint, v0: GLint, v1: GLint, v2: GLint) #c_call;
    glUniform4iARB : (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) #c_call;
    glUniform1fvARB : (location: GLint, count: GLsizei, value: *GLfloat) #c_call;
    glUniform2fvARB : (location: GLint, count: GLsizei, value: *GLfloat) #c_call;
    glUniform3fvARB : (location: GLint, count: GLsizei, value: *GLfloat) #c_call;
    glUniform4fvARB : (location: GLint, count: GLsizei, value: *GLfloat) #c_call;
    glUniform1ivARB : (location: GLint, count: GLsizei, value: *GLint) #c_call;
    glUniform2ivARB : (location: GLint, count: GLsizei, value: *GLint) #c_call;
    glUniform3ivARB : (location: GLint, count: GLsizei, value: *GLint) #c_call;
    glUniform4ivARB : (location: GLint, count: GLsizei, value: *GLint) #c_call;
    glUniformMatrix2fvARB : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glUniformMatrix3fvARB : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glUniformMatrix4fvARB : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glGetObjectParameterfvARB : (obj: GLhandleARB, pname: GLenum, params: *GLfloat) #c_call;
    glGetObjectParameterivARB : (obj: GLhandleARB, pname: GLenum, params: *GLint) #c_call;
    glGetInfoLogARB : (obj: GLhandleARB, maxLength: GLsizei, length: *GLsizei, infoLog: *GLcharARB) #c_call;
    glGetAttachedObjectsARB : (containerObj: GLhandleARB, maxCount: GLsizei, count: *GLsizei, obj: *GLhandleARB) #c_call;
    glGetUniformLocationARB : (programObj: GLhandleARB, name: *GLcharARB) -> GLint #c_call;
    glGetActiveUniformARB : (programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: *GLsizei, size: *GLint, type: *GLenum, name: *GLcharARB) #c_call;
    glGetUniformfvARB : (programObj: GLhandleARB, location: GLint, params: *GLfloat) #c_call;
    glGetUniformivARB : (programObj: GLhandleARB, location: GLint, params: *GLint) #c_call;
    glGetShaderSourceARB : (obj: GLhandleARB, maxLength: GLsizei, length: *GLsizei, source: *GLcharARB) #c_call;

    // GL_ARB_shader_precision

    // GL_ARB_shader_stencil_export

    // GL_ARB_shader_storage_buffer_object
    // glShaderStorageBlockBinding : (program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint) #c_call;

    // GL_ARB_shader_subroutine
    // glGetSubroutineUniformLocation : (program: GLuint, shadertype: GLenum, name: *GLchar) -> GLint #c_call;
    // glGetSubroutineIndex : (program: GLuint, shadertype: GLenum, name: *GLchar) -> GLuint #c_call;
    // glGetActiveSubroutineUniformiv : (program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: *GLint) #c_call;
    // glGetActiveSubroutineUniformName : (program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: *GLsizei, name: *GLchar) #c_call;
    // glGetActiveSubroutineName : (program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: *GLsizei, name: *GLchar) #c_call;
    // glUniformSubroutinesuiv : (shadertype: GLenum, count: GLsizei, indices: *GLuint) #c_call;
    // glGetUniformSubroutineuiv : (shadertype: GLenum, location: GLint, params: *GLuint) #c_call;
    // glGetProgramStageiv : (program: GLuint, shadertype: GLenum, pname: GLenum, values: *GLint) #c_call;

    // GL_ARB_shader_texture_image_samples

    // GL_ARB_shader_texture_lod

    // GL_ARB_shader_viewport_layer_array

    // GL_ARB_shading_language_100

    // GL_ARB_shading_language_420pack

    // GL_ARB_shading_language_include
    glNamedStringARB : (type: GLenum, namelen: GLint, name: *GLchar, stringlen: GLint, str: *GLchar) #c_call;
    glDeleteNamedStringARB : (namelen: GLint, name: *GLchar) #c_call;
    glCompileShaderIncludeARB : (shader: GLuint, count: GLsizei, path: **GLchar, length: *GLint) #c_call;
    glIsNamedStringARB : (namelen: GLint, name: *GLchar) -> GLboolean #c_call;
    glGetNamedStringARB : (namelen: GLint, name: *GLchar, bufSize: GLsizei, stringlen: *GLint, str: *GLchar) #c_call;
    glGetNamedStringivARB : (namelen: GLint, name: *GLchar, pname: GLenum, params: *GLint) #c_call;

    // GL_ARB_shading_language_packing

    // GL_ARB_shadow

    // GL_ARB_shadow_ambient

    // GL_ARB_sparse_buffer
    glBufferPageCommitmentARB : (target: GLenum, offset: GLintptr, size: GLsizeiptr, commit: GLboolean) #c_call;
    glNamedBufferPageCommitmentEXT : (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean) #c_call;
    glNamedBufferPageCommitmentARB : (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean) #c_call;

    // GL_ARB_sparse_texture
    glTexPageCommitmentARB : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean) #c_call;

    // GL_ARB_sparse_texture2

    // GL_ARB_sparse_texture_clamp

    // GL_ARB_spirv_extensions

    // GL_ARB_stencil_texturing

    // GL_ARB_sync
    // glFenceSync : (condition: GLenum, flags: GLbitfield) -> GLsync #c_call;
    // glIsSync : (sync: GLsync) -> GLboolean #c_call;
    // glDeleteSync : (sync: GLsync) #c_call;
    // glClientWaitSync : (sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum #c_call;
    // glWaitSync : (sync: GLsync, flags: GLbitfield, timeout: GLuint64) #c_call;
    // glGetInteger64v : (pname: GLenum, data: *GLint64) #c_call;
    // glGetSynciv : (sync: GLsync, pname: GLenum, bufSize: GLsizei, length: *GLsizei, values: *GLint) #c_call;

    // GL_ARB_tessellation_shader
    // glPatchParameteri : (pname: GLenum, value: GLint) #c_call;
    // glPatchParameterfv : (pname: GLenum, values: *GLfloat) #c_call;

    // GL_ARB_texture_barrier
    // glTextureBarrier : () #c_call;

    // GL_ARB_texture_border_clamp

    // GL_ARB_texture_buffer_object
    glTexBufferARB : (target: GLenum, internalformat: GLenum, buffer: GLuint) #c_call;

    // GL_ARB_texture_buffer_object_rgb32

    // GL_ARB_texture_buffer_range
    // glTexBufferRange : (target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #c_call;

    // GL_ARB_texture_compression
    glCompressedTexImage3DARB : (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *void) #c_call;
    glCompressedTexImage2DARB : (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *void) #c_call;
    glCompressedTexImage1DARB : (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *void) #c_call;
    glCompressedTexSubImage3DARB : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #c_call;
    glCompressedTexSubImage2DARB : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #c_call;
    glCompressedTexSubImage1DARB : (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #c_call;
    glGetCompressedTexImageARB : (target: GLenum, level: GLint, img: *void) #c_call;

    // GL_ARB_texture_compression_bptc

    // GL_ARB_texture_compression_rgtc

    // GL_ARB_texture_cube_map

    // GL_ARB_texture_cube_map_array

    // GL_ARB_texture_env_add

    // GL_ARB_texture_env_combine

    // GL_ARB_texture_env_crossbar

    // GL_ARB_texture_env_dot3

    // GL_ARB_texture_filter_anisotropic

    // GL_ARB_texture_filter_minmax

    // GL_ARB_texture_float

    // GL_ARB_texture_gather

    // GL_ARB_texture_mirror_clamp_to_edge

    // GL_ARB_texture_mirrored_repeat

    // GL_ARB_texture_multisample
    // glTexImage2DMultisample : (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) #c_call;
    // glTexImage3DMultisample : (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) #c_call;
    // glGetMultisamplefv : (pname: GLenum, index: GLuint, val: *GLfloat) #c_call;
    // glSampleMaski : (maskNumber: GLuint, mask: GLbitfield) #c_call;

    // GL_ARB_texture_non_power_of_two

    // GL_ARB_texture_query_levels

    // GL_ARB_texture_query_lod

    // GL_ARB_texture_rectangle

    // GL_ARB_texture_rg

    // GL_ARB_texture_rgb10_a2ui

    // GL_ARB_texture_stencil8

    // GL_ARB_texture_storage
    // glTexStorage1D : (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) #c_call;
    // glTexStorage2D : (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #c_call;
    // glTexStorage3D : (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) #c_call;

    // GL_ARB_texture_storage_multisample
    // glTexStorage2DMultisample : (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) #c_call;
    // glTexStorage3DMultisample : (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) #c_call;

    // GL_ARB_texture_swizzle

    // GL_ARB_texture_view
    // glTextureView : (texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) #c_call;

    // GL_ARB_timer_query
    // glQueryCounter : (id: GLuint, target: GLenum) #c_call;
    // glGetQueryObjecti64v : (id: GLuint, pname: GLenum, params: *GLint64) #c_call;
    // glGetQueryObjectui64v : (id: GLuint, pname: GLenum, params: *GLuint64) #c_call;

    // GL_ARB_transform_feedback2
    // glBindTransformFeedback : (target: GLenum, id: GLuint) #c_call;
    // glDeleteTransformFeedbacks : (n: GLsizei, ids: *GLuint) #c_call;
    // glGenTransformFeedbacks : (n: GLsizei, ids: *GLuint) #c_call;
    // glIsTransformFeedback : (id: GLuint) -> GLboolean #c_call;
    // glPauseTransformFeedback : () #c_call;
    // glResumeTransformFeedback : () #c_call;
    // glDrawTransformFeedback : (mode: GLenum, id: GLuint) #c_call;

    // GL_ARB_transform_feedback3
    // glDrawTransformFeedbackStream : (mode: GLenum, id: GLuint, stream: GLuint) #c_call;
    // glBeginQueryIndexed : (target: GLenum, index: GLuint, id: GLuint) #c_call;
    // glEndQueryIndexed : (target: GLenum, index: GLuint) #c_call;
    // glGetQueryIndexediv : (target: GLenum, index: GLuint, pname: GLenum, params: *GLint) #c_call;

    // GL_ARB_transform_feedback_instanced
    // glDrawTransformFeedbackInstanced : (mode: GLenum, id: GLuint, instancecount: GLsizei) #c_call;
    // glDrawTransformFeedbackStreamInstanced : (mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei) #c_call;

    // GL_ARB_transform_feedback_overflow_query

    // GL_ARB_transpose_matrix
    glLoadTransposeMatrixfARB : (m: *GLfloat) #c_call;
    glLoadTransposeMatrixdARB : (m: *GLdouble) #c_call;
    glMultTransposeMatrixfARB : (m: *GLfloat) #c_call;
    glMultTransposeMatrixdARB : (m: *GLdouble) #c_call;

    // GL_ARB_uniform_buffer_object
    // glGetUniformIndices : (program: GLuint, uniformCount: GLsizei, uniformNames: **GLchar, uniformIndices: *GLuint) #c_call;
    // glGetActiveUniformsiv : (program: GLuint, uniformCount: GLsizei, uniformIndices: *GLuint, pname: GLenum, params: *GLint) #c_call;
    // glGetActiveUniformName : (program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformName: *GLchar) #c_call;
    // glGetUniformBlockIndex : (program: GLuint, uniformBlockName: *GLchar) -> GLuint #c_call;
    // glGetActiveUniformBlockiv : (program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: *GLint) #c_call;
    // glGetActiveUniformBlockName : (program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformBlockName: *GLchar) #c_call;
    // glUniformBlockBinding : (program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) #c_call;
    // glBindBufferRange : (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #c_call;
    // glBindBufferBase : (target: GLenum, index: GLuint, buffer: GLuint) #c_call;
    // glGetIntegeri_v : (target: GLenum, index: GLuint, data: *GLint) #c_call;

    // GL_ARB_vertex_array_bgra

    // GL_ARB_vertex_array_object
    // glBindVertexArray : (array: GLuint) #c_call;
    // glDeleteVertexArrays : (n: GLsizei, arrays: *GLuint) #c_call;
    // glGenVertexArrays : (n: GLsizei, arrays: *GLuint) #c_call;
    // glIsVertexArray : (array: GLuint) -> GLboolean #c_call;

    // GL_ARB_vertex_attrib_64bit
    // glVertexAttribL1d : (index: GLuint, x: GLdouble) #c_call;
    // glVertexAttribL2d : (index: GLuint, x: GLdouble, y: GLdouble) #c_call;
    // glVertexAttribL3d : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) #c_call;
    // glVertexAttribL4d : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #c_call;
    // glVertexAttribL1dv : (index: GLuint, v: *GLdouble) #c_call;
    // glVertexAttribL2dv : (index: GLuint, v: *GLdouble) #c_call;
    // glVertexAttribL3dv : (index: GLuint, v: *GLdouble) #c_call;
    // glVertexAttribL4dv : (index: GLuint, v: *GLdouble) #c_call;
    // glVertexAttribLPointer : (index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #c_call;
    // glGetVertexAttribLdv : (index: GLuint, pname: GLenum, params: *GLdouble) #c_call;

    // GL_ARB_vertex_attrib_binding
    // glBindVertexBuffer : (bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) #c_call;
    // glVertexAttribFormat : (attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint) #c_call;
    // glVertexAttribIFormat : (attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) #c_call;
    // glVertexAttribLFormat : (attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) #c_call;
    // glVertexAttribBinding : (attribindex: GLuint, bindingindex: GLuint) #c_call;
    // glVertexBindingDivisor : (bindingindex: GLuint, divisor: GLuint) #c_call;

    // GL_ARB_vertex_blend
    glWeightbvARB : (size: GLint, weights: *GLbyte) #c_call;
    glWeightsvARB : (size: GLint, weights: *GLshort) #c_call;
    glWeightivARB : (size: GLint, weights: *GLint) #c_call;
    glWeightfvARB : (size: GLint, weights: *GLfloat) #c_call;
    glWeightdvARB : (size: GLint, weights: *GLdouble) #c_call;
    glWeightubvARB : (size: GLint, weights: *GLubyte) #c_call;
    glWeightusvARB : (size: GLint, weights: *GLushort) #c_call;
    glWeightuivARB : (size: GLint, weights: *GLuint) #c_call;
    glWeightPointerARB : (size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #c_call;
    glVertexBlendARB : (count: GLint) #c_call;

    // GL_ARB_vertex_buffer_object
    glBindBufferARB : (target: GLenum, buffer: GLuint) #c_call;
    glDeleteBuffersARB : (n: GLsizei, buffers: *GLuint) #c_call;
    glGenBuffersARB : (n: GLsizei, buffers: *GLuint) #c_call;
    glIsBufferARB : (buffer: GLuint) -> GLboolean #c_call;
    glBufferDataARB : (target: GLenum, size: GLsizeiptrARB, data: *void, usage: GLenum) #c_call;
    glBufferSubDataARB : (target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: *void) #c_call;
    glGetBufferSubDataARB : (target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: *void) #c_call;
    glMapBufferARB : (target: GLenum, access: GLenum) #c_call;
    glUnmapBufferARB : (target: GLenum) -> GLboolean #c_call;
    glGetBufferParameterivARB : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetBufferPointervARB : (target: GLenum, pname: GLenum, params: **void) #c_call;

    // GL_ARB_vertex_program
    glVertexAttrib1dARB : (index: GLuint, x: GLdouble) #c_call;
    glVertexAttrib1dvARB : (index: GLuint, v: *GLdouble) #c_call;
    glVertexAttrib1fARB : (index: GLuint, x: GLfloat) #c_call;
    glVertexAttrib1fvARB : (index: GLuint, v: *GLfloat) #c_call;
    glVertexAttrib1sARB : (index: GLuint, x: GLshort) #c_call;
    glVertexAttrib1svARB : (index: GLuint, v: *GLshort) #c_call;
    glVertexAttrib2dARB : (index: GLuint, x: GLdouble, y: GLdouble) #c_call;
    glVertexAttrib2dvARB : (index: GLuint, v: *GLdouble) #c_call;
    glVertexAttrib2fARB : (index: GLuint, x: GLfloat, y: GLfloat) #c_call;
    glVertexAttrib2fvARB : (index: GLuint, v: *GLfloat) #c_call;
    glVertexAttrib2sARB : (index: GLuint, x: GLshort, y: GLshort) #c_call;
    glVertexAttrib2svARB : (index: GLuint, v: *GLshort) #c_call;
    glVertexAttrib3dARB : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) #c_call;
    glVertexAttrib3dvARB : (index: GLuint, v: *GLdouble) #c_call;
    glVertexAttrib3fARB : (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glVertexAttrib3fvARB : (index: GLuint, v: *GLfloat) #c_call;
    glVertexAttrib3sARB : (index: GLuint, x: GLshort, y: GLshort, z: GLshort) #c_call;
    glVertexAttrib3svARB : (index: GLuint, v: *GLshort) #c_call;
    glVertexAttrib4NbvARB : (index: GLuint, v: *GLbyte) #c_call;
    glVertexAttrib4NivARB : (index: GLuint, v: *GLint) #c_call;
    glVertexAttrib4NsvARB : (index: GLuint, v: *GLshort) #c_call;
    glVertexAttrib4NubARB : (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) #c_call;
    glVertexAttrib4NubvARB : (index: GLuint, v: *GLubyte) #c_call;
    glVertexAttrib4NuivARB : (index: GLuint, v: *GLuint) #c_call;
    glVertexAttrib4NusvARB : (index: GLuint, v: *GLushort) #c_call;
    glVertexAttrib4bvARB : (index: GLuint, v: *GLbyte) #c_call;
    glVertexAttrib4dARB : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #c_call;
    glVertexAttrib4dvARB : (index: GLuint, v: *GLdouble) #c_call;
    glVertexAttrib4fARB : (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #c_call;
    glVertexAttrib4fvARB : (index: GLuint, v: *GLfloat) #c_call;
    glVertexAttrib4ivARB : (index: GLuint, v: *GLint) #c_call;
    glVertexAttrib4sARB : (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) #c_call;
    glVertexAttrib4svARB : (index: GLuint, v: *GLshort) #c_call;
    glVertexAttrib4ubvARB : (index: GLuint, v: *GLubyte) #c_call;
    glVertexAttrib4uivARB : (index: GLuint, v: *GLuint) #c_call;
    glVertexAttrib4usvARB : (index: GLuint, v: *GLushort) #c_call;
    glVertexAttribPointerARB : (index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *void) #c_call;
    glEnableVertexAttribArrayARB : (index: GLuint) #c_call;
    glDisableVertexAttribArrayARB : (index: GLuint) #c_call;
    // glProgramStringARB : (target: GLenum, format: GLenum, len: GLsizei, str: *void) #c_call;
    // glBindProgramARB : (target: GLenum, program: GLuint) #c_call;
    // glDeleteProgramsARB : (n: GLsizei, programs: *GLuint) #c_call;
    // glGenProgramsARB : (n: GLsizei, programs: *GLuint) #c_call;
    // glProgramEnvParameter4dARB : (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #c_call;
    // glProgramEnvParameter4dvARB : (target: GLenum, index: GLuint, params: *GLdouble) #c_call;
    // glProgramEnvParameter4fARB : (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #c_call;
    // glProgramEnvParameter4fvARB : (target: GLenum, index: GLuint, params: *GLfloat) #c_call;
    // glProgramLocalParameter4dARB : (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #c_call;
    // glProgramLocalParameter4dvARB : (target: GLenum, index: GLuint, params: *GLdouble) #c_call;
    // glProgramLocalParameter4fARB : (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #c_call;
    // glProgramLocalParameter4fvARB : (target: GLenum, index: GLuint, params: *GLfloat) #c_call;
    // glGetProgramEnvParameterdvARB : (target: GLenum, index: GLuint, params: *GLdouble) #c_call;
    // glGetProgramEnvParameterfvARB : (target: GLenum, index: GLuint, params: *GLfloat) #c_call;
    // glGetProgramLocalParameterdvARB : (target: GLenum, index: GLuint, params: *GLdouble) #c_call;
    // glGetProgramLocalParameterfvARB : (target: GLenum, index: GLuint, params: *GLfloat) #c_call;
    // glGetProgramivARB : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    // glGetProgramStringARB : (target: GLenum, pname: GLenum, str: *void) #c_call;
    glGetVertexAttribdvARB : (index: GLuint, pname: GLenum, params: *GLdouble) #c_call;
    glGetVertexAttribfvARB : (index: GLuint, pname: GLenum, params: *GLfloat) #c_call;
    glGetVertexAttribivARB : (index: GLuint, pname: GLenum, params: *GLint) #c_call;
    glGetVertexAttribPointervARB : (index: GLuint, pname: GLenum, pointer: **void) #c_call;
    // glIsProgramARB : (program: GLuint) -> GLboolean #c_call;

    // GL_ARB_vertex_shader
    // glVertexAttrib1fARB : (index: GLuint, x: GLfloat) #c_call;
    // glVertexAttrib1sARB : (index: GLuint, x: GLshort) #c_call;
    // glVertexAttrib1dARB : (index: GLuint, x: GLdouble) #c_call;
    // glVertexAttrib2fARB : (index: GLuint, x: GLfloat, y: GLfloat) #c_call;
    // glVertexAttrib2sARB : (index: GLuint, x: GLshort, y: GLshort) #c_call;
    // glVertexAttrib2dARB : (index: GLuint, x: GLdouble, y: GLdouble) #c_call;
    // glVertexAttrib3fARB : (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    // glVertexAttrib3sARB : (index: GLuint, x: GLshort, y: GLshort, z: GLshort) #c_call;
    // glVertexAttrib3dARB : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) #c_call;
    // glVertexAttrib4fARB : (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #c_call;
    // glVertexAttrib4sARB : (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) #c_call;
    // glVertexAttrib4dARB : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #c_call;
    // glVertexAttrib4NubARB : (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) #c_call;
    // glVertexAttrib1fvARB : (index: GLuint, v: *GLfloat) #c_call;
    // glVertexAttrib1svARB : (index: GLuint, v: *GLshort) #c_call;
    // glVertexAttrib1dvARB : (index: GLuint, v: *GLdouble) #c_call;
    // glVertexAttrib2fvARB : (index: GLuint, v: *GLfloat) #c_call;
    // glVertexAttrib2svARB : (index: GLuint, v: *GLshort) #c_call;
    // glVertexAttrib2dvARB : (index: GLuint, v: *GLdouble) #c_call;
    // glVertexAttrib3fvARB : (index: GLuint, v: *GLfloat) #c_call;
    // glVertexAttrib3svARB : (index: GLuint, v: *GLshort) #c_call;
    // glVertexAttrib3dvARB : (index: GLuint, v: *GLdouble) #c_call;
    // glVertexAttrib4fvARB : (index: GLuint, v: *GLfloat) #c_call;
    // glVertexAttrib4svARB : (index: GLuint, v: *GLshort) #c_call;
    // glVertexAttrib4dvARB : (index: GLuint, v: *GLdouble) #c_call;
    // glVertexAttrib4ivARB : (index: GLuint, v: *GLint) #c_call;
    // glVertexAttrib4bvARB : (index: GLuint, v: *GLbyte) #c_call;
    // glVertexAttrib4ubvARB : (index: GLuint, v: *GLubyte) #c_call;
    // glVertexAttrib4usvARB : (index: GLuint, v: *GLushort) #c_call;
    // glVertexAttrib4uivARB : (index: GLuint, v: *GLuint) #c_call;
    // glVertexAttrib4NbvARB : (index: GLuint, v: *GLbyte) #c_call;
    // glVertexAttrib4NsvARB : (index: GLuint, v: *GLshort) #c_call;
    // glVertexAttrib4NivARB : (index: GLuint, v: *GLint) #c_call;
    // glVertexAttrib4NubvARB : (index: GLuint, v: *GLubyte) #c_call;
    // glVertexAttrib4NusvARB : (index: GLuint, v: *GLushort) #c_call;
    // glVertexAttrib4NuivARB : (index: GLuint, v: *GLuint) #c_call;
    // glVertexAttribPointerARB : (index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *void) #c_call;
    // glEnableVertexAttribArrayARB : (index: GLuint) #c_call;
    // glDisableVertexAttribArrayARB : (index: GLuint) #c_call;
    glBindAttribLocationARB : (programObj: GLhandleARB, index: GLuint, name: *GLcharARB) #c_call;
    glGetActiveAttribARB : (programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: *GLsizei, size: *GLint, type: *GLenum, name: *GLcharARB) #c_call;
    glGetAttribLocationARB : (programObj: GLhandleARB, name: *GLcharARB) -> GLint #c_call;
    // glGetVertexAttribdvARB : (index: GLuint, pname: GLenum, params: *GLdouble) #c_call;
    // glGetVertexAttribfvARB : (index: GLuint, pname: GLenum, params: *GLfloat) #c_call;
    // glGetVertexAttribivARB : (index: GLuint, pname: GLenum, params: *GLint) #c_call;
    // glGetVertexAttribPointervARB : (index: GLuint, pname: GLenum, pointer: **void) #c_call;

    // GL_ARB_vertex_type_10f_11f_11f_rev

    // GL_ARB_vertex_type_2_10_10_10_rev
    // glVertexAttribP1ui : (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint) #c_call;
    // glVertexAttribP1uiv : (index: GLuint, type: GLenum, normalized: GLboolean, value: *GLuint) #c_call;
    // glVertexAttribP2ui : (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint) #c_call;
    // glVertexAttribP2uiv : (index: GLuint, type: GLenum, normalized: GLboolean, value: *GLuint) #c_call;
    // glVertexAttribP3ui : (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint) #c_call;
    // glVertexAttribP3uiv : (index: GLuint, type: GLenum, normalized: GLboolean, value: *GLuint) #c_call;
    // glVertexAttribP4ui : (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint) #c_call;
    // glVertexAttribP4uiv : (index: GLuint, type: GLenum, normalized: GLboolean, value: *GLuint) #c_call;
    // glVertexP2ui : (type: GLenum, value: GLuint) #c_call;
    // glVertexP2uiv : (type: GLenum, value: *GLuint) #c_call;
    // glVertexP3ui : (type: GLenum, value: GLuint) #c_call;
    // glVertexP3uiv : (type: GLenum, value: *GLuint) #c_call;
    // glVertexP4ui : (type: GLenum, value: GLuint) #c_call;
    // glVertexP4uiv : (type: GLenum, value: *GLuint) #c_call;
    // glTexCoordP1ui : (type: GLenum, coords: GLuint) #c_call;
    // glTexCoordP1uiv : (type: GLenum, coords: *GLuint) #c_call;
    // glTexCoordP2ui : (type: GLenum, coords: GLuint) #c_call;
    // glTexCoordP2uiv : (type: GLenum, coords: *GLuint) #c_call;
    // glTexCoordP3ui : (type: GLenum, coords: GLuint) #c_call;
    // glTexCoordP3uiv : (type: GLenum, coords: *GLuint) #c_call;
    // glTexCoordP4ui : (type: GLenum, coords: GLuint) #c_call;
    // glTexCoordP4uiv : (type: GLenum, coords: *GLuint) #c_call;
    // glMultiTexCoordP1ui : (texture: GLenum, type: GLenum, coords: GLuint) #c_call;
    // glMultiTexCoordP1uiv : (texture: GLenum, type: GLenum, coords: *GLuint) #c_call;
    // glMultiTexCoordP2ui : (texture: GLenum, type: GLenum, coords: GLuint) #c_call;
    // glMultiTexCoordP2uiv : (texture: GLenum, type: GLenum, coords: *GLuint) #c_call;
    // glMultiTexCoordP3ui : (texture: GLenum, type: GLenum, coords: GLuint) #c_call;
    // glMultiTexCoordP3uiv : (texture: GLenum, type: GLenum, coords: *GLuint) #c_call;
    // glMultiTexCoordP4ui : (texture: GLenum, type: GLenum, coords: GLuint) #c_call;
    // glMultiTexCoordP4uiv : (texture: GLenum, type: GLenum, coords: *GLuint) #c_call;
    // glNormalP3ui : (type: GLenum, coords: GLuint) #c_call;
    // glNormalP3uiv : (type: GLenum, coords: *GLuint) #c_call;
    // glColorP3ui : (type: GLenum, color: GLuint) #c_call;
    // glColorP3uiv : (type: GLenum, color: *GLuint) #c_call;
    // glColorP4ui : (type: GLenum, color: GLuint) #c_call;
    // glColorP4uiv : (type: GLenum, color: *GLuint) #c_call;
    // glSecondaryColorP3ui : (type: GLenum, color: GLuint) #c_call;
    // glSecondaryColorP3uiv : (type: GLenum, color: *GLuint) #c_call;

    // GL_ARB_viewport_array
    // glViewportArrayv : (first: GLuint, count: GLsizei, v: *GLfloat) #c_call;
    // glViewportIndexedf : (index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) #c_call;
    // glViewportIndexedfv : (index: GLuint, v: *GLfloat) #c_call;
    // glScissorArrayv : (first: GLuint, count: GLsizei, v: *GLint) #c_call;
    // glScissorIndexed : (index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) #c_call;
    // glScissorIndexedv : (index: GLuint, v: *GLint) #c_call;
    // glDepthRangeArrayv : (first: GLuint, count: GLsizei, v: *GLdouble) #c_call;
    // glDepthRangeIndexed : (index: GLuint, n: GLdouble, f: GLdouble) #c_call;
    // glGetFloati_v : (target: GLenum, index: GLuint, data: *GLfloat) #c_call;
    // glGetDoublei_v : (target: GLenum, index: GLuint, data: *GLdouble) #c_call;

    // GL_ARB_window_pos
    glWindowPos2dARB : (x: GLdouble, y: GLdouble) #c_call;
    glWindowPos2dvARB : (v: *GLdouble) #c_call;
    glWindowPos2fARB : (x: GLfloat, y: GLfloat) #c_call;
    glWindowPos2fvARB : (v: *GLfloat) #c_call;
    glWindowPos2iARB : (x: GLint, y: GLint) #c_call;
    glWindowPos2ivARB : (v: *GLint) #c_call;
    glWindowPos2sARB : (x: GLshort, y: GLshort) #c_call;
    glWindowPos2svARB : (v: *GLshort) #c_call;
    glWindowPos3dARB : (x: GLdouble, y: GLdouble, z: GLdouble) #c_call;
    glWindowPos3dvARB : (v: *GLdouble) #c_call;
    glWindowPos3fARB : (x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glWindowPos3fvARB : (v: *GLfloat) #c_call;
    glWindowPos3iARB : (x: GLint, y: GLint, z: GLint) #c_call;
    glWindowPos3ivARB : (v: *GLint) #c_call;
    glWindowPos3sARB : (x: GLshort, y: GLshort, z: GLshort) #c_call;
    glWindowPos3svARB : (v: *GLshort) #c_call;

    // GL_ATI_draw_buffers
    glDrawBuffersATI : (n: GLsizei, bufs: *GLenum) #c_call;

    // GL_ATI_element_array
    glElementPointerATI : (type: GLenum, pointer: *void) #c_call;
    glDrawElementArrayATI : (mode: GLenum, count: GLsizei) #c_call;
    glDrawRangeElementArrayATI : (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei) #c_call;

    // GL_ATI_envmap_bumpmap
    glTexBumpParameterivATI : (pname: GLenum, param: *GLint) #c_call;
    glTexBumpParameterfvATI : (pname: GLenum, param: *GLfloat) #c_call;
    glGetTexBumpParameterivATI : (pname: GLenum, param: *GLint) #c_call;
    glGetTexBumpParameterfvATI : (pname: GLenum, param: *GLfloat) #c_call;

    // GL_ATI_fragment_shader
    glGenFragmentShadersATI : (range: GLuint) -> GLuint #c_call;
    glBindFragmentShaderATI : (id: GLuint) #c_call;
    glDeleteFragmentShaderATI : (id: GLuint) #c_call;
    glBeginFragmentShaderATI : () #c_call;
    glEndFragmentShaderATI : () #c_call;
    glPassTexCoordATI : (dst: GLuint, coord: GLuint, swizzle: GLenum) #c_call;
    glSampleMapATI : (dst: GLuint, interp: GLuint, swizzle: GLenum) #c_call;
    glColorFragmentOp1ATI : (op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) #c_call;
    glColorFragmentOp2ATI : (op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) #c_call;
    glColorFragmentOp3ATI : (op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) #c_call;
    glAlphaFragmentOp1ATI : (op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) #c_call;
    glAlphaFragmentOp2ATI : (op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) #c_call;
    glAlphaFragmentOp3ATI : (op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) #c_call;
    glSetFragmentShaderConstantATI : (dst: GLuint, value: *GLfloat) #c_call;

    // GL_ATI_map_object_buffer
    glMapObjectBufferATI : (buffer: GLuint) #c_call;
    glUnmapObjectBufferATI : (buffer: GLuint) #c_call;

    // GL_ATI_meminfo

    // GL_ATI_pixel_format_float

    // GL_ATI_pn_triangles
    glPNTrianglesiATI : (pname: GLenum, param: GLint) #c_call;
    glPNTrianglesfATI : (pname: GLenum, param: GLfloat) #c_call;

    // GL_ATI_separate_stencil
    glStencilOpSeparateATI : (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) #c_call;
    glStencilFuncSeparateATI : (frontfunc: GLenum, backfunc: GLenum, ref: GLint, mask: GLuint) #c_call;

    // GL_ATI_text_fragment_shader

    // GL_ATI_texture_env_combine3

    // GL_ATI_texture_float

    // GL_ATI_texture_mirror_once

    // GL_ATI_vertex_array_object
    glNewObjectBufferATI : (size: GLsizei, pointer: *void, usage: GLenum) -> GLuint #c_call;
    glIsObjectBufferATI : (buffer: GLuint) -> GLboolean #c_call;
    glUpdateObjectBufferATI : (buffer: GLuint, offset: GLuint, size: GLsizei, pointer: *void, preserve: GLenum) #c_call;
    glGetObjectBufferfvATI : (buffer: GLuint, pname: GLenum, params: *GLfloat) #c_call;
    glGetObjectBufferivATI : (buffer: GLuint, pname: GLenum, params: *GLint) #c_call;
    glFreeObjectBufferATI : (buffer: GLuint) #c_call;
    glArrayObjectATI : (array: GLenum, size: GLint, type: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint) #c_call;
    glGetArrayObjectfvATI : (array: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetArrayObjectivATI : (array: GLenum, pname: GLenum, params: *GLint) #c_call;
    glVariantArrayObjectATI : (id: GLuint, type: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint) #c_call;
    glGetVariantArrayObjectfvATI : (id: GLuint, pname: GLenum, params: *GLfloat) #c_call;
    glGetVariantArrayObjectivATI : (id: GLuint, pname: GLenum, params: *GLint) #c_call;

    // GL_ATI_vertex_attrib_array_object
    glVertexAttribArrayObjectATI : (index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, buffer: GLuint, offset: GLuint) #c_call;
    glGetVertexAttribArrayObjectfvATI : (index: GLuint, pname: GLenum, params: *GLfloat) #c_call;
    glGetVertexAttribArrayObjectivATI : (index: GLuint, pname: GLenum, params: *GLint) #c_call;

    // GL_ATI_vertex_streams
    glVertexStream1sATI : (stream: GLenum, x: GLshort) #c_call;
    glVertexStream1svATI : (stream: GLenum, coords: *GLshort) #c_call;
    glVertexStream1iATI : (stream: GLenum, x: GLint) #c_call;
    glVertexStream1ivATI : (stream: GLenum, coords: *GLint) #c_call;
    glVertexStream1fATI : (stream: GLenum, x: GLfloat) #c_call;
    glVertexStream1fvATI : (stream: GLenum, coords: *GLfloat) #c_call;
    glVertexStream1dATI : (stream: GLenum, x: GLdouble) #c_call;
    glVertexStream1dvATI : (stream: GLenum, coords: *GLdouble) #c_call;
    glVertexStream2sATI : (stream: GLenum, x: GLshort, y: GLshort) #c_call;
    glVertexStream2svATI : (stream: GLenum, coords: *GLshort) #c_call;
    glVertexStream2iATI : (stream: GLenum, x: GLint, y: GLint) #c_call;
    glVertexStream2ivATI : (stream: GLenum, coords: *GLint) #c_call;
    glVertexStream2fATI : (stream: GLenum, x: GLfloat, y: GLfloat) #c_call;
    glVertexStream2fvATI : (stream: GLenum, coords: *GLfloat) #c_call;
    glVertexStream2dATI : (stream: GLenum, x: GLdouble, y: GLdouble) #c_call;
    glVertexStream2dvATI : (stream: GLenum, coords: *GLdouble) #c_call;
    glVertexStream3sATI : (stream: GLenum, x: GLshort, y: GLshort, z: GLshort) #c_call;
    glVertexStream3svATI : (stream: GLenum, coords: *GLshort) #c_call;
    glVertexStream3iATI : (stream: GLenum, x: GLint, y: GLint, z: GLint) #c_call;
    glVertexStream3ivATI : (stream: GLenum, coords: *GLint) #c_call;
    glVertexStream3fATI : (stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glVertexStream3fvATI : (stream: GLenum, coords: *GLfloat) #c_call;
    glVertexStream3dATI : (stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) #c_call;
    glVertexStream3dvATI : (stream: GLenum, coords: *GLdouble) #c_call;
    glVertexStream4sATI : (stream: GLenum, x: GLshort, y: GLshort, z: GLshort, w: GLshort) #c_call;
    glVertexStream4svATI : (stream: GLenum, coords: *GLshort) #c_call;
    glVertexStream4iATI : (stream: GLenum, x: GLint, y: GLint, z: GLint, w: GLint) #c_call;
    glVertexStream4ivATI : (stream: GLenum, coords: *GLint) #c_call;
    glVertexStream4fATI : (stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #c_call;
    glVertexStream4fvATI : (stream: GLenum, coords: *GLfloat) #c_call;
    glVertexStream4dATI : (stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #c_call;
    glVertexStream4dvATI : (stream: GLenum, coords: *GLdouble) #c_call;
    glNormalStream3bATI : (stream: GLenum, nx: GLbyte, ny: GLbyte, nz: GLbyte) #c_call;
    glNormalStream3bvATI : (stream: GLenum, coords: *GLbyte) #c_call;
    glNormalStream3sATI : (stream: GLenum, nx: GLshort, ny: GLshort, nz: GLshort) #c_call;
    glNormalStream3svATI : (stream: GLenum, coords: *GLshort) #c_call;
    glNormalStream3iATI : (stream: GLenum, nx: GLint, ny: GLint, nz: GLint) #c_call;
    glNormalStream3ivATI : (stream: GLenum, coords: *GLint) #c_call;
    glNormalStream3fATI : (stream: GLenum, nx: GLfloat, ny: GLfloat, nz: GLfloat) #c_call;
    glNormalStream3fvATI : (stream: GLenum, coords: *GLfloat) #c_call;
    glNormalStream3dATI : (stream: GLenum, nx: GLdouble, ny: GLdouble, nz: GLdouble) #c_call;
    glNormalStream3dvATI : (stream: GLenum, coords: *GLdouble) #c_call;
    glClientActiveVertexStreamATI : (stream: GLenum) #c_call;
    glVertexBlendEnviATI : (pname: GLenum, param: GLint) #c_call;
    glVertexBlendEnvfATI : (pname: GLenum, param: GLfloat) #c_call;

    // GL_EXT_422_pixels

    // GL_EXT_abgr

    // GL_EXT_bgra

    // GL_EXT_bindable_uniform
    glUniformBufferEXT : (program: GLuint, location: GLint, buffer: GLuint) #c_call;
    glGetUniformBufferSizeEXT : (program: GLuint, location: GLint) -> GLint #c_call;
    glGetUniformOffsetEXT : (program: GLuint, location: GLint) -> GLintptr #c_call;

    // GL_EXT_blend_color
    glBlendColorEXT : (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) #c_call;

    // GL_EXT_blend_equation_separate
    glBlendEquationSeparateEXT : (modeRGB: GLenum, modeAlpha: GLenum) #c_call;

    // GL_EXT_blend_func_separate
    glBlendFuncSeparateEXT : (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) #c_call;

    // GL_EXT_blend_logic_op

    // GL_EXT_blend_minmax
    glBlendEquationEXT : (mode: GLenum) #c_call;

    // GL_EXT_blend_subtract

    // GL_EXT_clip_volume_hint

    // GL_EXT_cmyka

    // GL_EXT_color_subtable
    glColorSubTableEXT : (target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type: GLenum, data: *void) #c_call;
    glCopyColorSubTableEXT : (target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) #c_call;

    // GL_EXT_compiled_vertex_array
    glLockArraysEXT : (first: GLint, count: GLsizei) #c_call;
    glUnlockArraysEXT : () #c_call;

    // GL_EXT_convolution
    glConvolutionFilter1DEXT : (target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type: GLenum, image: *void) #c_call;
    glConvolutionFilter2DEXT : (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, image: *void) #c_call;
    glConvolutionParameterfEXT : (target: GLenum, pname: GLenum, params: GLfloat) #c_call;
    glConvolutionParameterfvEXT : (target: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glConvolutionParameteriEXT : (target: GLenum, pname: GLenum, params: GLint) #c_call;
    glConvolutionParameterivEXT : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glCopyConvolutionFilter1DEXT : (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) #c_call;
    glCopyConvolutionFilter2DEXT : (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #c_call;
    glGetConvolutionFilterEXT : (target: GLenum, format: GLenum, type: GLenum, image: *void) #c_call;
    glGetConvolutionParameterfvEXT : (target: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetConvolutionParameterivEXT : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetSeparableFilterEXT : (target: GLenum, format: GLenum, type: GLenum, row: *void, column: *void, span: *void) #c_call;
    glSeparableFilter2DEXT : (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, row: *void, column: *void) #c_call;

    // GL_EXT_coordinate_frame
    glTangent3bEXT : (tx: GLbyte, ty: GLbyte, tz: GLbyte) #c_call;
    glTangent3bvEXT : (v: *GLbyte) #c_call;
    glTangent3dEXT : (tx: GLdouble, ty: GLdouble, tz: GLdouble) #c_call;
    glTangent3dvEXT : (v: *GLdouble) #c_call;
    glTangent3fEXT : (tx: GLfloat, ty: GLfloat, tz: GLfloat) #c_call;
    glTangent3fvEXT : (v: *GLfloat) #c_call;
    glTangent3iEXT : (tx: GLint, ty: GLint, tz: GLint) #c_call;
    glTangent3ivEXT : (v: *GLint) #c_call;
    glTangent3sEXT : (tx: GLshort, ty: GLshort, tz: GLshort) #c_call;
    glTangent3svEXT : (v: *GLshort) #c_call;
    glBinormal3bEXT : (bx: GLbyte, by: GLbyte, bz: GLbyte) #c_call;
    glBinormal3bvEXT : (v: *GLbyte) #c_call;
    glBinormal3dEXT : (bx: GLdouble, by: GLdouble, bz: GLdouble) #c_call;
    glBinormal3dvEXT : (v: *GLdouble) #c_call;
    glBinormal3fEXT : (bx: GLfloat, by: GLfloat, bz: GLfloat) #c_call;
    glBinormal3fvEXT : (v: *GLfloat) #c_call;
    glBinormal3iEXT : (bx: GLint, by: GLint, bz: GLint) #c_call;
    glBinormal3ivEXT : (v: *GLint) #c_call;
    glBinormal3sEXT : (bx: GLshort, by: GLshort, bz: GLshort) #c_call;
    glBinormal3svEXT : (v: *GLshort) #c_call;
    glTangentPointerEXT : (type: GLenum, stride: GLsizei, pointer: *void) #c_call;
    glBinormalPointerEXT : (type: GLenum, stride: GLsizei, pointer: *void) #c_call;

    // GL_EXT_copy_texture
    glCopyTexImage1DEXT : (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) #c_call;
    glCopyTexImage2DEXT : (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) #c_call;
    glCopyTexSubImage1DEXT : (target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) #c_call;
    glCopyTexSubImage2DEXT : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #c_call;
    glCopyTexSubImage3DEXT : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #c_call;

    // GL_EXT_cull_vertex
    glCullParameterdvEXT : (pname: GLenum, params: *GLdouble) #c_call;
    glCullParameterfvEXT : (pname: GLenum, params: *GLfloat) #c_call;

    // GL_EXT_debug_label
    glLabelObjectEXT : (type: GLenum, object: GLuint, length: GLsizei, label: *GLchar) #c_call;
    glGetObjectLabelEXT : (type: GLenum, object: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) #c_call;

    // GL_EXT_debug_marker
    glInsertEventMarkerEXT : (length: GLsizei, marker: *GLchar) #c_call;
    glPushGroupMarkerEXT : (length: GLsizei, marker: *GLchar) #c_call;
    glPopGroupMarkerEXT : () #c_call;

    // GL_EXT_depth_bounds_test
    glDepthBoundsEXT : (zmin: GLclampd, zmax: GLclampd) #c_call;

    // GL_EXT_direct_state_access
    glMatrixLoadfEXT : (mode: GLenum, m: *GLfloat) #c_call;
    glMatrixLoaddEXT : (mode: GLenum, m: *GLdouble) #c_call;
    glMatrixMultfEXT : (mode: GLenum, m: *GLfloat) #c_call;
    glMatrixMultdEXT : (mode: GLenum, m: *GLdouble) #c_call;
    glMatrixLoadIdentityEXT : (mode: GLenum) #c_call;
    glMatrixRotatefEXT : (mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glMatrixRotatedEXT : (mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) #c_call;
    glMatrixScalefEXT : (mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glMatrixScaledEXT : (mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) #c_call;
    glMatrixTranslatefEXT : (mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glMatrixTranslatedEXT : (mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) #c_call;
    glMatrixFrustumEXT : (mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) #c_call;
    glMatrixOrthoEXT : (mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) #c_call;
    glMatrixPopEXT : (mode: GLenum) #c_call;
    glMatrixPushEXT : (mode: GLenum) #c_call;
    glClientAttribDefaultEXT : (mask: GLbitfield) #c_call;
    glPushClientAttribDefaultEXT : (mask: GLbitfield) #c_call;
    glTextureParameterfEXT : (texture: GLuint, target: GLenum, pname: GLenum, param: GLfloat) #c_call;
    glTextureParameterfvEXT : (texture: GLuint, target: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glTextureParameteriEXT : (texture: GLuint, target: GLenum, pname: GLenum, param: GLint) #c_call;
    glTextureParameterivEXT : (texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glTextureImage1DEXT : (texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glTextureImage2DEXT : (texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glTextureSubImage1DEXT : (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glTextureSubImage2DEXT : (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glCopyTextureImage1DEXT : (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) #c_call;
    glCopyTextureImage2DEXT : (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) #c_call;
    glCopyTextureSubImage1DEXT : (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) #c_call;
    glCopyTextureSubImage2DEXT : (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #c_call;
    glGetTextureImageEXT : (texture: GLuint, target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glGetTextureParameterfvEXT : (texture: GLuint, target: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetTextureParameterivEXT : (texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetTextureLevelParameterfvEXT : (texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) #c_call;
    glGetTextureLevelParameterivEXT : (texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: *GLint) #c_call;
    glTextureImage3DEXT : (texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glTextureSubImage3DEXT : (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glCopyTextureSubImage3DEXT : (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #c_call;
    glBindMultiTextureEXT : (texunit: GLenum, target: GLenum, texture: GLuint) #c_call;
    glMultiTexCoordPointerEXT : (texunit: GLenum, size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #c_call;
    glMultiTexEnvfEXT : (texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) #c_call;
    glMultiTexEnvfvEXT : (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glMultiTexEnviEXT : (texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) #c_call;
    glMultiTexEnvivEXT : (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glMultiTexGendEXT : (texunit: GLenum, coord: GLenum, pname: GLenum, param: GLdouble) #c_call;
    glMultiTexGendvEXT : (texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLdouble) #c_call;
    glMultiTexGenfEXT : (texunit: GLenum, coord: GLenum, pname: GLenum, param: GLfloat) #c_call;
    glMultiTexGenfvEXT : (texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glMultiTexGeniEXT : (texunit: GLenum, coord: GLenum, pname: GLenum, param: GLint) #c_call;
    glMultiTexGenivEXT : (texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetMultiTexEnvfvEXT : (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetMultiTexEnvivEXT : (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetMultiTexGendvEXT : (texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLdouble) #c_call;
    glGetMultiTexGenfvEXT : (texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetMultiTexGenivEXT : (texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLint) #c_call;
    glMultiTexParameteriEXT : (texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) #c_call;
    glMultiTexParameterivEXT : (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glMultiTexParameterfEXT : (texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) #c_call;
    glMultiTexParameterfvEXT : (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glMultiTexImage1DEXT : (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glMultiTexImage2DEXT : (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glMultiTexSubImage1DEXT : (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glMultiTexSubImage2DEXT : (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glCopyMultiTexImage1DEXT : (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) #c_call;
    glCopyMultiTexImage2DEXT : (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) #c_call;
    glCopyMultiTexSubImage1DEXT : (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) #c_call;
    glCopyMultiTexSubImage2DEXT : (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #c_call;
    glGetMultiTexImageEXT : (texunit: GLenum, target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glGetMultiTexParameterfvEXT : (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetMultiTexParameterivEXT : (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetMultiTexLevelParameterfvEXT : (texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) #c_call;
    glGetMultiTexLevelParameterivEXT : (texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: *GLint) #c_call;
    glMultiTexImage3DEXT : (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glMultiTexSubImage3DEXT : (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glCopyMultiTexSubImage3DEXT : (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #c_call;
    glEnableClientStateIndexedEXT : (array: GLenum, index: GLuint) #c_call;
    glDisableClientStateIndexedEXT : (array: GLenum, index: GLuint) #c_call;
    glGetFloatIndexedvEXT : (target: GLenum, index: GLuint, data: *GLfloat) #c_call;
    glGetDoubleIndexedvEXT : (target: GLenum, index: GLuint, data: *GLdouble) #c_call;
    glGetPointerIndexedvEXT : (target: GLenum, index: GLuint, data: **void) #c_call;
    glEnableIndexedEXT : (target: GLenum, index: GLuint) #c_call;
    glDisableIndexedEXT : (target: GLenum, index: GLuint) #c_call;
    glIsEnabledIndexedEXT : (target: GLenum, index: GLuint) -> GLboolean #c_call;
    glGetIntegerIndexedvEXT : (target: GLenum, index: GLuint, data: *GLint) #c_call;
    glGetBooleanIndexedvEXT : (target: GLenum, index: GLuint, data: *GLboolean) #c_call;
    glCompressedTextureImage3DEXT : (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: *void) #c_call;
    glCompressedTextureImage2DEXT : (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: *void) #c_call;
    glCompressedTextureImage1DEXT : (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: *void) #c_call;
    glCompressedTextureSubImage3DEXT : (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: *void) #c_call;
    glCompressedTextureSubImage2DEXT : (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: *void) #c_call;
    glCompressedTextureSubImage1DEXT : (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: *void) #c_call;
    glGetCompressedTextureImageEXT : (texture: GLuint, target: GLenum, lod: GLint, img: *void) #c_call;
    glCompressedMultiTexImage3DEXT : (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: *void) #c_call;
    glCompressedMultiTexImage2DEXT : (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: *void) #c_call;
    glCompressedMultiTexImage1DEXT : (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: *void) #c_call;
    glCompressedMultiTexSubImage3DEXT : (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: *void) #c_call;
    glCompressedMultiTexSubImage2DEXT : (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: *void) #c_call;
    glCompressedMultiTexSubImage1DEXT : (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: *void) #c_call;
    glGetCompressedMultiTexImageEXT : (texunit: GLenum, target: GLenum, lod: GLint, img: *void) #c_call;
    glMatrixLoadTransposefEXT : (mode: GLenum, m: *GLfloat) #c_call;
    glMatrixLoadTransposedEXT : (mode: GLenum, m: *GLdouble) #c_call;
    glMatrixMultTransposefEXT : (mode: GLenum, m: *GLfloat) #c_call;
    glMatrixMultTransposedEXT : (mode: GLenum, m: *GLdouble) #c_call;
    glNamedBufferDataEXT : (buffer: GLuint, size: GLsizeiptr, data: *void, usage: GLenum) #c_call;
    glNamedBufferSubDataEXT : (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *void) #c_call;
    glMapNamedBufferEXT : (buffer: GLuint, access: GLenum) #c_call;
    glUnmapNamedBufferEXT : (buffer: GLuint) -> GLboolean #c_call;
    glGetNamedBufferParameterivEXT : (buffer: GLuint, pname: GLenum, params: *GLint) #c_call;
    glGetNamedBufferPointervEXT : (buffer: GLuint, pname: GLenum, params: **void) #c_call;
    glGetNamedBufferSubDataEXT : (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *void) #c_call;
    glProgramUniform1fEXT : (program: GLuint, location: GLint, v0: GLfloat) #c_call;
    glProgramUniform2fEXT : (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) #c_call;
    glProgramUniform3fEXT : (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) #c_call;
    glProgramUniform4fEXT : (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) #c_call;
    glProgramUniform1iEXT : (program: GLuint, location: GLint, v0: GLint) #c_call;
    glProgramUniform2iEXT : (program: GLuint, location: GLint, v0: GLint, v1: GLint) #c_call;
    glProgramUniform3iEXT : (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) #c_call;
    glProgramUniform4iEXT : (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) #c_call;
    glProgramUniform1fvEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #c_call;
    glProgramUniform2fvEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #c_call;
    glProgramUniform3fvEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #c_call;
    glProgramUniform4fvEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #c_call;
    glProgramUniform1ivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #c_call;
    glProgramUniform2ivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #c_call;
    glProgramUniform3ivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #c_call;
    glProgramUniform4ivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #c_call;
    glProgramUniformMatrix2fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glProgramUniformMatrix3fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glProgramUniformMatrix4fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glProgramUniformMatrix2x3fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glProgramUniformMatrix3x2fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glProgramUniformMatrix2x4fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glProgramUniformMatrix4x2fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glProgramUniformMatrix3x4fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glProgramUniformMatrix4x3fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glTextureBufferEXT : (texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint) #c_call;
    glMultiTexBufferEXT : (texunit: GLenum, target: GLenum, internalformat: GLenum, buffer: GLuint) #c_call;
    glTextureParameterIivEXT : (texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glTextureParameterIuivEXT : (texture: GLuint, target: GLenum, pname: GLenum, params: *GLuint) #c_call;
    glGetTextureParameterIivEXT : (texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetTextureParameterIuivEXT : (texture: GLuint, target: GLenum, pname: GLenum, params: *GLuint) #c_call;
    glMultiTexParameterIivEXT : (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glMultiTexParameterIuivEXT : (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLuint) #c_call;
    glGetMultiTexParameterIivEXT : (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetMultiTexParameterIuivEXT : (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLuint) #c_call;
    glProgramUniform1uiEXT : (program: GLuint, location: GLint, v0: GLuint) #c_call;
    glProgramUniform2uiEXT : (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) #c_call;
    glProgramUniform3uiEXT : (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) #c_call;
    glProgramUniform4uiEXT : (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) #c_call;
    glProgramUniform1uivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #c_call;
    glProgramUniform2uivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #c_call;
    glProgramUniform3uivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #c_call;
    glProgramUniform4uivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #c_call;
    glNamedProgramLocalParameters4fvEXT : (program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *GLfloat) #c_call;
    glNamedProgramLocalParameterI4iEXT : (program: GLuint, target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) #c_call;
    glNamedProgramLocalParameterI4ivEXT : (program: GLuint, target: GLenum, index: GLuint, params: *GLint) #c_call;
    glNamedProgramLocalParametersI4ivEXT : (program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *GLint) #c_call;
    glNamedProgramLocalParameterI4uiEXT : (program: GLuint, target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) #c_call;
    glNamedProgramLocalParameterI4uivEXT : (program: GLuint, target: GLenum, index: GLuint, params: *GLuint) #c_call;
    glNamedProgramLocalParametersI4uivEXT : (program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *GLuint) #c_call;
    glGetNamedProgramLocalParameterIivEXT : (program: GLuint, target: GLenum, index: GLuint, params: *GLint) #c_call;
    glGetNamedProgramLocalParameterIuivEXT : (program: GLuint, target: GLenum, index: GLuint, params: *GLuint) #c_call;
    glEnableClientStateiEXT : (array: GLenum, index: GLuint) #c_call;
    glDisableClientStateiEXT : (array: GLenum, index: GLuint) #c_call;
    glGetFloati_vEXT : (pname: GLenum, index: GLuint, params: *GLfloat) #c_call;
    glGetDoublei_vEXT : (pname: GLenum, index: GLuint, params: *GLdouble) #c_call;
    glGetPointeri_vEXT : (pname: GLenum, index: GLuint, params: **void) #c_call;
    glNamedProgramStringEXT : (program: GLuint, target: GLenum, format: GLenum, len: GLsizei, str: *void) #c_call;
    glNamedProgramLocalParameter4dEXT : (program: GLuint, target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #c_call;
    glNamedProgramLocalParameter4dvEXT : (program: GLuint, target: GLenum, index: GLuint, params: *GLdouble) #c_call;
    glNamedProgramLocalParameter4fEXT : (program: GLuint, target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #c_call;
    glNamedProgramLocalParameter4fvEXT : (program: GLuint, target: GLenum, index: GLuint, params: *GLfloat) #c_call;
    glGetNamedProgramLocalParameterdvEXT : (program: GLuint, target: GLenum, index: GLuint, params: *GLdouble) #c_call;
    glGetNamedProgramLocalParameterfvEXT : (program: GLuint, target: GLenum, index: GLuint, params: *GLfloat) #c_call;
    glGetNamedProgramivEXT : (program: GLuint, target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetNamedProgramStringEXT : (program: GLuint, target: GLenum, pname: GLenum, str: *void) #c_call;
    glNamedRenderbufferStorageEXT : (renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) #c_call;
    glGetNamedRenderbufferParameterivEXT : (renderbuffer: GLuint, pname: GLenum, params: *GLint) #c_call;
    glNamedRenderbufferStorageMultisampleEXT : (renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #c_call;
    glNamedRenderbufferStorageMultisampleCoverageEXT : (renderbuffer: GLuint, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #c_call;
    glCheckNamedFramebufferStatusEXT : (framebuffer: GLuint, target: GLenum) -> GLenum #c_call;
    glNamedFramebufferTexture1DEXT : (framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) #c_call;
    glNamedFramebufferTexture2DEXT : (framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) #c_call;
    glNamedFramebufferTexture3DEXT : (framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) #c_call;
    glNamedFramebufferRenderbufferEXT : (framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) #c_call;
    glGetNamedFramebufferAttachmentParameterivEXT : (framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGenerateTextureMipmapEXT : (texture: GLuint, target: GLenum) #c_call;
    glGenerateMultiTexMipmapEXT : (texunit: GLenum, target: GLenum) #c_call;
    glFramebufferDrawBufferEXT : (framebuffer: GLuint, mode: GLenum) #c_call;
    glFramebufferDrawBuffersEXT : (framebuffer: GLuint, n: GLsizei, bufs: *GLenum) #c_call;
    glFramebufferReadBufferEXT : (framebuffer: GLuint, mode: GLenum) #c_call;
    glGetFramebufferParameterivEXT : (framebuffer: GLuint, pname: GLenum, params: *GLint) #c_call;
    glNamedCopyBufferSubDataEXT : (readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) #c_call;
    glNamedFramebufferTextureEXT : (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) #c_call;
    glNamedFramebufferTextureLayerEXT : (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) #c_call;
    glNamedFramebufferTextureFaceEXT : (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) #c_call;
    glTextureRenderbufferEXT : (texture: GLuint, target: GLenum, renderbuffer: GLuint) #c_call;
    glMultiTexRenderbufferEXT : (texunit: GLenum, target: GLenum, renderbuffer: GLuint) #c_call;
    glVertexArrayVertexOffsetEXT : (vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr) #c_call;
    glVertexArrayColorOffsetEXT : (vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr) #c_call;
    glVertexArrayEdgeFlagOffsetEXT : (vaobj: GLuint, buffer: GLuint, stride: GLsizei, offset: GLintptr) #c_call;
    glVertexArrayIndexOffsetEXT : (vaobj: GLuint, buffer: GLuint, type: GLenum, stride: GLsizei, offset: GLintptr) #c_call;
    glVertexArrayNormalOffsetEXT : (vaobj: GLuint, buffer: GLuint, type: GLenum, stride: GLsizei, offset: GLintptr) #c_call;
    glVertexArrayTexCoordOffsetEXT : (vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr) #c_call;
    glVertexArrayMultiTexCoordOffsetEXT : (vaobj: GLuint, buffer: GLuint, texunit: GLenum, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr) #c_call;
    glVertexArrayFogCoordOffsetEXT : (vaobj: GLuint, buffer: GLuint, type: GLenum, stride: GLsizei, offset: GLintptr) #c_call;
    glVertexArraySecondaryColorOffsetEXT : (vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr) #c_call;
    glVertexArrayVertexAttribOffsetEXT : (vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr) #c_call;
    glVertexArrayVertexAttribIOffsetEXT : (vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr) #c_call;
    glEnableVertexArrayEXT : (vaobj: GLuint, array: GLenum) #c_call;
    glDisableVertexArrayEXT : (vaobj: GLuint, array: GLenum) #c_call;
    glEnableVertexArrayAttribEXT : (vaobj: GLuint, index: GLuint) #c_call;
    glDisableVertexArrayAttribEXT : (vaobj: GLuint, index: GLuint) #c_call;
    glGetVertexArrayIntegervEXT : (vaobj: GLuint, pname: GLenum, param: *GLint) #c_call;
    glGetVertexArrayPointervEXT : (vaobj: GLuint, pname: GLenum, param: **void) #c_call;
    glGetVertexArrayIntegeri_vEXT : (vaobj: GLuint, index: GLuint, pname: GLenum, param: *GLint) #c_call;
    glGetVertexArrayPointeri_vEXT : (vaobj: GLuint, index: GLuint, pname: GLenum, param: **void) #c_call;
    glMapNamedBufferRangeEXT : (buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) #c_call;
    glFlushMappedNamedBufferRangeEXT : (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) #c_call;
    glNamedBufferStorageEXT : (buffer: GLuint, size: GLsizeiptr, data: *void, flags: GLbitfield) #c_call;
    glClearNamedBufferDataEXT : (buffer: GLuint, internalformat: GLenum, format: GLenum, type: GLenum, data: *void) #c_call;
    glClearNamedBufferSubDataEXT : (buffer: GLuint, internalformat: GLenum, offset: GLsizeiptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: *void) #c_call;
    glNamedFramebufferParameteriEXT : (framebuffer: GLuint, pname: GLenum, param: GLint) #c_call;
    glGetNamedFramebufferParameterivEXT : (framebuffer: GLuint, pname: GLenum, params: *GLint) #c_call;
    glProgramUniform1dEXT : (program: GLuint, location: GLint, x: GLdouble) #c_call;
    glProgramUniform2dEXT : (program: GLuint, location: GLint, x: GLdouble, y: GLdouble) #c_call;
    glProgramUniform3dEXT : (program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) #c_call;
    glProgramUniform4dEXT : (program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #c_call;
    glProgramUniform1dvEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #c_call;
    glProgramUniform2dvEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #c_call;
    glProgramUniform3dvEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #c_call;
    glProgramUniform4dvEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #c_call;
    glProgramUniformMatrix2dvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    glProgramUniformMatrix3dvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    glProgramUniformMatrix4dvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    glProgramUniformMatrix2x3dvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    glProgramUniformMatrix2x4dvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    glProgramUniformMatrix3x2dvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    glProgramUniformMatrix3x4dvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    glProgramUniformMatrix4x2dvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    glProgramUniformMatrix4x3dvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #c_call;
    glTextureBufferRangeEXT : (texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #c_call;
    glTextureStorage1DEXT : (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) #c_call;
    glTextureStorage2DEXT : (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #c_call;
    glTextureStorage3DEXT : (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) #c_call;
    glTextureStorage2DMultisampleEXT : (texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) #c_call;
    glTextureStorage3DMultisampleEXT : (texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) #c_call;
    glVertexArrayBindVertexBufferEXT : (vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) #c_call;
    glVertexArrayVertexAttribFormatEXT : (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint) #c_call;
    glVertexArrayVertexAttribIFormatEXT : (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) #c_call;
    glVertexArrayVertexAttribLFormatEXT : (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) #c_call;
    glVertexArrayVertexAttribBindingEXT : (vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) #c_call;
    glVertexArrayVertexBindingDivisorEXT : (vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) #c_call;
    glVertexArrayVertexAttribLOffsetEXT : (vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr) #c_call;
    glTexturePageCommitmentEXT : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean) #c_call;
    glVertexArrayVertexAttribDivisorEXT : (vaobj: GLuint, index: GLuint, divisor: GLuint) #c_call;

    // GL_EXT_draw_buffers2
    glColorMaskIndexedEXT : (index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) #c_call;
    // glGetBooleanIndexedvEXT : (target: GLenum, index: GLuint, data: *GLboolean) #c_call;
    // glGetIntegerIndexedvEXT : (target: GLenum, index: GLuint, data: *GLint) #c_call;
    // glEnableIndexedEXT : (target: GLenum, index: GLuint) #c_call;
    // glDisableIndexedEXT : (target: GLenum, index: GLuint) #c_call;
    // glIsEnabledIndexedEXT : (target: GLenum, index: GLuint) -> GLboolean #c_call;

    // GL_EXT_draw_instanced
    glDrawArraysInstancedEXT : (mode: GLenum, start: GLint, count: GLsizei, primcount: GLsizei) #c_call;
    glDrawElementsInstancedEXT : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, primcount: GLsizei) #c_call;

    // GL_EXT_draw_range_elements
    glDrawRangeElementsEXT : (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: *void) #c_call;

    // GL_EXT_external_buffer
    // glBufferStorageExternalEXT : (target: GLenum, offset: GLintptr, size: GLsizeiptr, clientBuffer: GLeglClientBufferEXT, flags: GLbitfield) #c_call;
    // glNamedBufferStorageExternalEXT : (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, clientBuffer: GLeglClientBufferEXT, flags: GLbitfield) #c_call;

    // GL_EXT_fog_coord
    glFogCoordfEXT : (coord: GLfloat) #c_call;
    glFogCoordfvEXT : (coord: *GLfloat) #c_call;
    glFogCoorddEXT : (coord: GLdouble) #c_call;
    glFogCoorddvEXT : (coord: *GLdouble) #c_call;
    glFogCoordPointerEXT : (type: GLenum, stride: GLsizei, pointer: *void) #c_call;

    // GL_EXT_framebuffer_blit
    glBlitFramebufferEXT : (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) #c_call;

    // GL_EXT_framebuffer_multisample
    glRenderbufferStorageMultisampleEXT : (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #c_call;

    // GL_EXT_framebuffer_multisample_blit_scaled

    // GL_EXT_framebuffer_object
    glIsRenderbufferEXT : (renderbuffer: GLuint) -> GLboolean #c_call;
    glBindRenderbufferEXT : (target: GLenum, renderbuffer: GLuint) #c_call;
    glDeleteRenderbuffersEXT : (n: GLsizei, renderbuffers: *GLuint) #c_call;
    glGenRenderbuffersEXT : (n: GLsizei, renderbuffers: *GLuint) #c_call;
    glRenderbufferStorageEXT : (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) #c_call;
    glGetRenderbufferParameterivEXT : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glIsFramebufferEXT : (framebuffer: GLuint) -> GLboolean #c_call;
    glBindFramebufferEXT : (target: GLenum, framebuffer: GLuint) #c_call;
    glDeleteFramebuffersEXT : (n: GLsizei, framebuffers: *GLuint) #c_call;
    glGenFramebuffersEXT : (n: GLsizei, framebuffers: *GLuint) #c_call;
    glCheckFramebufferStatusEXT : (target: GLenum) -> GLenum #c_call;
    glFramebufferTexture1DEXT : (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) #c_call;
    glFramebufferTexture2DEXT : (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) #c_call;
    glFramebufferTexture3DEXT : (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) #c_call;
    glFramebufferRenderbufferEXT : (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) #c_call;
    glGetFramebufferAttachmentParameterivEXT : (target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGenerateMipmapEXT : (target: GLenum) #c_call;

    // GL_EXT_framebuffer_sRGB

    // GL_EXT_geometry_shader4
    glProgramParameteriEXT : (program: GLuint, pname: GLenum, value: GLint) #c_call;

    // GL_EXT_gpu_program_parameters
    glProgramEnvParameters4fvEXT : (target: GLenum, index: GLuint, count: GLsizei, params: *GLfloat) #c_call;
    glProgramLocalParameters4fvEXT : (target: GLenum, index: GLuint, count: GLsizei, params: *GLfloat) #c_call;

    // GL_EXT_gpu_shader4
    glGetUniformuivEXT : (program: GLuint, location: GLint, params: *GLuint) #c_call;
    glBindFragDataLocationEXT : (program: GLuint, color: GLuint, name: *GLchar) #c_call;
    glGetFragDataLocationEXT : (program: GLuint, name: *GLchar) -> GLint #c_call;
    glUniform1uiEXT : (location: GLint, v0: GLuint) #c_call;
    glUniform2uiEXT : (location: GLint, v0: GLuint, v1: GLuint) #c_call;
    glUniform3uiEXT : (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) #c_call;
    glUniform4uiEXT : (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) #c_call;
    glUniform1uivEXT : (location: GLint, count: GLsizei, value: *GLuint) #c_call;
    glUniform2uivEXT : (location: GLint, count: GLsizei, value: *GLuint) #c_call;
    glUniform3uivEXT : (location: GLint, count: GLsizei, value: *GLuint) #c_call;
    glUniform4uivEXT : (location: GLint, count: GLsizei, value: *GLuint) #c_call;

    // GL_EXT_histogram
    glGetHistogramEXT : (target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, values: *void) #c_call;
    glGetHistogramParameterfvEXT : (target: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetHistogramParameterivEXT : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetMinmaxEXT : (target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, values: *void) #c_call;
    glGetMinmaxParameterfvEXT : (target: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetMinmaxParameterivEXT : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glHistogramEXT : (target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) #c_call;
    glMinmaxEXT : (target: GLenum, internalformat: GLenum, sink: GLboolean) #c_call;
    glResetHistogramEXT : (target: GLenum) #c_call;
    glResetMinmaxEXT : (target: GLenum) #c_call;

    // GL_EXT_index_array_formats

    // GL_EXT_index_func
    glIndexFuncEXT : (func: GLenum, ref: GLclampf) #c_call;

    // GL_EXT_index_material
    glIndexMaterialEXT : (face: GLenum, mode: GLenum) #c_call;

    // GL_EXT_index_texture

    // GL_EXT_light_texture
    glApplyTextureEXT : (mode: GLenum) #c_call;
    glTextureLightEXT : (pname: GLenum) #c_call;
    glTextureMaterialEXT : (face: GLenum, mode: GLenum) #c_call;

    // GL_EXT_memory_object
    glGetUnsignedBytevEXT : (pname: GLenum, data: *GLubyte) #c_call;
    glGetUnsignedBytei_vEXT : (target: GLenum, index: GLuint, data: *GLubyte) #c_call;
    glDeleteMemoryObjectsEXT : (n: GLsizei, memoryObjects: *GLuint) #c_call;
    glIsMemoryObjectEXT : (memoryObject: GLuint) -> GLboolean #c_call;
    glCreateMemoryObjectsEXT : (n: GLsizei, memoryObjects: *GLuint) #c_call;
    glMemoryObjectParameterivEXT : (memoryObject: GLuint, pname: GLenum, params: *GLint) #c_call;
    glGetMemoryObjectParameterivEXT : (memoryObject: GLuint, pname: GLenum, params: *GLint) #c_call;
    glTexStorageMem2DEXT : (target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, offset: GLuint64) #c_call;
    glTexStorageMem2DMultisampleEXT : (target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) #c_call;
    glTexStorageMem3DEXT : (target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64) #c_call;
    glTexStorageMem3DMultisampleEXT : (target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) #c_call;
    glBufferStorageMemEXT : (target: GLenum, size: GLsizeiptr, memory: GLuint, offset: GLuint64) #c_call;
    glTextureStorageMem2DEXT : (texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, offset: GLuint64) #c_call;
    glTextureStorageMem2DMultisampleEXT : (texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) #c_call;
    glTextureStorageMem3DEXT : (texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64) #c_call;
    glTextureStorageMem3DMultisampleEXT : (texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) #c_call;
    glNamedBufferStorageMemEXT : (buffer: GLuint, size: GLsizeiptr, memory: GLuint, offset: GLuint64) #c_call;
    glTexStorageMem1DEXT : (target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, memory: GLuint, offset: GLuint64) #c_call;
    glTextureStorageMem1DEXT : (texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, memory: GLuint, offset: GLuint64) #c_call;

    // GL_EXT_memory_object_fd
    glImportMemoryFdEXT : (memory: GLuint, size: GLuint64, handleType: GLenum, fd: GLint) #c_call;

    // GL_EXT_memory_object_win32
    glImportMemoryWin32HandleEXT : (memory: GLuint, size: GLuint64, handleType: GLenum, handle: *void) #c_call;
    glImportMemoryWin32NameEXT : (memory: GLuint, size: GLuint64, handleType: GLenum, name: *void) #c_call;

    // GL_EXT_misc_attribute

    // GL_EXT_multi_draw_arrays
    glMultiDrawArraysEXT : (mode: GLenum, first: *GLint, count: *GLsizei, primcount: GLsizei) #c_call;
    glMultiDrawElementsEXT : (mode: GLenum, count: *GLsizei, type: GLenum, indices: **void, primcount: GLsizei) #c_call;

    // GL_EXT_multisample
    glSampleMaskEXT : (value: GLclampf, invert: GLboolean) #c_call;
    glSamplePatternEXT : (pattern: GLenum) #c_call;

    // GL_EXT_packed_depth_stencil

    // GL_EXT_packed_float

    // GL_EXT_packed_pixels

    // GL_EXT_paletted_texture
    glColorTableEXT : (target: GLenum, internalFormat: GLenum, width: GLsizei, format: GLenum, type: GLenum, table: *void) #c_call;
    glGetColorTableEXT : (target: GLenum, format: GLenum, type: GLenum, data: *void) #c_call;
    glGetColorTableParameterivEXT : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetColorTableParameterfvEXT : (target: GLenum, pname: GLenum, params: *GLfloat) #c_call;

    // GL_EXT_pixel_buffer_object

    // GL_EXT_pixel_transform
    glPixelTransformParameteriEXT : (target: GLenum, pname: GLenum, param: GLint) #c_call;
    glPixelTransformParameterfEXT : (target: GLenum, pname: GLenum, param: GLfloat) #c_call;
    glPixelTransformParameterivEXT : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glPixelTransformParameterfvEXT : (target: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetPixelTransformParameterivEXT : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetPixelTransformParameterfvEXT : (target: GLenum, pname: GLenum, params: *GLfloat) #c_call;

    // GL_EXT_pixel_transform_color_table

    // GL_EXT_point_parameters
    glPointParameterfEXT : (pname: GLenum, param: GLfloat) #c_call;
    glPointParameterfvEXT : (pname: GLenum, params: *GLfloat) #c_call;

    // GL_EXT_polygon_offset
    glPolygonOffsetEXT : (factor: GLfloat, bias: GLfloat) #c_call;

    // GL_EXT_polygon_offset_clamp
    glPolygonOffsetClampEXT : (factor: GLfloat, units: GLfloat, clamp: GLfloat) #c_call;

    // GL_EXT_post_depth_coverage

    // GL_EXT_provoking_vertex
    glProvokingVertexEXT : (mode: GLenum) #c_call;

    // GL_EXT_raster_multisample
    glRasterSamplesEXT : (samples: GLuint, fixedsamplelocations: GLboolean) #c_call;

    // GL_EXT_rescale_normal

    // GL_EXT_secondary_color
    glSecondaryColor3bEXT : (red: GLbyte, green: GLbyte, blue: GLbyte) #c_call;
    glSecondaryColor3bvEXT : (v: *GLbyte) #c_call;
    glSecondaryColor3dEXT : (red: GLdouble, green: GLdouble, blue: GLdouble) #c_call;
    glSecondaryColor3dvEXT : (v: *GLdouble) #c_call;
    glSecondaryColor3fEXT : (red: GLfloat, green: GLfloat, blue: GLfloat) #c_call;
    glSecondaryColor3fvEXT : (v: *GLfloat) #c_call;
    glSecondaryColor3iEXT : (red: GLint, green: GLint, blue: GLint) #c_call;
    glSecondaryColor3ivEXT : (v: *GLint) #c_call;
    glSecondaryColor3sEXT : (red: GLshort, green: GLshort, blue: GLshort) #c_call;
    glSecondaryColor3svEXT : (v: *GLshort) #c_call;
    glSecondaryColor3ubEXT : (red: GLubyte, green: GLubyte, blue: GLubyte) #c_call;
    glSecondaryColor3ubvEXT : (v: *GLubyte) #c_call;
    glSecondaryColor3uiEXT : (red: GLuint, green: GLuint, blue: GLuint) #c_call;
    glSecondaryColor3uivEXT : (v: *GLuint) #c_call;
    glSecondaryColor3usEXT : (red: GLushort, green: GLushort, blue: GLushort) #c_call;
    glSecondaryColor3usvEXT : (v: *GLushort) #c_call;
    glSecondaryColorPointerEXT : (size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #c_call;

    // GL_EXT_semaphore
    // glGetUnsignedBytevEXT : (pname: GLenum, data: *GLubyte) #c_call;
    // glGetUnsignedBytei_vEXT : (target: GLenum, index: GLuint, data: *GLubyte) #c_call;
    glGenSemaphoresEXT : (n: GLsizei, semaphores: *GLuint) #c_call;
    glDeleteSemaphoresEXT : (n: GLsizei, semaphores: *GLuint) #c_call;
    glIsSemaphoreEXT : (semaphore: GLuint) -> GLboolean #c_call;
    glSemaphoreParameterui64vEXT : (semaphore: GLuint, pname: GLenum, params: *GLuint64) #c_call;
    glGetSemaphoreParameterui64vEXT : (semaphore: GLuint, pname: GLenum, params: *GLuint64) #c_call;
    glWaitSemaphoreEXT : (semaphore: GLuint, numBufferBarriers: GLuint, buffers: *GLuint, numTextureBarriers: GLuint, textures: *GLuint, srcLayouts: *GLenum) #c_call;
    glSignalSemaphoreEXT : (semaphore: GLuint, numBufferBarriers: GLuint, buffers: *GLuint, numTextureBarriers: GLuint, textures: *GLuint, dstLayouts: *GLenum) #c_call;

    // GL_EXT_semaphore_fd
    glImportSemaphoreFdEXT : (semaphore: GLuint, handleType: GLenum, fd: GLint) #c_call;

    // GL_EXT_semaphore_win32
    glImportSemaphoreWin32HandleEXT : (semaphore: GLuint, handleType: GLenum, handle: *void) #c_call;
    glImportSemaphoreWin32NameEXT : (semaphore: GLuint, handleType: GLenum, name: *void) #c_call;

    // GL_EXT_separate_shader_objects
    glUseShaderProgramEXT : (type: GLenum, program: GLuint) #c_call;
    glActiveProgramEXT : (program: GLuint) #c_call;
    glCreateShaderProgramEXT : (type: GLenum, str: *GLchar) -> GLuint #c_call;
    glActiveShaderProgramEXT : (pipeline: GLuint, program: GLuint) #c_call;
    glBindProgramPipelineEXT : (pipeline: GLuint) #c_call;
    glCreateShaderProgramvEXT : (type: GLenum, count: GLsizei, strings: **GLchar) -> GLuint #c_call;
    glDeleteProgramPipelinesEXT : (n: GLsizei, pipelines: *GLuint) #c_call;
    glGenProgramPipelinesEXT : (n: GLsizei, pipelines: *GLuint) #c_call;
    glGetProgramPipelineInfoLogEXT : (pipeline: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) #c_call;
    glGetProgramPipelineivEXT : (pipeline: GLuint, pname: GLenum, params: *GLint) #c_call;
    glIsProgramPipelineEXT : (pipeline: GLuint) -> GLboolean #c_call;
    // glProgramParameteriEXT : (program: GLuint, pname: GLenum, value: GLint) #c_call;
    // glProgramUniform1fEXT : (program: GLuint, location: GLint, v0: GLfloat) #c_call;
    // glProgramUniform1fvEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #c_call;
    // glProgramUniform1iEXT : (program: GLuint, location: GLint, v0: GLint) #c_call;
    // glProgramUniform1ivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #c_call;
    // glProgramUniform2fEXT : (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) #c_call;
    // glProgramUniform2fvEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #c_call;
    // glProgramUniform2iEXT : (program: GLuint, location: GLint, v0: GLint, v1: GLint) #c_call;
    // glProgramUniform2ivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #c_call;
    // glProgramUniform3fEXT : (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) #c_call;
    // glProgramUniform3fvEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #c_call;
    // glProgramUniform3iEXT : (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) #c_call;
    // glProgramUniform3ivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #c_call;
    // glProgramUniform4fEXT : (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) #c_call;
    // glProgramUniform4fvEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #c_call;
    // glProgramUniform4iEXT : (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) #c_call;
    // glProgramUniform4ivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #c_call;
    // glProgramUniformMatrix2fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    // glProgramUniformMatrix3fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    // glProgramUniformMatrix4fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    glUseProgramStagesEXT : (pipeline: GLuint, stages: GLbitfield, program: GLuint) #c_call;
    glValidateProgramPipelineEXT : (pipeline: GLuint) #c_call;
    // glProgramUniform1uiEXT : (program: GLuint, location: GLint, v0: GLuint) #c_call;
    // glProgramUniform2uiEXT : (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) #c_call;
    // glProgramUniform3uiEXT : (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) #c_call;
    // glProgramUniform4uiEXT : (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) #c_call;
    // glProgramUniform1uivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #c_call;
    // glProgramUniform2uivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #c_call;
    // glProgramUniform3uivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #c_call;
    // glProgramUniform4uivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #c_call;
    // glProgramUniformMatrix4fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    // glProgramUniformMatrix2x3fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    // glProgramUniformMatrix3x2fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    // glProgramUniformMatrix2x4fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    // glProgramUniformMatrix4x2fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    // glProgramUniformMatrix3x4fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;
    // glProgramUniformMatrix4x3fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #c_call;

    // GL_EXT_separate_specular_color

    // GL_EXT_shader_framebuffer_fetch

    // GL_EXT_shader_framebuffer_fetch_non_coherent
    glFramebufferFetchBarrierEXT : () #c_call;

    // GL_EXT_shader_image_load_formatted

    // GL_EXT_shader_image_load_store
    glBindImageTextureEXT : (index: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLint) #c_call;
    glMemoryBarrierEXT : (barriers: GLbitfield) #c_call;

    // GL_EXT_shader_integer_mix

    // GL_EXT_shadow_funcs

    // GL_EXT_shared_texture_palette

    // GL_EXT_sparse_texture2

    // GL_EXT_stencil_clear_tag
    glStencilClearTagEXT : (stencilTagBits: GLsizei, stencilClearTag: GLuint) #c_call;

    // GL_EXT_stencil_two_side
    glActiveStencilFaceEXT : (face: GLenum) #c_call;

    // GL_EXT_stencil_wrap

    // GL_EXT_subtexture
    glTexSubImage1DEXT : (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glTexSubImage2DEXT : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) #c_call;

    // GL_EXT_texture

    // GL_EXT_texture3D
    glTexImage3DEXT : (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glTexSubImage3DEXT : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: *void) #c_call;

    // GL_EXT_texture_array
    glFramebufferTextureLayerEXT : (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) #c_call;

    // GL_EXT_texture_buffer_object
    glTexBufferEXT : (target: GLenum, internalformat: GLenum, buffer: GLuint) #c_call;

    // GL_EXT_texture_compression_latc

    // GL_EXT_texture_compression_rgtc

    // GL_EXT_texture_compression_s3tc

    // GL_EXT_texture_cube_map

    // GL_EXT_texture_env_add

    // GL_EXT_texture_env_combine

    // GL_EXT_texture_env_dot3

    // GL_EXT_texture_filter_anisotropic

    // GL_EXT_texture_filter_minmax

    // GL_EXT_texture_integer
    glTexParameterIivEXT : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glTexParameterIuivEXT : (target: GLenum, pname: GLenum, params: *GLuint) #c_call;
    glGetTexParameterIivEXT : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetTexParameterIuivEXT : (target: GLenum, pname: GLenum, params: *GLuint) #c_call;
    glClearColorIiEXT : (red: GLint, green: GLint, blue: GLint, alpha: GLint) #c_call;
    glClearColorIuiEXT : (red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) #c_call;

    // GL_EXT_texture_lod_bias

    // GL_EXT_texture_mirror_clamp

    // GL_EXT_texture_object
    glAreTexturesResidentEXT : (n: GLsizei, textures: *GLuint, residences: *GLboolean) -> GLboolean #c_call;
    glBindTextureEXT : (target: GLenum, texture: GLuint) #c_call;
    glDeleteTexturesEXT : (n: GLsizei, textures: *GLuint) #c_call;
    glGenTexturesEXT : (n: GLsizei, textures: *GLuint) #c_call;
    glIsTextureEXT : (texture: GLuint) -> GLboolean #c_call;
    glPrioritizeTexturesEXT : (n: GLsizei, textures: *GLuint, priorities: *GLclampf) #c_call;

    // GL_EXT_texture_perturb_normal
    glTextureNormalEXT : (mode: GLenum) #c_call;

    // GL_EXT_texture_sRGB

    // GL_EXT_texture_sRGB_decode

    // GL_EXT_texture_shared_exponent

    // GL_EXT_texture_snorm

    // GL_EXT_texture_swizzle

    // GL_EXT_timer_query
    glGetQueryObjecti64vEXT : (id: GLuint, pname: GLenum, params: *GLint64) #c_call;
    glGetQueryObjectui64vEXT : (id: GLuint, pname: GLenum, params: *GLuint64) #c_call;

    // GL_EXT_transform_feedback
    glBeginTransformFeedbackEXT : (primitiveMode: GLenum) #c_call;
    glEndTransformFeedbackEXT : () #c_call;
    glBindBufferRangeEXT : (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #c_call;
    glBindBufferOffsetEXT : (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr) #c_call;
    glBindBufferBaseEXT : (target: GLenum, index: GLuint, buffer: GLuint) #c_call;
    glTransformFeedbackVaryingsEXT : (program: GLuint, count: GLsizei, varyings: **GLchar, bufferMode: GLenum) #c_call;
    glGetTransformFeedbackVaryingEXT : (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type: *GLenum, name: *GLchar) #c_call;

    // GL_EXT_vertex_array
    glArrayElementEXT : (i: GLint) #c_call;
    glColorPointerEXT : (size: GLint, type: GLenum, stride: GLsizei, count: GLsizei, pointer: *void) #c_call;
    glDrawArraysEXT : (mode: GLenum, first: GLint, count: GLsizei) #c_call;
    glEdgeFlagPointerEXT : (stride: GLsizei, count: GLsizei, pointer: *GLboolean) #c_call;
    glGetPointervEXT : (pname: GLenum, params: **void) #c_call;
    glIndexPointerEXT : (type: GLenum, stride: GLsizei, count: GLsizei, pointer: *void) #c_call;
    glNormalPointerEXT : (type: GLenum, stride: GLsizei, count: GLsizei, pointer: *void) #c_call;
    glTexCoordPointerEXT : (size: GLint, type: GLenum, stride: GLsizei, count: GLsizei, pointer: *void) #c_call;
    glVertexPointerEXT : (size: GLint, type: GLenum, stride: GLsizei, count: GLsizei, pointer: *void) #c_call;

    // GL_EXT_vertex_array_bgra

    // GL_EXT_vertex_attrib_64bit
    glVertexAttribL1dEXT : (index: GLuint, x: GLdouble) #c_call;
    glVertexAttribL2dEXT : (index: GLuint, x: GLdouble, y: GLdouble) #c_call;
    glVertexAttribL3dEXT : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) #c_call;
    glVertexAttribL4dEXT : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #c_call;
    glVertexAttribL1dvEXT : (index: GLuint, v: *GLdouble) #c_call;
    glVertexAttribL2dvEXT : (index: GLuint, v: *GLdouble) #c_call;
    glVertexAttribL3dvEXT : (index: GLuint, v: *GLdouble) #c_call;
    glVertexAttribL4dvEXT : (index: GLuint, v: *GLdouble) #c_call;
    glVertexAttribLPointerEXT : (index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #c_call;
    glGetVertexAttribLdvEXT : (index: GLuint, pname: GLenum, params: *GLdouble) #c_call;

    // GL_EXT_vertex_shader
    glBeginVertexShaderEXT : () #c_call;
    glEndVertexShaderEXT : () #c_call;
    glBindVertexShaderEXT : (id: GLuint) #c_call;
    glGenVertexShadersEXT : (range: GLuint) -> GLuint #c_call;
    glDeleteVertexShaderEXT : (id: GLuint) #c_call;
    glShaderOp1EXT : (op: GLenum, res: GLuint, arg1: GLuint) #c_call;
    glShaderOp2EXT : (op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint) #c_call;
    glShaderOp3EXT : (op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint, arg3: GLuint) #c_call;
    glSwizzleEXT : (res: GLuint, in: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) #c_call;
    glWriteMaskEXT : (res: GLuint, in: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) #c_call;
    glInsertComponentEXT : (res: GLuint, src: GLuint, num: GLuint) #c_call;
    glExtractComponentEXT : (res: GLuint, src: GLuint, num: GLuint) #c_call;
    glGenSymbolsEXT : (datatype: GLenum, storagetype: GLenum, range: GLenum, components: GLuint) -> GLuint #c_call;
    glSetInvariantEXT : (id: GLuint, type: GLenum, addr: *void) #c_call;
    glSetLocalConstantEXT : (id: GLuint, type: GLenum, addr: *void) #c_call;
    glVariantbvEXT : (id: GLuint, addr: *GLbyte) #c_call;
    glVariantsvEXT : (id: GLuint, addr: *GLshort) #c_call;
    glVariantivEXT : (id: GLuint, addr: *GLint) #c_call;
    glVariantfvEXT : (id: GLuint, addr: *GLfloat) #c_call;
    glVariantdvEXT : (id: GLuint, addr: *GLdouble) #c_call;
    glVariantubvEXT : (id: GLuint, addr: *GLubyte) #c_call;
    glVariantusvEXT : (id: GLuint, addr: *GLushort) #c_call;
    glVariantuivEXT : (id: GLuint, addr: *GLuint) #c_call;
    glVariantPointerEXT : (id: GLuint, type: GLenum, stride: GLuint, addr: *void) #c_call;
    glEnableVariantClientStateEXT : (id: GLuint) #c_call;
    glDisableVariantClientStateEXT : (id: GLuint) #c_call;
    glBindLightParameterEXT : (light: GLenum, value: GLenum) -> GLuint #c_call;
    glBindMaterialParameterEXT : (face: GLenum, value: GLenum) -> GLuint #c_call;
    glBindTexGenParameterEXT : (unit: GLenum, coord: GLenum, value: GLenum) -> GLuint #c_call;
    glBindTextureUnitParameterEXT : (unit: GLenum, value: GLenum) -> GLuint #c_call;
    glBindParameterEXT : (value: GLenum) -> GLuint #c_call;
    glIsVariantEnabledEXT : (id: GLuint, cap: GLenum) -> GLboolean #c_call;
    glGetVariantBooleanvEXT : (id: GLuint, value: GLenum, data: *GLboolean) #c_call;
    glGetVariantIntegervEXT : (id: GLuint, value: GLenum, data: *GLint) #c_call;
    glGetVariantFloatvEXT : (id: GLuint, value: GLenum, data: *GLfloat) #c_call;
    glGetVariantPointervEXT : (id: GLuint, value: GLenum, data: **void) #c_call;
    glGetInvariantBooleanvEXT : (id: GLuint, value: GLenum, data: *GLboolean) #c_call;
    glGetInvariantIntegervEXT : (id: GLuint, value: GLenum, data: *GLint) #c_call;
    glGetInvariantFloatvEXT : (id: GLuint, value: GLenum, data: *GLfloat) #c_call;
    glGetLocalConstantBooleanvEXT : (id: GLuint, value: GLenum, data: *GLboolean) #c_call;
    glGetLocalConstantIntegervEXT : (id: GLuint, value: GLenum, data: *GLint) #c_call;
    glGetLocalConstantFloatvEXT : (id: GLuint, value: GLenum, data: *GLfloat) #c_call;

    // GL_EXT_vertex_weighting
    glVertexWeightfEXT : (weight: GLfloat) #c_call;
    glVertexWeightfvEXT : (weight: *GLfloat) #c_call;
    glVertexWeightPointerEXT : (size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #c_call;

    // GL_EXT_win32_keyed_mutex
    glAcquireKeyedMutexWin32EXT : (memory: GLuint, key: GLuint64, timeout: GLuint) -> GLboolean #c_call;
    glReleaseKeyedMutexWin32EXT : (memory: GLuint, key: GLuint64) -> GLboolean #c_call;

    // GL_EXT_window_rectangles
    glWindowRectanglesEXT : (mode: GLenum, count: GLsizei, box: *GLint) #c_call;

    // GL_EXT_x11_sync_object
    glImportSyncEXT : (external_sync_type: GLenum, external_sync: GLintptr, flags: GLbitfield) -> GLsync #c_call;

    // GL_GREMEDY_frame_terminator
    glFrameTerminatorGREMEDY : () #c_call;

    // GL_GREMEDY_string_marker
    glStringMarkerGREMEDY : (len: GLsizei, str: *void) #c_call;

    // GL_HP_convolution_border_modes

    // GL_HP_image_transform
    glImageTransformParameteriHP : (target: GLenum, pname: GLenum, param: GLint) #c_call;
    glImageTransformParameterfHP : (target: GLenum, pname: GLenum, param: GLfloat) #c_call;
    glImageTransformParameterivHP : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glImageTransformParameterfvHP : (target: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetImageTransformParameterivHP : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetImageTransformParameterfvHP : (target: GLenum, pname: GLenum, params: *GLfloat) #c_call;

    // GL_HP_occlusion_test

    // GL_HP_texture_lighting

    // GL_IBM_cull_vertex

    // GL_IBM_multimode_draw_arrays
    glMultiModeDrawArraysIBM : (mode: *GLenum, first: *GLint, count: *GLsizei, primcount: GLsizei, modestride: GLint) #c_call;
    glMultiModeDrawElementsIBM : (mode: *GLenum, count: *GLsizei, type: GLenum, indices: **void, primcount: GLsizei, modestride: GLint) #c_call;

    // GL_IBM_rasterpos_clip

    // GL_IBM_static_data
    glFlushStaticDataIBM : (target: GLenum) #c_call;

    // GL_IBM_texture_mirrored_repeat

    // GL_IBM_vertex_array_lists
    glColorPointerListIBM : (size: GLint, type: GLenum, stride: GLint, pointer: **void, ptrstride: GLint) #c_call;
    glSecondaryColorPointerListIBM : (size: GLint, type: GLenum, stride: GLint, pointer: **void, ptrstride: GLint) #c_call;
    glEdgeFlagPointerListIBM : (stride: GLint, pointer: **GLboolean, ptrstride: GLint) #c_call;
    glFogCoordPointerListIBM : (type: GLenum, stride: GLint, pointer: **void, ptrstride: GLint) #c_call;
    glIndexPointerListIBM : (type: GLenum, stride: GLint, pointer: **void, ptrstride: GLint) #c_call;
    glNormalPointerListIBM : (type: GLenum, stride: GLint, pointer: **void, ptrstride: GLint) #c_call;
    glTexCoordPointerListIBM : (size: GLint, type: GLenum, stride: GLint, pointer: **void, ptrstride: GLint) #c_call;
    glVertexPointerListIBM : (size: GLint, type: GLenum, stride: GLint, pointer: **void, ptrstride: GLint) #c_call;

    // GL_INGR_blend_func_separate
    glBlendFuncSeparateINGR : (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) #c_call;

    // GL_INGR_color_clamp

    // GL_INGR_interlace_read

    // GL_INTEL_conservative_rasterization

    // GL_INTEL_fragment_shader_ordering

    // GL_INTEL_framebuffer_CMAA
    glApplyFramebufferAttachmentCMAAINTEL : () #c_call;

    // GL_INTEL_map_texture
    glSyncTextureINTEL : (texture: GLuint) #c_call;
    glUnmapTexture2DINTEL : (texture: GLuint, level: GLint) #c_call;
    glMapTexture2DINTEL : (texture: GLuint, level: GLint, access: GLbitfield, stride: *GLint, layout: *GLenum) #c_call;

    // GL_INTEL_parallel_arrays
    glVertexPointervINTEL : (size: GLint, type: GLenum, pointer: **void) #c_call;
    glNormalPointervINTEL : (type: GLenum, pointer: **void) #c_call;
    glColorPointervINTEL : (size: GLint, type: GLenum, pointer: **void) #c_call;
    glTexCoordPointervINTEL : (size: GLint, type: GLenum, pointer: **void) #c_call;

    // GL_INTEL_performance_query
    glBeginPerfQueryINTEL : (queryHandle: GLuint) #c_call;
    glCreatePerfQueryINTEL : (queryId: GLuint, queryHandle: *GLuint) #c_call;
    glDeletePerfQueryINTEL : (queryHandle: GLuint) #c_call;
    glEndPerfQueryINTEL : (queryHandle: GLuint) #c_call;
    glGetFirstPerfQueryIdINTEL : (queryId: *GLuint) #c_call;
    glGetNextPerfQueryIdINTEL : (queryId: GLuint, nextQueryId: *GLuint) #c_call;
    glGetPerfCounterInfoINTEL : (queryId: GLuint, counterId: GLuint, counterNameLength: GLuint, counterName: *GLchar, counterDescLength: GLuint, counterDesc: *GLchar, counterOffset: *GLuint, counterDataSize: *GLuint, counterTypeEnum: *GLuint, counterDataTypeEnum: *GLuint, rawCounterMaxValue: *GLuint64) #c_call;
    glGetPerfQueryDataINTEL : (queryHandle: GLuint, flags: GLuint, dataSize: GLsizei, data: *void, bytesWritten: *GLuint) #c_call;
    glGetPerfQueryIdByNameINTEL : (queryName: *GLchar, queryId: *GLuint) #c_call;
    glGetPerfQueryInfoINTEL : (queryId: GLuint, queryNameLength: GLuint, queryName: *GLchar, dataSize: *GLuint, noCounters: *GLuint, noInstances: *GLuint, capsMask: *GLuint) #c_call;

    // GL_KHR_blend_equation_advanced
    glBlendBarrierKHR : () #c_call;

    // GL_KHR_blend_equation_advanced_coherent

    // GL_KHR_context_flush_control

    // GL_KHR_debug
    // glDebugMessageControl : (source: GLenum, type: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) #c_call;
    // glDebugMessageInsert : (source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) #c_call;
    // glDebugMessageCallback : (callback: GLDEBUGPROC, userParam: *void) #c_call;
    // glGetDebugMessageLog : (count: GLuint, bufSize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint #c_call;
    // glPushDebugGroup : (source: GLenum, id: GLuint, length: GLsizei, message: *GLchar) #c_call;
    // glPopDebugGroup : () #c_call;
    // glObjectLabel : (identifier: GLenum, name: GLuint, length: GLsizei, label: *GLchar) #c_call;
    // glGetObjectLabel : (identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) #c_call;
    // glObjectPtrLabel : (ptr: *void, length: GLsizei, label: *GLchar) #c_call;
    // glGetObjectPtrLabel : (ptr: *void, bufSize: GLsizei, length: *GLsizei, label: *GLchar) #c_call;
    // glGetPointerv : (pname: GLenum, params: **void) #c_call;
    glDebugMessageControlKHR : (source: GLenum, type: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) #c_call;
    glDebugMessageInsertKHR : (source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) #c_call;
    glDebugMessageCallbackKHR : (callback: GLDEBUGPROCKHR, userParam: *void) #c_call;
    glGetDebugMessageLogKHR : (count: GLuint, bufSize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint #c_call;
    glPushDebugGroupKHR : (source: GLenum, id: GLuint, length: GLsizei, message: *GLchar) #c_call;
    glPopDebugGroupKHR : () #c_call;
    glObjectLabelKHR : (identifier: GLenum, name: GLuint, length: GLsizei, label: *GLchar) #c_call;
    glGetObjectLabelKHR : (identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) #c_call;
    glObjectPtrLabelKHR : (ptr: *void, length: GLsizei, label: *GLchar) #c_call;
    glGetObjectPtrLabelKHR : (ptr: *void, bufSize: GLsizei, length: *GLsizei, label: *GLchar) #c_call;
    glGetPointervKHR : (pname: GLenum, params: **void) #c_call;

    // GL_KHR_no_error

    // GL_KHR_parallel_shader_compile
    glMaxShaderCompilerThreadsKHR : (count: GLuint) #c_call;

    // GL_KHR_robust_buffer_access_behavior

    // GL_KHR_robustness
    // glGetGraphicsResetStatus : () -> GLenum #c_call;
    // glReadnPixels : (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, data: *void) #c_call;
    // glGetnUniformfv : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) #c_call;
    // glGetnUniformiv : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) #c_call;
    // glGetnUniformuiv : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLuint) #c_call;
    glGetGraphicsResetStatusKHR : () -> GLenum #c_call;
    glReadnPixelsKHR : (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, data: *void) #c_call;
    glGetnUniformfvKHR : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) #c_call;
    glGetnUniformivKHR : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) #c_call;
    glGetnUniformuivKHR : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLuint) #c_call;

    // GL_KHR_texture_compression_astc_hdr

    // GL_KHR_texture_compression_astc_ldr

    // GL_KHR_texture_compression_astc_sliced_3d

    // GL_MESAX_texture_stack

    // GL_MESA_pack_invert

    // GL_MESA_program_binary_formats

    // GL_MESA_resize_buffers
    glResizeBuffersMESA : () #c_call;

    // GL_MESA_shader_integer_functions

    // GL_MESA_tile_raster_order

    // GL_MESA_window_pos
    glWindowPos2dMESA : (x: GLdouble, y: GLdouble) #c_call;
    glWindowPos2dvMESA : (v: *GLdouble) #c_call;
    glWindowPos2fMESA : (x: GLfloat, y: GLfloat) #c_call;
    glWindowPos2fvMESA : (v: *GLfloat) #c_call;
    glWindowPos2iMESA : (x: GLint, y: GLint) #c_call;
    glWindowPos2ivMESA : (v: *GLint) #c_call;
    glWindowPos2sMESA : (x: GLshort, y: GLshort) #c_call;
    glWindowPos2svMESA : (v: *GLshort) #c_call;
    glWindowPos3dMESA : (x: GLdouble, y: GLdouble, z: GLdouble) #c_call;
    glWindowPos3dvMESA : (v: *GLdouble) #c_call;
    glWindowPos3fMESA : (x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glWindowPos3fvMESA : (v: *GLfloat) #c_call;
    glWindowPos3iMESA : (x: GLint, y: GLint, z: GLint) #c_call;
    glWindowPos3ivMESA : (v: *GLint) #c_call;
    glWindowPos3sMESA : (x: GLshort, y: GLshort, z: GLshort) #c_call;
    glWindowPos3svMESA : (v: *GLshort) #c_call;
    glWindowPos4dMESA : (x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #c_call;
    glWindowPos4dvMESA : (v: *GLdouble) #c_call;
    glWindowPos4fMESA : (x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #c_call;
    glWindowPos4fvMESA : (v: *GLfloat) #c_call;
    glWindowPos4iMESA : (x: GLint, y: GLint, z: GLint, w: GLint) #c_call;
    glWindowPos4ivMESA : (v: *GLint) #c_call;
    glWindowPos4sMESA : (x: GLshort, y: GLshort, z: GLshort, w: GLshort) #c_call;
    glWindowPos4svMESA : (v: *GLshort) #c_call;

    // GL_MESA_ycbcr_texture

    // GL_NVX_blend_equation_advanced_multi_draw_buffers

    // GL_NVX_conditional_render
    glBeginConditionalRenderNVX : (id: GLuint) #c_call;
    glEndConditionalRenderNVX : () #c_call;

    // GL_NVX_gpu_memory_info

    // GL_NVX_linked_gpu_multicast
    glLGPUNamedBufferSubDataNVX : (gpuMask: GLbitfield, buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *void) #c_call;
    glLGPUCopyImageSubDataNVX : (sourceGpu: GLuint, destinationGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srxY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) #c_call;
    glLGPUInterlockNVX : () #c_call;

    // GL_NV_alpha_to_coverage_dither_control
    glAlphaToCoverageDitherControlNV : (mode: GLenum) #c_call;

    // GL_NV_bindless_multi_draw_indirect
    glMultiDrawArraysIndirectBindlessNV : (mode: GLenum, indirect: *void, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) #c_call;
    glMultiDrawElementsIndirectBindlessNV : (mode: GLenum, type: GLenum, indirect: *void, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) #c_call;

    // GL_NV_bindless_multi_draw_indirect_count
    glMultiDrawArraysIndirectBindlessCountNV : (mode: GLenum, indirect: *void, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) #c_call;
    glMultiDrawElementsIndirectBindlessCountNV : (mode: GLenum, type: GLenum, indirect: *void, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) #c_call;

    // GL_NV_bindless_texture
    glGetTextureHandleNV : (texture: GLuint) -> GLuint64 #c_call;
    glGetTextureSamplerHandleNV : (texture: GLuint, sampler: GLuint) -> GLuint64 #c_call;
    glMakeTextureHandleResidentNV : (handle: GLuint64) #c_call;
    glMakeTextureHandleNonResidentNV : (handle: GLuint64) #c_call;
    glGetImageHandleNV : (texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum) -> GLuint64 #c_call;
    glMakeImageHandleResidentNV : (handle: GLuint64, access: GLenum) #c_call;
    glMakeImageHandleNonResidentNV : (handle: GLuint64) #c_call;
    glUniformHandleui64NV : (location: GLint, value: GLuint64) #c_call;
    glUniformHandleui64vNV : (location: GLint, count: GLsizei, value: *GLuint64) #c_call;
    glProgramUniformHandleui64NV : (program: GLuint, location: GLint, value: GLuint64) #c_call;
    glProgramUniformHandleui64vNV : (program: GLuint, location: GLint, count: GLsizei, values: *GLuint64) #c_call;
    glIsTextureHandleResidentNV : (handle: GLuint64) -> GLboolean #c_call;
    glIsImageHandleResidentNV : (handle: GLuint64) -> GLboolean #c_call;

    // GL_NV_blend_equation_advanced
    glBlendParameteriNV : (pname: GLenum, value: GLint) #c_call;
    glBlendBarrierNV : () #c_call;

    // GL_NV_blend_equation_advanced_coherent

    // GL_NV_blend_minmax_factor

    // GL_NV_blend_square

    // GL_NV_clip_space_w_scaling
    glViewportPositionWScaleNV : (index: GLuint, xcoeff: GLfloat, ycoeff: GLfloat) #c_call;

    // GL_NV_command_list
    glCreateStatesNV : (n: GLsizei, states: *GLuint) #c_call;
    glDeleteStatesNV : (n: GLsizei, states: *GLuint) #c_call;
    glIsStateNV : (state: GLuint) -> GLboolean #c_call;
    glStateCaptureNV : (state: GLuint, mode: GLenum) #c_call;
    glGetCommandHeaderNV : (tokenID: GLenum, size: GLuint) -> GLuint #c_call;
    glGetStageIndexNV : (shadertype: GLenum) -> GLushort #c_call;
    glDrawCommandsNV : (primitiveMode: GLenum, buffer: GLuint, indirects: *GLintptr, sizes: *GLsizei, count: GLuint) #c_call;
    glDrawCommandsAddressNV : (primitiveMode: GLenum, indirects: *GLuint64, sizes: *GLsizei, count: GLuint) #c_call;
    glDrawCommandsStatesNV : (buffer: GLuint, indirects: *GLintptr, sizes: *GLsizei, states: *GLuint, fbos: *GLuint, count: GLuint) #c_call;
    glDrawCommandsStatesAddressNV : (indirects: *GLuint64, sizes: *GLsizei, states: *GLuint, fbos: *GLuint, count: GLuint) #c_call;
    glCreateCommandListsNV : (n: GLsizei, lists: *GLuint) #c_call;
    glDeleteCommandListsNV : (n: GLsizei, lists: *GLuint) #c_call;
    glIsCommandListNV : (list: GLuint) -> GLboolean #c_call;
    glListDrawCommandsStatesClientNV : (list: GLuint, segment: GLuint, indirects: **void, sizes: *GLsizei, states: *GLuint, fbos: *GLuint, count: GLuint) #c_call;
    glCommandListSegmentsNV : (list: GLuint, segments: GLuint) #c_call;
    glCompileCommandListNV : (list: GLuint) #c_call;
    glCallCommandListNV : (list: GLuint) #c_call;

    // GL_NV_compute_program5

    // GL_NV_conditional_render
    glBeginConditionalRenderNV : (id: GLuint, mode: GLenum) #c_call;
    glEndConditionalRenderNV : () #c_call;

    // GL_NV_conservative_raster
    glSubpixelPrecisionBiasNV : (xbits: GLuint, ybits: GLuint) #c_call;

    // GL_NV_conservative_raster_dilate
    glConservativeRasterParameterfNV : (pname: GLenum, value: GLfloat) #c_call;

    // GL_NV_conservative_raster_pre_snap

    // GL_NV_conservative_raster_pre_snap_triangles
    glConservativeRasterParameteriNV : (pname: GLenum, param: GLint) #c_call;

    // GL_NV_conservative_raster_underestimation

    // GL_NV_copy_depth_to_color

    // GL_NV_copy_image
    glCopyImageSubDataNV : (srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) #c_call;

    // GL_NV_deep_texture3D

    // GL_NV_depth_buffer_float
    glDepthRangedNV : (zNear: GLdouble, zFar: GLdouble) #c_call;
    glClearDepthdNV : (depth: GLdouble) #c_call;
    glDepthBoundsdNV : (zmin: GLdouble, zmax: GLdouble) #c_call;

    // GL_NV_depth_clamp

    // GL_NV_draw_texture
    glDrawTextureNV : (texture: GLuint, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat) #c_call;

    // GL_NV_draw_vulkan_image
    glDrawVkImageNV : (vkImage: GLuint64, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat) #c_call;
    // glGetVkProcAddrNV : (name: *GLchar) -> GLVULKANPROCNV #c_call;
    glWaitVkSemaphoreNV : (vkSemaphore: GLuint64) #c_call;
    glSignalVkSemaphoreNV : (vkSemaphore: GLuint64) #c_call;
    glSignalVkFenceNV : (vkFence: GLuint64) #c_call;

    // GL_NV_evaluators
    glMapControlPointsNV : (target: GLenum, index: GLuint, type: GLenum, ustride: GLsizei, vstride: GLsizei, uorder: GLint, vorder: GLint, packed: GLboolean, points: *void) #c_call;
    glMapParameterivNV : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glMapParameterfvNV : (target: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetMapControlPointsNV : (target: GLenum, index: GLuint, type: GLenum, ustride: GLsizei, vstride: GLsizei, packed: GLboolean, points: *void) #c_call;
    glGetMapParameterivNV : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetMapParameterfvNV : (target: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetMapAttribParameterivNV : (target: GLenum, index: GLuint, pname: GLenum, params: *GLint) #c_call;
    glGetMapAttribParameterfvNV : (target: GLenum, index: GLuint, pname: GLenum, params: *GLfloat) #c_call;
    glEvalMapsNV : (target: GLenum, mode: GLenum) #c_call;

    // GL_NV_explicit_multisample
    glGetMultisamplefvNV : (pname: GLenum, index: GLuint, val: *GLfloat) #c_call;
    glSampleMaskIndexedNV : (index: GLuint, mask: GLbitfield) #c_call;
    glTexRenderbufferNV : (target: GLenum, renderbuffer: GLuint) #c_call;

    // GL_NV_fence
    glDeleteFencesNV : (n: GLsizei, fences: *GLuint) #c_call;
    glGenFencesNV : (n: GLsizei, fences: *GLuint) #c_call;
    glIsFenceNV : (fence: GLuint) -> GLboolean #c_call;
    glTestFenceNV : (fence: GLuint) -> GLboolean #c_call;
    glGetFenceivNV : (fence: GLuint, pname: GLenum, params: *GLint) #c_call;
    glFinishFenceNV : (fence: GLuint) #c_call;
    glSetFenceNV : (fence: GLuint, condition: GLenum) #c_call;

    // GL_NV_fill_rectangle

    // GL_NV_float_buffer

    // GL_NV_fog_distance

    // GL_NV_fragment_coverage_to_color
    glFragmentCoverageColorNV : (color: GLuint) #c_call;

    // GL_NV_fragment_program
    glProgramNamedParameter4fNV : (id: GLuint, len: GLsizei, name: *GLubyte, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #c_call;
    glProgramNamedParameter4fvNV : (id: GLuint, len: GLsizei, name: *GLubyte, v: *GLfloat) #c_call;
    glProgramNamedParameter4dNV : (id: GLuint, len: GLsizei, name: *GLubyte, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #c_call;
    glProgramNamedParameter4dvNV : (id: GLuint, len: GLsizei, name: *GLubyte, v: *GLdouble) #c_call;
    glGetProgramNamedParameterfvNV : (id: GLuint, len: GLsizei, name: *GLubyte, params: *GLfloat) #c_call;
    glGetProgramNamedParameterdvNV : (id: GLuint, len: GLsizei, name: *GLubyte, params: *GLdouble) #c_call;

    // GL_NV_fragment_program2

    // GL_NV_fragment_program4

    // GL_NV_fragment_program_option

    // GL_NV_fragment_shader_interlock

    // GL_NV_framebuffer_mixed_samples
    // glRasterSamplesEXT : (samples: GLuint, fixedsamplelocations: GLboolean) #c_call;
    glCoverageModulationTableNV : (n: GLsizei, v: *GLfloat) #c_call;
    glGetCoverageModulationTableNV : (bufsize: GLsizei, v: *GLfloat) #c_call;
    glCoverageModulationNV : (components: GLenum) #c_call;

    // GL_NV_framebuffer_multisample_coverage
    glRenderbufferStorageMultisampleCoverageNV : (target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #c_call;

    // GL_NV_geometry_program4
    glProgramVertexLimitNV : (target: GLenum, limit: GLint) #c_call;
    glFramebufferTextureEXT : (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) #c_call;
    // glFramebufferTextureLayerEXT : (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) #c_call;
    glFramebufferTextureFaceEXT : (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) #c_call;

    // GL_NV_geometry_shader4

    // GL_NV_geometry_shader_passthrough

    // GL_NV_gpu_multicast
    glRenderGpuMaskNV : (mask: GLbitfield) #c_call;
    glMulticastBufferSubDataNV : (gpuMask: GLbitfield, buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *void) #c_call;
    glMulticastCopyBufferSubDataNV : (readGpu: GLuint, writeGpuMask: GLbitfield, readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) #c_call;
    glMulticastCopyImageSubDataNV : (srcGpu: GLuint, dstGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) #c_call;
    glMulticastBlitFramebufferNV : (srcGpu: GLuint, dstGpu: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) #c_call;
    glMulticastFramebufferSampleLocationsfvNV : (gpu: GLuint, framebuffer: GLuint, start: GLuint, count: GLsizei, v: *GLfloat) #c_call;
    glMulticastBarrierNV : () #c_call;
    glMulticastWaitSyncNV : (signalGpu: GLuint, waitGpuMask: GLbitfield) #c_call;
    glMulticastGetQueryObjectivNV : (gpu: GLuint, id: GLuint, pname: GLenum, params: *GLint) #c_call;
    glMulticastGetQueryObjectuivNV : (gpu: GLuint, id: GLuint, pname: GLenum, params: *GLuint) #c_call;
    glMulticastGetQueryObjecti64vNV : (gpu: GLuint, id: GLuint, pname: GLenum, params: *GLint64) #c_call;
    glMulticastGetQueryObjectui64vNV : (gpu: GLuint, id: GLuint, pname: GLenum, params: *GLuint64) #c_call;

    // GL_NV_gpu_program4
    glProgramLocalParameterI4iNV : (target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) #c_call;
    glProgramLocalParameterI4ivNV : (target: GLenum, index: GLuint, params: *GLint) #c_call;
    glProgramLocalParametersI4ivNV : (target: GLenum, index: GLuint, count: GLsizei, params: *GLint) #c_call;
    glProgramLocalParameterI4uiNV : (target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) #c_call;
    glProgramLocalParameterI4uivNV : (target: GLenum, index: GLuint, params: *GLuint) #c_call;
    glProgramLocalParametersI4uivNV : (target: GLenum, index: GLuint, count: GLsizei, params: *GLuint) #c_call;
    glProgramEnvParameterI4iNV : (target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) #c_call;
    glProgramEnvParameterI4ivNV : (target: GLenum, index: GLuint, params: *GLint) #c_call;
    glProgramEnvParametersI4ivNV : (target: GLenum, index: GLuint, count: GLsizei, params: *GLint) #c_call;
    glProgramEnvParameterI4uiNV : (target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) #c_call;
    glProgramEnvParameterI4uivNV : (target: GLenum, index: GLuint, params: *GLuint) #c_call;
    glProgramEnvParametersI4uivNV : (target: GLenum, index: GLuint, count: GLsizei, params: *GLuint) #c_call;
    glGetProgramLocalParameterIivNV : (target: GLenum, index: GLuint, params: *GLint) #c_call;
    glGetProgramLocalParameterIuivNV : (target: GLenum, index: GLuint, params: *GLuint) #c_call;
    glGetProgramEnvParameterIivNV : (target: GLenum, index: GLuint, params: *GLint) #c_call;
    glGetProgramEnvParameterIuivNV : (target: GLenum, index: GLuint, params: *GLuint) #c_call;

    // GL_NV_gpu_program5
    glProgramSubroutineParametersuivNV : (target: GLenum, count: GLsizei, params: *GLuint) #c_call;
    glGetProgramSubroutineParameteruivNV : (target: GLenum, index: GLuint, param: *GLuint) #c_call;

    // GL_NV_gpu_program5_mem_extended

    // GL_NV_gpu_shader5
    // glUniform1i64NV : (location: GLint, x: GLint64EXT) #c_call;
    // glUniform2i64NV : (location: GLint, x: GLint64EXT, y: GLint64EXT) #c_call;
    // glUniform3i64NV : (location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) #c_call;
    // glUniform4i64NV : (location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) #c_call;
    // glUniform1i64vNV : (location: GLint, count: GLsizei, value: *GLint64EXT) #c_call;
    // glUniform2i64vNV : (location: GLint, count: GLsizei, value: *GLint64EXT) #c_call;
    // glUniform3i64vNV : (location: GLint, count: GLsizei, value: *GLint64EXT) #c_call;
    // glUniform4i64vNV : (location: GLint, count: GLsizei, value: *GLint64EXT) #c_call;
    // glUniform1ui64NV : (location: GLint, x: GLuint64EXT) #c_call;
    // glUniform2ui64NV : (location: GLint, x: GLuint64EXT, y: GLuint64EXT) #c_call;
    // glUniform3ui64NV : (location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) #c_call;
    // glUniform4ui64NV : (location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) #c_call;
    // glUniform1ui64vNV : (location: GLint, count: GLsizei, value: *GLuint64EXT) #c_call;
    // glUniform2ui64vNV : (location: GLint, count: GLsizei, value: *GLuint64EXT) #c_call;
    // glUniform3ui64vNV : (location: GLint, count: GLsizei, value: *GLuint64EXT) #c_call;
    // glUniform4ui64vNV : (location: GLint, count: GLsizei, value: *GLuint64EXT) #c_call;
    // glGetUniformi64vNV : (program: GLuint, location: GLint, params: *GLint64EXT) #c_call;
    // glProgramUniform1i64NV : (program: GLuint, location: GLint, x: GLint64EXT) #c_call;
    // glProgramUniform2i64NV : (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT) #c_call;
    // glProgramUniform3i64NV : (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) #c_call;
    // glProgramUniform4i64NV : (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) #c_call;
    // glProgramUniform1i64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) #c_call;
    // glProgramUniform2i64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) #c_call;
    // glProgramUniform3i64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) #c_call;
    // glProgramUniform4i64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) #c_call;
    // glProgramUniform1ui64NV : (program: GLuint, location: GLint, x: GLuint64EXT) #c_call;
    // glProgramUniform2ui64NV : (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT) #c_call;
    // glProgramUniform3ui64NV : (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) #c_call;
    // glProgramUniform4ui64NV : (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) #c_call;
    // glProgramUniform1ui64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) #c_call;
    // glProgramUniform2ui64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) #c_call;
    // glProgramUniform3ui64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) #c_call;
    // glProgramUniform4ui64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) #c_call;

    // GL_NV_half_float
    glVertex2hNV : (x: GLhalfNV, y: GLhalfNV) #c_call;
    glVertex2hvNV : (v: *GLhalfNV) #c_call;
    glVertex3hNV : (x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) #c_call;
    glVertex3hvNV : (v: *GLhalfNV) #c_call;
    glVertex4hNV : (x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) #c_call;
    glVertex4hvNV : (v: *GLhalfNV) #c_call;
    glNormal3hNV : (nx: GLhalfNV, ny: GLhalfNV, nz: GLhalfNV) #c_call;
    glNormal3hvNV : (v: *GLhalfNV) #c_call;
    glColor3hNV : (red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) #c_call;
    glColor3hvNV : (v: *GLhalfNV) #c_call;
    glColor4hNV : (red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV, alpha: GLhalfNV) #c_call;
    glColor4hvNV : (v: *GLhalfNV) #c_call;
    glTexCoord1hNV : (s: GLhalfNV) #c_call;
    glTexCoord1hvNV : (v: *GLhalfNV) #c_call;
    glTexCoord2hNV : (s: GLhalfNV, t: GLhalfNV) #c_call;
    glTexCoord2hvNV : (v: *GLhalfNV) #c_call;
    glTexCoord3hNV : (s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) #c_call;
    glTexCoord3hvNV : (v: *GLhalfNV) #c_call;
    glTexCoord4hNV : (s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) #c_call;
    glTexCoord4hvNV : (v: *GLhalfNV) #c_call;
    glMultiTexCoord1hNV : (target: GLenum, s: GLhalfNV) #c_call;
    glMultiTexCoord1hvNV : (target: GLenum, v: *GLhalfNV) #c_call;
    glMultiTexCoord2hNV : (target: GLenum, s: GLhalfNV, t: GLhalfNV) #c_call;
    glMultiTexCoord2hvNV : (target: GLenum, v: *GLhalfNV) #c_call;
    glMultiTexCoord3hNV : (target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) #c_call;
    glMultiTexCoord3hvNV : (target: GLenum, v: *GLhalfNV) #c_call;
    glMultiTexCoord4hNV : (target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) #c_call;
    glMultiTexCoord4hvNV : (target: GLenum, v: *GLhalfNV) #c_call;
    glFogCoordhNV : (fog: GLhalfNV) #c_call;
    glFogCoordhvNV : (fog: *GLhalfNV) #c_call;
    glSecondaryColor3hNV : (red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) #c_call;
    glSecondaryColor3hvNV : (v: *GLhalfNV) #c_call;
    glVertexWeighthNV : (weight: GLhalfNV) #c_call;
    glVertexWeighthvNV : (weight: *GLhalfNV) #c_call;
    glVertexAttrib1hNV : (index: GLuint, x: GLhalfNV) #c_call;
    glVertexAttrib1hvNV : (index: GLuint, v: *GLhalfNV) #c_call;
    glVertexAttrib2hNV : (index: GLuint, x: GLhalfNV, y: GLhalfNV) #c_call;
    glVertexAttrib2hvNV : (index: GLuint, v: *GLhalfNV) #c_call;
    glVertexAttrib3hNV : (index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) #c_call;
    glVertexAttrib3hvNV : (index: GLuint, v: *GLhalfNV) #c_call;
    glVertexAttrib4hNV : (index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) #c_call;
    glVertexAttrib4hvNV : (index: GLuint, v: *GLhalfNV) #c_call;
    glVertexAttribs1hvNV : (index: GLuint, n: GLsizei, v: *GLhalfNV) #c_call;
    glVertexAttribs2hvNV : (index: GLuint, n: GLsizei, v: *GLhalfNV) #c_call;
    glVertexAttribs3hvNV : (index: GLuint, n: GLsizei, v: *GLhalfNV) #c_call;
    glVertexAttribs4hvNV : (index: GLuint, n: GLsizei, v: *GLhalfNV) #c_call;

    // GL_NV_internalformat_sample_query
    glGetInternalformatSampleivNV : (target: GLenum, internalformat: GLenum, samples: GLsizei, pname: GLenum, bufSize: GLsizei, params: *GLint) #c_call;

    // GL_NV_light_max_exponent

    // GL_NV_multisample_coverage

    // GL_NV_multisample_filter_hint

    // GL_NV_occlusion_query
    glGenOcclusionQueriesNV : (n: GLsizei, ids: *GLuint) #c_call;
    glDeleteOcclusionQueriesNV : (n: GLsizei, ids: *GLuint) #c_call;
    glIsOcclusionQueryNV : (id: GLuint) -> GLboolean #c_call;
    glBeginOcclusionQueryNV : (id: GLuint) #c_call;
    glEndOcclusionQueryNV : () #c_call;
    glGetOcclusionQueryivNV : (id: GLuint, pname: GLenum, params: *GLint) #c_call;
    glGetOcclusionQueryuivNV : (id: GLuint, pname: GLenum, params: *GLuint) #c_call;

    // GL_NV_packed_depth_stencil

    // GL_NV_parameter_buffer_object
    glProgramBufferParametersfvNV : (target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *GLfloat) #c_call;
    glProgramBufferParametersIivNV : (target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *GLint) #c_call;
    glProgramBufferParametersIuivNV : (target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *GLuint) #c_call;

    // GL_NV_parameter_buffer_object2

    // GL_NV_path_rendering
    glGenPathsNV : (range: GLsizei) -> GLuint #c_call;
    glDeletePathsNV : (path: GLuint, range: GLsizei) #c_call;
    glIsPathNV : (path: GLuint) -> GLboolean #c_call;
    glPathCommandsNV : (path: GLuint, numCommands: GLsizei, commands: *GLubyte, numCoords: GLsizei, coordType: GLenum, coords: *void) #c_call;
    glPathCoordsNV : (path: GLuint, numCoords: GLsizei, coordType: GLenum, coords: *void) #c_call;
    glPathSubCommandsNV : (path: GLuint, commandStart: GLsizei, commandsToDelete: GLsizei, numCommands: GLsizei, commands: *GLubyte, numCoords: GLsizei, coordType: GLenum, coords: *void) #c_call;
    glPathSubCoordsNV : (path: GLuint, coordStart: GLsizei, numCoords: GLsizei, coordType: GLenum, coords: *void) #c_call;
    glPathStringNV : (path: GLuint, format: GLenum, length: GLsizei, pathString: *void) #c_call;
    glPathGlyphsNV : (firstPathName: GLuint, fontTarget: GLenum, fontName: *void, fontStyle: GLbitfield, numGlyphs: GLsizei, type: GLenum, charcodes: *void, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) #c_call;
    glPathGlyphRangeNV : (firstPathName: GLuint, fontTarget: GLenum, fontName: *void, fontStyle: GLbitfield, firstGlyph: GLuint, numGlyphs: GLsizei, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) #c_call;
    glWeightPathsNV : (resultPath: GLuint, numPaths: GLsizei, paths: *GLuint, weights: *GLfloat) #c_call;
    glCopyPathNV : (resultPath: GLuint, srcPath: GLuint) #c_call;
    glInterpolatePathsNV : (resultPath: GLuint, pathA: GLuint, pathB: GLuint, weight: GLfloat) #c_call;
    glTransformPathNV : (resultPath: GLuint, srcPath: GLuint, transformType: GLenum, transformValues: *GLfloat) #c_call;
    glPathParameterivNV : (path: GLuint, pname: GLenum, value: *GLint) #c_call;
    glPathParameteriNV : (path: GLuint, pname: GLenum, value: GLint) #c_call;
    glPathParameterfvNV : (path: GLuint, pname: GLenum, value: *GLfloat) #c_call;
    glPathParameterfNV : (path: GLuint, pname: GLenum, value: GLfloat) #c_call;
    glPathDashArrayNV : (path: GLuint, dashCount: GLsizei, dashArray: *GLfloat) #c_call;
    glPathStencilFuncNV : (func: GLenum, ref: GLint, mask: GLuint) #c_call;
    glPathStencilDepthOffsetNV : (factor: GLfloat, units: GLfloat) #c_call;
    glStencilFillPathNV : (path: GLuint, fillMode: GLenum, mask: GLuint) #c_call;
    glStencilStrokePathNV : (path: GLuint, reference: GLint, mask: GLuint) #c_call;
    glStencilFillPathInstancedNV : (numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, fillMode: GLenum, mask: GLuint, transformType: GLenum, transformValues: *GLfloat) #c_call;
    glStencilStrokePathInstancedNV : (numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, reference: GLint, mask: GLuint, transformType: GLenum, transformValues: *GLfloat) #c_call;
    glPathCoverDepthFuncNV : (func: GLenum) #c_call;
    glCoverFillPathNV : (path: GLuint, coverMode: GLenum) #c_call;
    glCoverStrokePathNV : (path: GLuint, coverMode: GLenum) #c_call;
    glCoverFillPathInstancedNV : (numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) #c_call;
    glCoverStrokePathInstancedNV : (numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) #c_call;
    glGetPathParameterivNV : (path: GLuint, pname: GLenum, value: *GLint) #c_call;
    glGetPathParameterfvNV : (path: GLuint, pname: GLenum, value: *GLfloat) #c_call;
    glGetPathCommandsNV : (path: GLuint, commands: *GLubyte) #c_call;
    glGetPathCoordsNV : (path: GLuint, coords: *GLfloat) #c_call;
    glGetPathDashArrayNV : (path: GLuint, dashArray: *GLfloat) #c_call;
    glGetPathMetricsNV : (metricQueryMask: GLbitfield, numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, stride: GLsizei, metrics: *GLfloat) #c_call;
    glGetPathMetricRangeNV : (metricQueryMask: GLbitfield, firstPathName: GLuint, numPaths: GLsizei, stride: GLsizei, metrics: *GLfloat) #c_call;
    glGetPathSpacingNV : (pathListMode: GLenum, numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, advanceScale: GLfloat, kerningScale: GLfloat, transformType: GLenum, returnedSpacing: *GLfloat) #c_call;
    glIsPointInFillPathNV : (path: GLuint, mask: GLuint, x: GLfloat, y: GLfloat) -> GLboolean #c_call;
    glIsPointInStrokePathNV : (path: GLuint, x: GLfloat, y: GLfloat) -> GLboolean #c_call;
    glGetPathLengthNV : (path: GLuint, startSegment: GLsizei, numSegments: GLsizei) -> GLfloat #c_call;
    glPointAlongPathNV : (path: GLuint, startSegment: GLsizei, numSegments: GLsizei, distance: GLfloat, x: *GLfloat, y: *GLfloat, tangentX: *GLfloat, tangentY: *GLfloat) -> GLboolean #c_call;
    glMatrixLoad3x2fNV : (matrixMode: GLenum, m: *GLfloat) #c_call;
    glMatrixLoad3x3fNV : (matrixMode: GLenum, m: *GLfloat) #c_call;
    glMatrixLoadTranspose3x3fNV : (matrixMode: GLenum, m: *GLfloat) #c_call;
    glMatrixMult3x2fNV : (matrixMode: GLenum, m: *GLfloat) #c_call;
    glMatrixMult3x3fNV : (matrixMode: GLenum, m: *GLfloat) #c_call;
    glMatrixMultTranspose3x3fNV : (matrixMode: GLenum, m: *GLfloat) #c_call;
    glStencilThenCoverFillPathNV : (path: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum) #c_call;
    glStencilThenCoverStrokePathNV : (path: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum) #c_call;
    glStencilThenCoverFillPathInstancedNV : (numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) #c_call;
    glStencilThenCoverStrokePathInstancedNV : (numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) #c_call;
    glPathGlyphIndexRangeNV : (fontTarget: GLenum, fontName: *void, fontStyle: GLbitfield, pathParameterTemplate: GLuint, emScale: GLfloat, baseAndCount: *GLuint) -> GLenum #c_call;
    glPathGlyphIndexArrayNV : (firstPathName: GLuint, fontTarget: GLenum, fontName: *void, fontStyle: GLbitfield, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat) -> GLenum #c_call;
    glPathMemoryGlyphIndexArrayNV : (firstPathName: GLuint, fontTarget: GLenum, fontSize: GLsizeiptr, fontData: *void, faceIndex: GLsizei, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat) -> GLenum #c_call;
    glProgramPathFragmentInputGenNV : (program: GLuint, location: GLint, genMode: GLenum, components: GLint, coeffs: *GLfloat) #c_call;
    glGetProgramResourcefvNV : (program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: *GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLfloat) #c_call;
    glPathColorGenNV : (color: GLenum, genMode: GLenum, colorFormat: GLenum, coeffs: *GLfloat) #c_call;
    glPathTexGenNV : (texCoordSet: GLenum, genMode: GLenum, components: GLint, coeffs: *GLfloat) #c_call;
    glPathFogGenNV : (genMode: GLenum) #c_call;
    glGetPathColorGenivNV : (color: GLenum, pname: GLenum, value: *GLint) #c_call;
    glGetPathColorGenfvNV : (color: GLenum, pname: GLenum, value: *GLfloat) #c_call;
    glGetPathTexGenivNV : (texCoordSet: GLenum, pname: GLenum, value: *GLint) #c_call;
    glGetPathTexGenfvNV : (texCoordSet: GLenum, pname: GLenum, value: *GLfloat) #c_call;
    // glMatrixFrustumEXT : (mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) #c_call;
    // glMatrixLoadIdentityEXT : (mode: GLenum) #c_call;
    // glMatrixLoadTransposefEXT : (mode: GLenum, m: *GLfloat) #c_call;
    // glMatrixLoadTransposedEXT : (mode: GLenum, m: *GLdouble) #c_call;
    // glMatrixLoadfEXT : (mode: GLenum, m: *GLfloat) #c_call;
    // glMatrixLoaddEXT : (mode: GLenum, m: *GLdouble) #c_call;
    // glMatrixMultTransposefEXT : (mode: GLenum, m: *GLfloat) #c_call;
    // glMatrixMultTransposedEXT : (mode: GLenum, m: *GLdouble) #c_call;
    // glMatrixMultfEXT : (mode: GLenum, m: *GLfloat) #c_call;
    // glMatrixMultdEXT : (mode: GLenum, m: *GLdouble) #c_call;
    // glMatrixOrthoEXT : (mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) #c_call;
    // glMatrixPopEXT : (mode: GLenum) #c_call;
    // glMatrixPushEXT : (mode: GLenum) #c_call;
    // glMatrixRotatefEXT : (mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    // glMatrixRotatedEXT : (mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) #c_call;
    // glMatrixScalefEXT : (mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    // glMatrixScaledEXT : (mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) #c_call;
    // glMatrixTranslatefEXT : (mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    // glMatrixTranslatedEXT : (mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) #c_call;

    // GL_NV_path_rendering_shared_edge

    // GL_NV_pixel_data_range
    glPixelDataRangeNV : (target: GLenum, length: GLsizei, pointer: *void) #c_call;
    glFlushPixelDataRangeNV : (target: GLenum) #c_call;

    // GL_NV_point_sprite
    glPointParameteriNV : (pname: GLenum, param: GLint) #c_call;
    glPointParameterivNV : (pname: GLenum, params: *GLint) #c_call;

    // GL_NV_present_video
    glPresentFrameKeyedNV : (video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, type: GLenum, target0: GLenum, fill0: GLuint, key0: GLuint, target1: GLenum, fill1: GLuint, key1: GLuint) #c_call;
    glPresentFrameDualFillNV : (video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, type: GLenum, target0: GLenum, fill0: GLuint, target1: GLenum, fill1: GLuint, target2: GLenum, fill2: GLuint, target3: GLenum, fill3: GLuint) #c_call;
    glGetVideoivNV : (video_slot: GLuint, pname: GLenum, params: *GLint) #c_call;
    glGetVideouivNV : (video_slot: GLuint, pname: GLenum, params: *GLuint) #c_call;
    glGetVideoi64vNV : (video_slot: GLuint, pname: GLenum, params: *GLint64EXT) #c_call;
    glGetVideoui64vNV : (video_slot: GLuint, pname: GLenum, params: *GLuint64EXT) #c_call;

    // GL_NV_primitive_restart
    glPrimitiveRestartNV : () #c_call;
    glPrimitiveRestartIndexNV : (index: GLuint) #c_call;

    // GL_NV_query_resource
    glQueryResourceNV : (queryType: GLenum, tagId: GLint, bufSize: GLuint, buffer: *GLint) -> GLint #c_call;

    // GL_NV_query_resource_tag
    glGenQueryResourceTagNV : (n: GLsizei, tagIds: *GLint) #c_call;
    glDeleteQueryResourceTagNV : (n: GLsizei, tagIds: *GLint) #c_call;
    glQueryResourceTagNV : (tagId: GLint, tagString: *GLchar) #c_call;

    // GL_NV_register_combiners
    glCombinerParameterfvNV : (pname: GLenum, params: *GLfloat) #c_call;
    glCombinerParameterfNV : (pname: GLenum, param: GLfloat) #c_call;
    glCombinerParameterivNV : (pname: GLenum, params: *GLint) #c_call;
    glCombinerParameteriNV : (pname: GLenum, param: GLint) #c_call;
    glCombinerInputNV : (stage: GLenum, portion: GLenum, variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) #c_call;
    glCombinerOutputNV : (stage: GLenum, portion: GLenum, abOutput: GLenum, cdOutput: GLenum, sumOutput: GLenum, scale: GLenum, bias: GLenum, abDotProduct: GLboolean, cdDotProduct: GLboolean, muxSum: GLboolean) #c_call;
    glFinalCombinerInputNV : (variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) #c_call;
    glGetCombinerInputParameterfvNV : (stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetCombinerInputParameterivNV : (stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetCombinerOutputParameterfvNV : (stage: GLenum, portion: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetCombinerOutputParameterivNV : (stage: GLenum, portion: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetFinalCombinerInputParameterfvNV : (variable: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetFinalCombinerInputParameterivNV : (variable: GLenum, pname: GLenum, params: *GLint) #c_call;

    // GL_NV_register_combiners2
    glCombinerStageParameterfvNV : (stage: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetCombinerStageParameterfvNV : (stage: GLenum, pname: GLenum, params: *GLfloat) #c_call;

    // GL_NV_robustness_video_memory_purge

    // GL_NV_sample_locations
    glFramebufferSampleLocationsfvNV : (target: GLenum, start: GLuint, count: GLsizei, v: *GLfloat) #c_call;
    glNamedFramebufferSampleLocationsfvNV : (framebuffer: GLuint, start: GLuint, count: GLsizei, v: *GLfloat) #c_call;
    glResolveDepthValuesNV : () #c_call;

    // GL_NV_sample_mask_override_coverage

    // GL_NV_shader_atomic_counters

    // GL_NV_shader_atomic_float

    // GL_NV_shader_atomic_float64

    // GL_NV_shader_atomic_fp16_vector

    // GL_NV_shader_atomic_int64

    // GL_NV_shader_buffer_load
    glMakeBufferResidentNV : (target: GLenum, access: GLenum) #c_call;
    glMakeBufferNonResidentNV : (target: GLenum) #c_call;
    glIsBufferResidentNV : (target: GLenum) -> GLboolean #c_call;
    glMakeNamedBufferResidentNV : (buffer: GLuint, access: GLenum) #c_call;
    glMakeNamedBufferNonResidentNV : (buffer: GLuint) #c_call;
    glIsNamedBufferResidentNV : (buffer: GLuint) -> GLboolean #c_call;
    glGetBufferParameterui64vNV : (target: GLenum, pname: GLenum, params: *GLuint64EXT) #c_call;
    glGetNamedBufferParameterui64vNV : (buffer: GLuint, pname: GLenum, params: *GLuint64EXT) #c_call;
    glGetIntegerui64vNV : (value: GLenum, result: *GLuint64EXT) #c_call;
    glUniformui64NV : (location: GLint, value: GLuint64EXT) #c_call;
    glUniformui64vNV : (location: GLint, count: GLsizei, value: *GLuint64EXT) #c_call;
    // glGetUniformui64vNV : (program: GLuint, location: GLint, params: *GLuint64EXT) #c_call;
    glProgramUniformui64NV : (program: GLuint, location: GLint, value: GLuint64EXT) #c_call;
    glProgramUniformui64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) #c_call;

    // GL_NV_shader_buffer_store

    // GL_NV_shader_storage_buffer_object

    // GL_NV_shader_thread_group

    // GL_NV_shader_thread_shuffle

    // GL_NV_stereo_view_rendering

    // GL_NV_tessellation_program5

    // GL_NV_texgen_emboss

    // GL_NV_texgen_reflection

    // GL_NV_texture_barrier
    glTextureBarrierNV : () #c_call;

    // GL_NV_texture_compression_vtc

    // GL_NV_texture_env_combine4

    // GL_NV_texture_expand_normal

    // GL_NV_texture_multisample
    glTexImage2DMultisampleCoverageNV : (target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) #c_call;
    glTexImage3DMultisampleCoverageNV : (target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) #c_call;
    glTextureImage2DMultisampleNV : (texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) #c_call;
    glTextureImage3DMultisampleNV : (texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) #c_call;
    glTextureImage2DMultisampleCoverageNV : (texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) #c_call;
    glTextureImage3DMultisampleCoverageNV : (texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) #c_call;

    // GL_NV_texture_rectangle

    // GL_NV_texture_rectangle_compressed

    // GL_NV_texture_shader

    // GL_NV_texture_shader2

    // GL_NV_texture_shader3

    // GL_NV_transform_feedback
    glBeginTransformFeedbackNV : (primitiveMode: GLenum) #c_call;
    glEndTransformFeedbackNV : () #c_call;
    glTransformFeedbackAttribsNV : (count: GLsizei, attribs: *GLint, bufferMode: GLenum) #c_call;
    glBindBufferRangeNV : (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #c_call;
    glBindBufferOffsetNV : (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr) #c_call;
    glBindBufferBaseNV : (target: GLenum, index: GLuint, buffer: GLuint) #c_call;
    glTransformFeedbackVaryingsNV : (program: GLuint, count: GLsizei, locations: *GLint, bufferMode: GLenum) #c_call;
    glActiveVaryingNV : (program: GLuint, name: *GLchar) #c_call;
    glGetVaryingLocationNV : (program: GLuint, name: *GLchar) -> GLint #c_call;
    glGetActiveVaryingNV : (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type: *GLenum, name: *GLchar) #c_call;
    glGetTransformFeedbackVaryingNV : (program: GLuint, index: GLuint, location: *GLint) #c_call;
    glTransformFeedbackStreamAttribsNV : (count: GLsizei, attribs: *GLint, nbuffers: GLsizei, bufstreams: *GLint, bufferMode: GLenum) #c_call;

    // GL_NV_transform_feedback2
    glBindTransformFeedbackNV : (target: GLenum, id: GLuint) #c_call;
    glDeleteTransformFeedbacksNV : (n: GLsizei, ids: *GLuint) #c_call;
    glGenTransformFeedbacksNV : (n: GLsizei, ids: *GLuint) #c_call;
    glIsTransformFeedbackNV : (id: GLuint) -> GLboolean #c_call;
    glPauseTransformFeedbackNV : () #c_call;
    glResumeTransformFeedbackNV : () #c_call;
    glDrawTransformFeedbackNV : (mode: GLenum, id: GLuint) #c_call;

    // GL_NV_uniform_buffer_unified_memory

    // GL_NV_vdpau_interop
    glVDPAUInitNV : (vdpDevice: *void, getProcAddress: *void) #c_call;
    glVDPAUFiniNV : () #c_call;
    // glVDPAURegisterVideoSurfaceNV : (vdpSurface: *void, target: GLenum, numTextureNames: GLsizei, textureNames: *GLuint) -> GLvdpauSurfaceNV #c_call;
    // glVDPAURegisterOutputSurfaceNV : (vdpSurface: *void, target: GLenum, numTextureNames: GLsizei, textureNames: *GLuint) -> GLvdpauSurfaceNV #c_call;
    // glVDPAUIsSurfaceNV : (surface: GLvdpauSurfaceNV) -> GLboolean #c_call;
    // glVDPAUUnregisterSurfaceNV : (surface: GLvdpauSurfaceNV) #c_call;
    // glVDPAUGetSurfaceivNV : (surface: GLvdpauSurfaceNV, pname: GLenum, bufSize: GLsizei, length: *GLsizei, values: *GLint) #c_call;
    // glVDPAUSurfaceAccessNV : (surface: GLvdpauSurfaceNV, access: GLenum) #c_call;
    // glVDPAUMapSurfacesNV : (numSurfaces: GLsizei, surfaces: *GLvdpauSurfaceNV) #c_call;
    // glVDPAUUnmapSurfacesNV : (numSurface: GLsizei, surfaces: *GLvdpauSurfaceNV) #c_call;

    // GL_NV_vertex_array_range
    glFlushVertexArrayRangeNV : () #c_call;
    glVertexArrayRangeNV : (length: GLsizei, pointer: *void) #c_call;

    // GL_NV_vertex_array_range2

    // GL_NV_vertex_attrib_integer_64bit
    glVertexAttribL1i64NV : (index: GLuint, x: GLint64EXT) #c_call;
    glVertexAttribL2i64NV : (index: GLuint, x: GLint64EXT, y: GLint64EXT) #c_call;
    glVertexAttribL3i64NV : (index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) #c_call;
    glVertexAttribL4i64NV : (index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) #c_call;
    glVertexAttribL1i64vNV : (index: GLuint, v: *GLint64EXT) #c_call;
    glVertexAttribL2i64vNV : (index: GLuint, v: *GLint64EXT) #c_call;
    glVertexAttribL3i64vNV : (index: GLuint, v: *GLint64EXT) #c_call;
    glVertexAttribL4i64vNV : (index: GLuint, v: *GLint64EXT) #c_call;
    glVertexAttribL1ui64NV : (index: GLuint, x: GLuint64EXT) #c_call;
    glVertexAttribL2ui64NV : (index: GLuint, x: GLuint64EXT, y: GLuint64EXT) #c_call;
    glVertexAttribL3ui64NV : (index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) #c_call;
    glVertexAttribL4ui64NV : (index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) #c_call;
    glVertexAttribL1ui64vNV : (index: GLuint, v: *GLuint64EXT) #c_call;
    glVertexAttribL2ui64vNV : (index: GLuint, v: *GLuint64EXT) #c_call;
    glVertexAttribL3ui64vNV : (index: GLuint, v: *GLuint64EXT) #c_call;
    glVertexAttribL4ui64vNV : (index: GLuint, v: *GLuint64EXT) #c_call;
    glGetVertexAttribLi64vNV : (index: GLuint, pname: GLenum, params: *GLint64EXT) #c_call;
    glGetVertexAttribLui64vNV : (index: GLuint, pname: GLenum, params: *GLuint64EXT) #c_call;
    glVertexAttribLFormatNV : (index: GLuint, size: GLint, type: GLenum, stride: GLsizei) #c_call;

    // GL_NV_vertex_buffer_unified_memory
    glBufferAddressRangeNV : (pname: GLenum, index: GLuint, address: GLuint64EXT, length: GLsizeiptr) #c_call;
    glVertexFormatNV : (size: GLint, type: GLenum, stride: GLsizei) #c_call;
    glNormalFormatNV : (type: GLenum, stride: GLsizei) #c_call;
    glColorFormatNV : (size: GLint, type: GLenum, stride: GLsizei) #c_call;
    glIndexFormatNV : (type: GLenum, stride: GLsizei) #c_call;
    glTexCoordFormatNV : (size: GLint, type: GLenum, stride: GLsizei) #c_call;
    glEdgeFlagFormatNV : (stride: GLsizei) #c_call;
    glSecondaryColorFormatNV : (size: GLint, type: GLenum, stride: GLsizei) #c_call;
    glFogCoordFormatNV : (type: GLenum, stride: GLsizei) #c_call;
    glVertexAttribFormatNV : (index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei) #c_call;
    glVertexAttribIFormatNV : (index: GLuint, size: GLint, type: GLenum, stride: GLsizei) #c_call;
    glGetIntegerui64i_vNV : (value: GLenum, index: GLuint, result: *GLuint64EXT) #c_call;

    // GL_NV_vertex_program
    glAreProgramsResidentNV : (n: GLsizei, programs: *GLuint, residences: *GLboolean) -> GLboolean #c_call;
    glBindProgramNV : (target: GLenum, id: GLuint) #c_call;
    glDeleteProgramsNV : (n: GLsizei, programs: *GLuint) #c_call;
    glExecuteProgramNV : (target: GLenum, id: GLuint, params: *GLfloat) #c_call;
    glGenProgramsNV : (n: GLsizei, programs: *GLuint) #c_call;
    glGetProgramParameterdvNV : (target: GLenum, index: GLuint, pname: GLenum, params: *GLdouble) #c_call;
    glGetProgramParameterfvNV : (target: GLenum, index: GLuint, pname: GLenum, params: *GLfloat) #c_call;
    glGetProgramivNV : (id: GLuint, pname: GLenum, params: *GLint) #c_call;
    glGetProgramStringNV : (id: GLuint, pname: GLenum, program: *GLubyte) #c_call;
    glGetTrackMatrixivNV : (target: GLenum, address: GLuint, pname: GLenum, params: *GLint) #c_call;
    glGetVertexAttribdvNV : (index: GLuint, pname: GLenum, params: *GLdouble) #c_call;
    glGetVertexAttribfvNV : (index: GLuint, pname: GLenum, params: *GLfloat) #c_call;
    glGetVertexAttribivNV : (index: GLuint, pname: GLenum, params: *GLint) #c_call;
    glGetVertexAttribPointervNV : (index: GLuint, pname: GLenum, pointer: **void) #c_call;
    glIsProgramNV : (id: GLuint) -> GLboolean #c_call;
    glLoadProgramNV : (target: GLenum, id: GLuint, len: GLsizei, program: *GLubyte) #c_call;
    glProgramParameter4dNV : (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #c_call;
    glProgramParameter4dvNV : (target: GLenum, index: GLuint, v: *GLdouble) #c_call;
    glProgramParameter4fNV : (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #c_call;
    glProgramParameter4fvNV : (target: GLenum, index: GLuint, v: *GLfloat) #c_call;
    glProgramParameters4dvNV : (target: GLenum, index: GLuint, count: GLsizei, v: *GLdouble) #c_call;
    glProgramParameters4fvNV : (target: GLenum, index: GLuint, count: GLsizei, v: *GLfloat) #c_call;
    glRequestResidentProgramsNV : (n: GLsizei, programs: *GLuint) #c_call;
    glTrackMatrixNV : (target: GLenum, address: GLuint, matrix: GLenum, transform: GLenum) #c_call;
    glVertexAttribPointerNV : (index: GLuint, fsize: GLint, type: GLenum, stride: GLsizei, pointer: *void) #c_call;
    glVertexAttrib1dNV : (index: GLuint, x: GLdouble) #c_call;
    glVertexAttrib1dvNV : (index: GLuint, v: *GLdouble) #c_call;
    glVertexAttrib1fNV : (index: GLuint, x: GLfloat) #c_call;
    glVertexAttrib1fvNV : (index: GLuint, v: *GLfloat) #c_call;
    glVertexAttrib1sNV : (index: GLuint, x: GLshort) #c_call;
    glVertexAttrib1svNV : (index: GLuint, v: *GLshort) #c_call;
    glVertexAttrib2dNV : (index: GLuint, x: GLdouble, y: GLdouble) #c_call;
    glVertexAttrib2dvNV : (index: GLuint, v: *GLdouble) #c_call;
    glVertexAttrib2fNV : (index: GLuint, x: GLfloat, y: GLfloat) #c_call;
    glVertexAttrib2fvNV : (index: GLuint, v: *GLfloat) #c_call;
    glVertexAttrib2sNV : (index: GLuint, x: GLshort, y: GLshort) #c_call;
    glVertexAttrib2svNV : (index: GLuint, v: *GLshort) #c_call;
    glVertexAttrib3dNV : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) #c_call;
    glVertexAttrib3dvNV : (index: GLuint, v: *GLdouble) #c_call;
    glVertexAttrib3fNV : (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glVertexAttrib3fvNV : (index: GLuint, v: *GLfloat) #c_call;
    glVertexAttrib3sNV : (index: GLuint, x: GLshort, y: GLshort, z: GLshort) #c_call;
    glVertexAttrib3svNV : (index: GLuint, v: *GLshort) #c_call;
    glVertexAttrib4dNV : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #c_call;
    glVertexAttrib4dvNV : (index: GLuint, v: *GLdouble) #c_call;
    glVertexAttrib4fNV : (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #c_call;
    glVertexAttrib4fvNV : (index: GLuint, v: *GLfloat) #c_call;
    glVertexAttrib4sNV : (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) #c_call;
    glVertexAttrib4svNV : (index: GLuint, v: *GLshort) #c_call;
    glVertexAttrib4ubNV : (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) #c_call;
    glVertexAttrib4ubvNV : (index: GLuint, v: *GLubyte) #c_call;
    glVertexAttribs1dvNV : (index: GLuint, count: GLsizei, v: *GLdouble) #c_call;
    glVertexAttribs1fvNV : (index: GLuint, count: GLsizei, v: *GLfloat) #c_call;
    glVertexAttribs1svNV : (index: GLuint, count: GLsizei, v: *GLshort) #c_call;
    glVertexAttribs2dvNV : (index: GLuint, count: GLsizei, v: *GLdouble) #c_call;
    glVertexAttribs2fvNV : (index: GLuint, count: GLsizei, v: *GLfloat) #c_call;
    glVertexAttribs2svNV : (index: GLuint, count: GLsizei, v: *GLshort) #c_call;
    glVertexAttribs3dvNV : (index: GLuint, count: GLsizei, v: *GLdouble) #c_call;
    glVertexAttribs3fvNV : (index: GLuint, count: GLsizei, v: *GLfloat) #c_call;
    glVertexAttribs3svNV : (index: GLuint, count: GLsizei, v: *GLshort) #c_call;
    glVertexAttribs4dvNV : (index: GLuint, count: GLsizei, v: *GLdouble) #c_call;
    glVertexAttribs4fvNV : (index: GLuint, count: GLsizei, v: *GLfloat) #c_call;
    glVertexAttribs4svNV : (index: GLuint, count: GLsizei, v: *GLshort) #c_call;
    glVertexAttribs4ubvNV : (index: GLuint, count: GLsizei, v: *GLubyte) #c_call;

    // GL_NV_vertex_program1_1

    // GL_NV_vertex_program2

    // GL_NV_vertex_program2_option

    // GL_NV_vertex_program3

    // GL_NV_vertex_program4
    glVertexAttribI1iEXT : (index: GLuint, x: GLint) #c_call;
    glVertexAttribI2iEXT : (index: GLuint, x: GLint, y: GLint) #c_call;
    glVertexAttribI3iEXT : (index: GLuint, x: GLint, y: GLint, z: GLint) #c_call;
    glVertexAttribI4iEXT : (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) #c_call;
    glVertexAttribI1uiEXT : (index: GLuint, x: GLuint) #c_call;
    glVertexAttribI2uiEXT : (index: GLuint, x: GLuint, y: GLuint) #c_call;
    glVertexAttribI3uiEXT : (index: GLuint, x: GLuint, y: GLuint, z: GLuint) #c_call;
    glVertexAttribI4uiEXT : (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) #c_call;
    glVertexAttribI1ivEXT : (index: GLuint, v: *GLint) #c_call;
    glVertexAttribI2ivEXT : (index: GLuint, v: *GLint) #c_call;
    glVertexAttribI3ivEXT : (index: GLuint, v: *GLint) #c_call;
    glVertexAttribI4ivEXT : (index: GLuint, v: *GLint) #c_call;
    glVertexAttribI1uivEXT : (index: GLuint, v: *GLuint) #c_call;
    glVertexAttribI2uivEXT : (index: GLuint, v: *GLuint) #c_call;
    glVertexAttribI3uivEXT : (index: GLuint, v: *GLuint) #c_call;
    glVertexAttribI4uivEXT : (index: GLuint, v: *GLuint) #c_call;
    glVertexAttribI4bvEXT : (index: GLuint, v: *GLbyte) #c_call;
    glVertexAttribI4svEXT : (index: GLuint, v: *GLshort) #c_call;
    glVertexAttribI4ubvEXT : (index: GLuint, v: *GLubyte) #c_call;
    glVertexAttribI4usvEXT : (index: GLuint, v: *GLushort) #c_call;
    glVertexAttribIPointerEXT : (index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #c_call;
    glGetVertexAttribIivEXT : (index: GLuint, pname: GLenum, params: *GLint) #c_call;
    glGetVertexAttribIuivEXT : (index: GLuint, pname: GLenum, params: *GLuint) #c_call;

    // GL_NV_video_capture
    glBeginVideoCaptureNV : (video_capture_slot: GLuint) #c_call;
    glBindVideoCaptureStreamBufferNV : (video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, offset: GLintptrARB) #c_call;
    glBindVideoCaptureStreamTextureNV : (video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, target: GLenum, texture: GLuint) #c_call;
    glEndVideoCaptureNV : (video_capture_slot: GLuint) #c_call;
    glGetVideoCaptureivNV : (video_capture_slot: GLuint, pname: GLenum, params: *GLint) #c_call;
    glGetVideoCaptureStreamivNV : (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLint) #c_call;
    glGetVideoCaptureStreamfvNV : (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLfloat) #c_call;
    glGetVideoCaptureStreamdvNV : (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLdouble) #c_call;
    glVideoCaptureNV : (video_capture_slot: GLuint, sequence_num: *GLuint, capture_time: *GLuint64EXT) -> GLenum #c_call;
    glVideoCaptureStreamParameterivNV : (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLint) #c_call;
    glVideoCaptureStreamParameterfvNV : (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLfloat) #c_call;
    glVideoCaptureStreamParameterdvNV : (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLdouble) #c_call;

    // GL_NV_viewport_array2

    // GL_NV_viewport_swizzle
    glViewportSwizzleNV : (index: GLuint, swizzlex: GLenum, swizzley: GLenum, swizzlez: GLenum, swizzlew: GLenum) #c_call;

    // GL_OES_byte_coordinates
    glMultiTexCoord1bOES : (texture: GLenum, s: GLbyte) #c_call;
    glMultiTexCoord1bvOES : (texture: GLenum, coords: *GLbyte) #c_call;
    glMultiTexCoord2bOES : (texture: GLenum, s: GLbyte, t: GLbyte) #c_call;
    glMultiTexCoord2bvOES : (texture: GLenum, coords: *GLbyte) #c_call;
    glMultiTexCoord3bOES : (texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte) #c_call;
    glMultiTexCoord3bvOES : (texture: GLenum, coords: *GLbyte) #c_call;
    glMultiTexCoord4bOES : (texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) #c_call;
    glMultiTexCoord4bvOES : (texture: GLenum, coords: *GLbyte) #c_call;
    glTexCoord1bOES : (s: GLbyte) #c_call;
    glTexCoord1bvOES : (coords: *GLbyte) #c_call;
    glTexCoord2bOES : (s: GLbyte, t: GLbyte) #c_call;
    glTexCoord2bvOES : (coords: *GLbyte) #c_call;
    glTexCoord3bOES : (s: GLbyte, t: GLbyte, r: GLbyte) #c_call;
    glTexCoord3bvOES : (coords: *GLbyte) #c_call;
    glTexCoord4bOES : (s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) #c_call;
    glTexCoord4bvOES : (coords: *GLbyte) #c_call;
    glVertex2bOES : (x: GLbyte, y: GLbyte) #c_call;
    glVertex2bvOES : (coords: *GLbyte) #c_call;
    glVertex3bOES : (x: GLbyte, y: GLbyte, z: GLbyte) #c_call;
    glVertex3bvOES : (coords: *GLbyte) #c_call;
    glVertex4bOES : (x: GLbyte, y: GLbyte, z: GLbyte, w: GLbyte) #c_call;
    glVertex4bvOES : (coords: *GLbyte) #c_call;

    // GL_OES_compressed_paletted_texture

    // GL_OES_fixed_point
    glAlphaFuncxOES : (func: GLenum, ref: GLfixed) #c_call;
    glClearColorxOES : (red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) #c_call;
    glClearDepthxOES : (depth: GLfixed) #c_call;
    glClipPlanexOES : (plane: GLenum, equation: *GLfixed) #c_call;
    glColor4xOES : (red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) #c_call;
    glDepthRangexOES : (n: GLfixed, f: GLfixed) #c_call;
    glFogxOES : (pname: GLenum, param: GLfixed) #c_call;
    glFogxvOES : (pname: GLenum, param: *GLfixed) #c_call;
    glFrustumxOES : (l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) #c_call;
    glGetClipPlanexOES : (plane: GLenum, equation: *GLfixed) #c_call;
    glGetFixedvOES : (pname: GLenum, params: *GLfixed) #c_call;
    glGetTexEnvxvOES : (target: GLenum, pname: GLenum, params: *GLfixed) #c_call;
    glGetTexParameterxvOES : (target: GLenum, pname: GLenum, params: *GLfixed) #c_call;
    glLightModelxOES : (pname: GLenum, param: GLfixed) #c_call;
    glLightModelxvOES : (pname: GLenum, param: *GLfixed) #c_call;
    glLightxOES : (light: GLenum, pname: GLenum, param: GLfixed) #c_call;
    glLightxvOES : (light: GLenum, pname: GLenum, params: *GLfixed) #c_call;
    glLineWidthxOES : (width: GLfixed) #c_call;
    glLoadMatrixxOES : (m: *GLfixed) #c_call;
    glMaterialxOES : (face: GLenum, pname: GLenum, param: GLfixed) #c_call;
    glMaterialxvOES : (face: GLenum, pname: GLenum, param: *GLfixed) #c_call;
    glMultMatrixxOES : (m: *GLfixed) #c_call;
    glMultiTexCoord4xOES : (texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) #c_call;
    glNormal3xOES : (nx: GLfixed, ny: GLfixed, nz: GLfixed) #c_call;
    glOrthoxOES : (l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) #c_call;
    glPointParameterxvOES : (pname: GLenum, params: *GLfixed) #c_call;
    glPointSizexOES : (size: GLfixed) #c_call;
    glPolygonOffsetxOES : (factor: GLfixed, units: GLfixed) #c_call;
    glRotatexOES : (angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed) #c_call;
    glScalexOES : (x: GLfixed, y: GLfixed, z: GLfixed) #c_call;
    glTexEnvxOES : (target: GLenum, pname: GLenum, param: GLfixed) #c_call;
    glTexEnvxvOES : (target: GLenum, pname: GLenum, params: *GLfixed) #c_call;
    glTexParameterxOES : (target: GLenum, pname: GLenum, param: GLfixed) #c_call;
    glTexParameterxvOES : (target: GLenum, pname: GLenum, params: *GLfixed) #c_call;
    glTranslatexOES : (x: GLfixed, y: GLfixed, z: GLfixed) #c_call;
    glGetLightxvOES : (light: GLenum, pname: GLenum, params: *GLfixed) #c_call;
    glGetMaterialxvOES : (face: GLenum, pname: GLenum, params: *GLfixed) #c_call;
    glPointParameterxOES : (pname: GLenum, param: GLfixed) #c_call;
    glSampleCoveragexOES : (value: GLclampx, invert: GLboolean) #c_call;
    glAccumxOES : (op: GLenum, value: GLfixed) #c_call;
    glBitmapxOES : (width: GLsizei, height: GLsizei, xorig: GLfixed, yorig: GLfixed, xmove: GLfixed, ymove: GLfixed, bitmap: *GLubyte) #c_call;
    glBlendColorxOES : (red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) #c_call;
    glClearAccumxOES : (red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) #c_call;
    glColor3xOES : (red: GLfixed, green: GLfixed, blue: GLfixed) #c_call;
    glColor3xvOES : (components: *GLfixed) #c_call;
    glColor4xvOES : (components: *GLfixed) #c_call;
    glConvolutionParameterxOES : (target: GLenum, pname: GLenum, param: GLfixed) #c_call;
    glConvolutionParameterxvOES : (target: GLenum, pname: GLenum, params: *GLfixed) #c_call;
    glEvalCoord1xOES : (u: GLfixed) #c_call;
    glEvalCoord1xvOES : (coords: *GLfixed) #c_call;
    glEvalCoord2xOES : (u: GLfixed, v: GLfixed) #c_call;
    glEvalCoord2xvOES : (coords: *GLfixed) #c_call;
    glFeedbackBufferxOES : (n: GLsizei, type: GLenum, buffer: *GLfixed) #c_call;
    glGetConvolutionParameterxvOES : (target: GLenum, pname: GLenum, params: *GLfixed) #c_call;
    glGetHistogramParameterxvOES : (target: GLenum, pname: GLenum, params: *GLfixed) #c_call;
    glGetLightxOES : (light: GLenum, pname: GLenum, params: *GLfixed) #c_call;
    glGetMapxvOES : (target: GLenum, query: GLenum, v: *GLfixed) #c_call;
    glGetMaterialxOES : (face: GLenum, pname: GLenum, param: GLfixed) #c_call;
    glGetPixelMapxv : (map: GLenum, size: GLint, values: *GLfixed) #c_call;
    glGetTexGenxvOES : (coord: GLenum, pname: GLenum, params: *GLfixed) #c_call;
    glGetTexLevelParameterxvOES : (target: GLenum, level: GLint, pname: GLenum, params: *GLfixed) #c_call;
    glIndexxOES : (component: GLfixed) #c_call;
    glIndexxvOES : (component: *GLfixed) #c_call;
    glLoadTransposeMatrixxOES : (m: *GLfixed) #c_call;
    glMap1xOES : (target: GLenum, u1: GLfixed, u2: GLfixed, stride: GLint, order: GLint, points: GLfixed) #c_call;
    glMap2xOES : (target: GLenum, u1: GLfixed, u2: GLfixed, ustride: GLint, uorder: GLint, v1: GLfixed, v2: GLfixed, vstride: GLint, vorder: GLint, points: GLfixed) #c_call;
    glMapGrid1xOES : (n: GLint, u1: GLfixed, u2: GLfixed) #c_call;
    glMapGrid2xOES : (n: GLint, u1: GLfixed, u2: GLfixed, v1: GLfixed, v2: GLfixed) #c_call;
    glMultTransposeMatrixxOES : (m: *GLfixed) #c_call;
    glMultiTexCoord1xOES : (texture: GLenum, s: GLfixed) #c_call;
    glMultiTexCoord1xvOES : (texture: GLenum, coords: *GLfixed) #c_call;
    glMultiTexCoord2xOES : (texture: GLenum, s: GLfixed, t: GLfixed) #c_call;
    glMultiTexCoord2xvOES : (texture: GLenum, coords: *GLfixed) #c_call;
    glMultiTexCoord3xOES : (texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed) #c_call;
    glMultiTexCoord3xvOES : (texture: GLenum, coords: *GLfixed) #c_call;
    glMultiTexCoord4xvOES : (texture: GLenum, coords: *GLfixed) #c_call;
    glNormal3xvOES : (coords: *GLfixed) #c_call;
    glPassThroughxOES : (token: GLfixed) #c_call;
    glPixelMapx : (map: GLenum, size: GLint, values: *GLfixed) #c_call;
    glPixelStorex : (pname: GLenum, param: GLfixed) #c_call;
    glPixelTransferxOES : (pname: GLenum, param: GLfixed) #c_call;
    glPixelZoomxOES : (xfactor: GLfixed, yfactor: GLfixed) #c_call;
    glPrioritizeTexturesxOES : (n: GLsizei, textures: *GLuint, priorities: *GLfixed) #c_call;
    glRasterPos2xOES : (x: GLfixed, y: GLfixed) #c_call;
    glRasterPos2xvOES : (coords: *GLfixed) #c_call;
    glRasterPos3xOES : (x: GLfixed, y: GLfixed, z: GLfixed) #c_call;
    glRasterPos3xvOES : (coords: *GLfixed) #c_call;
    glRasterPos4xOES : (x: GLfixed, y: GLfixed, z: GLfixed, w: GLfixed) #c_call;
    glRasterPos4xvOES : (coords: *GLfixed) #c_call;
    glRectxOES : (x1: GLfixed, y1: GLfixed, x2: GLfixed, y2: GLfixed) #c_call;
    glRectxvOES : (v1: *GLfixed, v2: *GLfixed) #c_call;
    glTexCoord1xOES : (s: GLfixed) #c_call;
    glTexCoord1xvOES : (coords: *GLfixed) #c_call;
    glTexCoord2xOES : (s: GLfixed, t: GLfixed) #c_call;
    glTexCoord2xvOES : (coords: *GLfixed) #c_call;
    glTexCoord3xOES : (s: GLfixed, t: GLfixed, r: GLfixed) #c_call;
    glTexCoord3xvOES : (coords: *GLfixed) #c_call;
    glTexCoord4xOES : (s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) #c_call;
    glTexCoord4xvOES : (coords: *GLfixed) #c_call;
    glTexGenxOES : (coord: GLenum, pname: GLenum, param: GLfixed) #c_call;
    glTexGenxvOES : (coord: GLenum, pname: GLenum, params: *GLfixed) #c_call;
    glVertex2xOES : (x: GLfixed) #c_call;
    glVertex2xvOES : (coords: *GLfixed) #c_call;
    glVertex3xOES : (x: GLfixed, y: GLfixed) #c_call;
    glVertex3xvOES : (coords: *GLfixed) #c_call;
    glVertex4xOES : (x: GLfixed, y: GLfixed, z: GLfixed) #c_call;
    glVertex4xvOES : (coords: *GLfixed) #c_call;

    // GL_OES_query_matrix
    glQueryMatrixxOES : (mantissa: *GLfixed, exponent: *GLint) -> GLbitfield #c_call;

    // GL_OES_read_format

    // GL_OES_single_precision
    glClearDepthfOES : (depth: GLclampf) #c_call;
    glClipPlanefOES : (plane: GLenum, equation: *GLfloat) #c_call;
    glDepthRangefOES : (n: GLclampf, f: GLclampf) #c_call;
    glFrustumfOES : (l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) #c_call;
    glGetClipPlanefOES : (plane: GLenum, equation: *GLfloat) #c_call;
    glOrthofOES : (l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) #c_call;

    // GL_OML_interlace

    // GL_OML_resample

    // GL_OML_subsample

    // GL_OVR_multiview
    glFramebufferTextureMultiviewOVR : (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, baseViewIndex: GLint, numViews: GLsizei) #c_call;

    // GL_OVR_multiview2

    // GL_PGI_misc_hints
    glHintPGI : (target: GLenum, mode: GLint) #c_call;

    // GL_PGI_vertex_hints

    // GL_REND_screen_coordinates

    // GL_S3_s3tc

    // GL_SGIS_detail_texture
    glDetailTexFuncSGIS : (target: GLenum, n: GLsizei, points: *GLfloat) #c_call;
    glGetDetailTexFuncSGIS : (target: GLenum, points: *GLfloat) #c_call;

    // GL_SGIS_fog_function
    glFogFuncSGIS : (n: GLsizei, points: *GLfloat) #c_call;
    glGetFogFuncSGIS : (points: *GLfloat) #c_call;

    // GL_SGIS_generate_mipmap

    // GL_SGIS_multisample
    glSampleMaskSGIS : (value: GLclampf, invert: GLboolean) #c_call;
    glSamplePatternSGIS : (pattern: GLenum) #c_call;

    // GL_SGIS_pixel_texture
    glPixelTexGenParameteriSGIS : (pname: GLenum, param: GLint) #c_call;
    glPixelTexGenParameterivSGIS : (pname: GLenum, params: *GLint) #c_call;
    glPixelTexGenParameterfSGIS : (pname: GLenum, param: GLfloat) #c_call;
    glPixelTexGenParameterfvSGIS : (pname: GLenum, params: *GLfloat) #c_call;
    glGetPixelTexGenParameterivSGIS : (pname: GLenum, params: *GLint) #c_call;
    glGetPixelTexGenParameterfvSGIS : (pname: GLenum, params: *GLfloat) #c_call;

    // GL_SGIS_point_line_texgen

    // GL_SGIS_point_parameters
    glPointParameterfSGIS : (pname: GLenum, param: GLfloat) #c_call;
    glPointParameterfvSGIS : (pname: GLenum, params: *GLfloat) #c_call;

    // GL_SGIS_sharpen_texture
    glSharpenTexFuncSGIS : (target: GLenum, n: GLsizei, points: *GLfloat) #c_call;
    glGetSharpenTexFuncSGIS : (target: GLenum, points: *GLfloat) #c_call;

    // GL_SGIS_texture4D
    glTexImage4DSGIS : (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #c_call;
    glTexSubImage4DSGIS : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, woffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, format: GLenum, type: GLenum, pixels: *void) #c_call;

    // GL_SGIS_texture_border_clamp

    // GL_SGIS_texture_color_mask
    glTextureColorMaskSGIS : (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) #c_call;

    // GL_SGIS_texture_edge_clamp

    // GL_SGIS_texture_filter4
    glGetTexFilterFuncSGIS : (target: GLenum, filter: GLenum, weights: *GLfloat) #c_call;
    glTexFilterFuncSGIS : (target: GLenum, filter: GLenum, n: GLsizei, weights: *GLfloat) #c_call;

    // GL_SGIS_texture_lod

    // GL_SGIS_texture_select

    // GL_SGIX_async
    glAsyncMarkerSGIX : (marker: GLuint) #c_call;
    glFinishAsyncSGIX : (markerp: *GLuint) -> GLint #c_call;
    glPollAsyncSGIX : (markerp: *GLuint) -> GLint #c_call;
    glGenAsyncMarkersSGIX : (range: GLsizei) -> GLuint #c_call;
    glDeleteAsyncMarkersSGIX : (marker: GLuint, range: GLsizei) #c_call;
    glIsAsyncMarkerSGIX : (marker: GLuint) -> GLboolean #c_call;

    // GL_SGIX_async_histogram

    // GL_SGIX_async_pixel

    // GL_SGIX_blend_alpha_minmax

    // GL_SGIX_calligraphic_fragment

    // GL_SGIX_clipmap

    // GL_SGIX_convolution_accuracy

    // GL_SGIX_depth_pass_instrument

    // GL_SGIX_depth_texture

    // GL_SGIX_flush_raster
    glFlushRasterSGIX : () #c_call;

    // GL_SGIX_fog_offset

    // GL_SGIX_fragment_lighting
    glFragmentColorMaterialSGIX : (face: GLenum, mode: GLenum) #c_call;
    glFragmentLightfSGIX : (light: GLenum, pname: GLenum, param: GLfloat) #c_call;
    glFragmentLightfvSGIX : (light: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glFragmentLightiSGIX : (light: GLenum, pname: GLenum, param: GLint) #c_call;
    glFragmentLightivSGIX : (light: GLenum, pname: GLenum, params: *GLint) #c_call;
    glFragmentLightModelfSGIX : (pname: GLenum, param: GLfloat) #c_call;
    glFragmentLightModelfvSGIX : (pname: GLenum, params: *GLfloat) #c_call;
    glFragmentLightModeliSGIX : (pname: GLenum, param: GLint) #c_call;
    glFragmentLightModelivSGIX : (pname: GLenum, params: *GLint) #c_call;
    glFragmentMaterialfSGIX : (face: GLenum, pname: GLenum, param: GLfloat) #c_call;
    glFragmentMaterialfvSGIX : (face: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glFragmentMaterialiSGIX : (face: GLenum, pname: GLenum, param: GLint) #c_call;
    glFragmentMaterialivSGIX : (face: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetFragmentLightfvSGIX : (light: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetFragmentLightivSGIX : (light: GLenum, pname: GLenum, params: *GLint) #c_call;
    glGetFragmentMaterialfvSGIX : (face: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetFragmentMaterialivSGIX : (face: GLenum, pname: GLenum, params: *GLint) #c_call;
    glLightEnviSGIX : (pname: GLenum, param: GLint) #c_call;

    // GL_SGIX_framezoom
    glFrameZoomSGIX : (factor: GLint) #c_call;

    // GL_SGIX_igloo_interface
    glIglooInterfaceSGIX : (pname: GLenum, params: *void) #c_call;

    // GL_SGIX_instruments
    glGetInstrumentsSGIX : () -> GLint #c_call;
    glInstrumentsBufferSGIX : (size: GLsizei, buffer: *GLint) #c_call;
    glPollInstrumentsSGIX : (marker_p: *GLint) -> GLint #c_call;
    glReadInstrumentsSGIX : (marker: GLint) #c_call;
    glStartInstrumentsSGIX : () #c_call;
    glStopInstrumentsSGIX : (marker: GLint) #c_call;

    // GL_SGIX_interlace

    // GL_SGIX_ir_instrument1

    // GL_SGIX_list_priority
    glGetListParameterfvSGIX : (list: GLuint, pname: GLenum, params: *GLfloat) #c_call;
    glGetListParameterivSGIX : (list: GLuint, pname: GLenum, params: *GLint) #c_call;
    glListParameterfSGIX : (list: GLuint, pname: GLenum, param: GLfloat) #c_call;
    glListParameterfvSGIX : (list: GLuint, pname: GLenum, params: *GLfloat) #c_call;
    glListParameteriSGIX : (list: GLuint, pname: GLenum, param: GLint) #c_call;
    glListParameterivSGIX : (list: GLuint, pname: GLenum, params: *GLint) #c_call;

    // GL_SGIX_pixel_texture
    glPixelTexGenSGIX : (mode: GLenum) #c_call;

    // GL_SGIX_pixel_tiles

    // GL_SGIX_polynomial_ffd
    glDeformationMap3dSGIX : (target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, w1: GLdouble, w2: GLdouble, wstride: GLint, worder: GLint, points: *GLdouble) #c_call;
    glDeformationMap3fSGIX : (target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, w1: GLfloat, w2: GLfloat, wstride: GLint, worder: GLint, points: *GLfloat) #c_call;
    glDeformSGIX : (mask: GLbitfield) #c_call;
    glLoadIdentityDeformationMapSGIX : (mask: GLbitfield) #c_call;

    // GL_SGIX_reference_plane
    glReferencePlaneSGIX : (equation: *GLdouble) #c_call;

    // GL_SGIX_resample

    // GL_SGIX_scalebias_hint

    // GL_SGIX_shadow

    // GL_SGIX_shadow_ambient

    // GL_SGIX_sprite
    glSpriteParameterfSGIX : (pname: GLenum, param: GLfloat) #c_call;
    glSpriteParameterfvSGIX : (pname: GLenum, params: *GLfloat) #c_call;
    glSpriteParameteriSGIX : (pname: GLenum, param: GLint) #c_call;
    glSpriteParameterivSGIX : (pname: GLenum, params: *GLint) #c_call;

    // GL_SGIX_subsample

    // GL_SGIX_tag_sample_buffer
    glTagSampleBufferSGIX : () #c_call;

    // GL_SGIX_texture_add_env

    // GL_SGIX_texture_coordinate_clamp

    // GL_SGIX_texture_lod_bias

    // GL_SGIX_texture_multi_buffer

    // GL_SGIX_texture_scale_bias

    // GL_SGIX_vertex_preclip

    // GL_SGIX_ycrcb

    // GL_SGIX_ycrcb_subsample

    // GL_SGIX_ycrcba

    // GL_SGI_color_matrix

    // GL_SGI_color_table
    glColorTableSGI : (target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type: GLenum, table: *void) #c_call;
    glColorTableParameterfvSGI : (target: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glColorTableParameterivSGI : (target: GLenum, pname: GLenum, params: *GLint) #c_call;
    glCopyColorTableSGI : (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) #c_call;
    glGetColorTableSGI : (target: GLenum, format: GLenum, type: GLenum, table: *void) #c_call;
    glGetColorTableParameterfvSGI : (target: GLenum, pname: GLenum, params: *GLfloat) #c_call;
    glGetColorTableParameterivSGI : (target: GLenum, pname: GLenum, params: *GLint) #c_call;

    // GL_SGI_texture_color_table

    // GL_SUNX_constant_data
    glFinishTextureSUNX : () #c_call;

    // GL_SUN_convolution_border_modes

    // GL_SUN_global_alpha
    glGlobalAlphaFactorbSUN : (factor: GLbyte) #c_call;
    glGlobalAlphaFactorsSUN : (factor: GLshort) #c_call;
    glGlobalAlphaFactoriSUN : (factor: GLint) #c_call;
    glGlobalAlphaFactorfSUN : (factor: GLfloat) #c_call;
    glGlobalAlphaFactordSUN : (factor: GLdouble) #c_call;
    glGlobalAlphaFactorubSUN : (factor: GLubyte) #c_call;
    glGlobalAlphaFactorusSUN : (factor: GLushort) #c_call;
    glGlobalAlphaFactoruiSUN : (factor: GLuint) #c_call;

    // GL_SUN_mesh_array
    glDrawMeshArraysSUN : (mode: GLenum, first: GLint, count: GLsizei, width: GLsizei) #c_call;

    // GL_SUN_slice_accum

    // GL_SUN_triangle_list
    glReplacementCodeuiSUN : (code: GLuint) #c_call;
    glReplacementCodeusSUN : (code: GLushort) #c_call;
    glReplacementCodeubSUN : (code: GLubyte) #c_call;
    glReplacementCodeuivSUN : (code: *GLuint) #c_call;
    glReplacementCodeusvSUN : (code: *GLushort) #c_call;
    glReplacementCodeubvSUN : (code: *GLubyte) #c_call;
    glReplacementCodePointerSUN : (type: GLenum, stride: GLsizei, pointer: **void) #c_call;

    // GL_SUN_vertex
    glColor4ubVertex2fSUN : (r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat) #c_call;
    glColor4ubVertex2fvSUN : (c: *GLubyte, v: *GLfloat) #c_call;
    glColor4ubVertex3fSUN : (r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glColor4ubVertex3fvSUN : (c: *GLubyte, v: *GLfloat) #c_call;
    glColor3fVertex3fSUN : (r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glColor3fVertex3fvSUN : (c: *GLfloat, v: *GLfloat) #c_call;
    glNormal3fVertex3fSUN : (nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glNormal3fVertex3fvSUN : (n: *GLfloat, v: *GLfloat) #c_call;
    glColor4fNormal3fVertex3fSUN : (r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glColor4fNormal3fVertex3fvSUN : (c: *GLfloat, n: *GLfloat, v: *GLfloat) #c_call;
    glTexCoord2fVertex3fSUN : (s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glTexCoord2fVertex3fvSUN : (tc: *GLfloat, v: *GLfloat) #c_call;
    glTexCoord4fVertex4fSUN : (s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #c_call;
    glTexCoord4fVertex4fvSUN : (tc: *GLfloat, v: *GLfloat) #c_call;
    glTexCoord2fColor4ubVertex3fSUN : (s: GLfloat, t: GLfloat, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glTexCoord2fColor4ubVertex3fvSUN : (tc: *GLfloat, c: *GLubyte, v: *GLfloat) #c_call;
    glTexCoord2fColor3fVertex3fSUN : (s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glTexCoord2fColor3fVertex3fvSUN : (tc: *GLfloat, c: *GLfloat, v: *GLfloat) #c_call;
    glTexCoord2fNormal3fVertex3fSUN : (s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glTexCoord2fNormal3fVertex3fvSUN : (tc: *GLfloat, n: *GLfloat, v: *GLfloat) #c_call;
    glTexCoord2fColor4fNormal3fVertex3fSUN : (s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glTexCoord2fColor4fNormal3fVertex3fvSUN : (tc: *GLfloat, c: *GLfloat, n: *GLfloat, v: *GLfloat) #c_call;
    glTexCoord4fColor4fNormal3fVertex4fSUN : (s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #c_call;
    glTexCoord4fColor4fNormal3fVertex4fvSUN : (tc: *GLfloat, c: *GLfloat, n: *GLfloat, v: *GLfloat) #c_call;
    glReplacementCodeuiVertex3fSUN : (rc: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glReplacementCodeuiVertex3fvSUN : (rc: *GLuint, v: *GLfloat) #c_call;
    glReplacementCodeuiColor4ubVertex3fSUN : (rc: GLuint, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glReplacementCodeuiColor4ubVertex3fvSUN : (rc: *GLuint, c: *GLubyte, v: *GLfloat) #c_call;
    glReplacementCodeuiColor3fVertex3fSUN : (rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glReplacementCodeuiColor3fVertex3fvSUN : (rc: *GLuint, c: *GLfloat, v: *GLfloat) #c_call;
    glReplacementCodeuiNormal3fVertex3fSUN : (rc: GLuint, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glReplacementCodeuiNormal3fVertex3fvSUN : (rc: *GLuint, n: *GLfloat, v: *GLfloat) #c_call;
    glReplacementCodeuiColor4fNormal3fVertex3fSUN : (rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glReplacementCodeuiColor4fNormal3fVertex3fvSUN : (rc: *GLuint, c: *GLfloat, n: *GLfloat, v: *GLfloat) #c_call;
    glReplacementCodeuiTexCoord2fVertex3fSUN : (rc: GLuint, s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glReplacementCodeuiTexCoord2fVertex3fvSUN : (rc: *GLuint, tc: *GLfloat, v: *GLfloat) #c_call;
    glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN : (rc: GLuint, s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN : (rc: *GLuint, tc: *GLfloat, n: *GLfloat, v: *GLfloat) #c_call;
    glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN : (rc: GLuint, s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #c_call;
    glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN : (rc: *GLuint, tc: *GLfloat, c: *GLfloat, n: *GLfloat, v: *GLfloat) #c_call;
}
