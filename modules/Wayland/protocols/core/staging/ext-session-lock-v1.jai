/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: ext_session_lock_v1
 */

ext_session_lock_manager_v1_interface: wl_interface;
ext_session_lock_manager_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *ext_session_lock_manager_v1_interface;

    set_user_data :: inline (self: *ext_session_lock_manager_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *ext_session_lock_manager_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *ext_session_lock_manager_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *ext_session_lock_manager_v1) #c_call {
        wl_proxy.marshal_flags(
            self, EXT_SESSION_LOCK_MANAGER_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    lock :: inline (self: *ext_session_lock_manager_v1) -> *ext_session_lock_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, EXT_SESSION_LOCK_MANAGER_V1_LOCK,
            *ext_session_lock_v1_interface, wl_proxy.get_version(self), 0,
            null);
        return cast(*ext_session_lock_v1) ret;
    }
}

EXT_SESSION_LOCK_MANAGER_V1_DESTROY       : u32 : 0;
EXT_SESSION_LOCK_MANAGER_V1_LOCK          : u32 : 1;
EXT_SESSION_LOCK_MANAGER_V1_DESTROY_SINCE : u32 : 1;
EXT_SESSION_LOCK_MANAGER_V1_LOCK_SINCE    : u32 : 1;

ext_session_lock_v1_interface: wl_interface;
ext_session_lock_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *ext_session_lock_v1_interface;

    /* ENUM: ext_session_lock_v1::error */
    error_invalid_destroy     : u32 : 0;
    error_invalid_unlock      : u32 : 1;
    error_role                : u32 : 2;
    error_duplicate_output    : u32 : 3;
    error_already_constructed : u32 : 4;

    set_user_data :: inline (self: *ext_session_lock_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *ext_session_lock_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *ext_session_lock_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *ext_session_lock_v1) #c_call {
        wl_proxy.marshal_flags(
            self, EXT_SESSION_LOCK_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    get_lock_surface :: inline (self: *ext_session_lock_v1, surface: *wl_surface, output: *wl_output) -> *ext_session_lock_surface_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, EXT_SESSION_LOCK_V1_GET_LOCK_SURFACE,
            *ext_session_lock_surface_v1_interface, wl_proxy.get_version(self), 0,
            null, surface, output);
        return cast(*ext_session_lock_surface_v1) ret;
    }

    unlock_and_destroy :: inline (self: *ext_session_lock_v1) #c_call {
        wl_proxy.marshal_flags(
            self, EXT_SESSION_LOCK_V1_UNLOCK_AND_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *ext_session_lock_v1, listener: *ext_session_lock_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

EXT_SESSION_LOCK_V1_DESTROY                  : u32 : 0;
EXT_SESSION_LOCK_V1_GET_LOCK_SURFACE         : u32 : 1;
EXT_SESSION_LOCK_V1_UNLOCK_AND_DESTROY       : u32 : 2;
EXT_SESSION_LOCK_V1_DESTROY_SINCE            : u32 : 1;
EXT_SESSION_LOCK_V1_GET_LOCK_SURFACE_SINCE   : u32 : 1;
EXT_SESSION_LOCK_V1_UNLOCK_AND_DESTROY_SINCE : u32 : 1;
EXT_SESSION_LOCK_V1_LOCKED_SINCE             : u32 : 1;
EXT_SESSION_LOCK_V1_FINISHED_SINCE           : u32 : 1;

ext_session_lock_v1_listener :: struct {
    locked   := _stubs_.locked;
    finished := _stubs_.finished;

    _stubs_ :: struct {
        locked :: (data: *void,
            self: *ext_session_lock_v1) -> void #c_call {}
        finished :: (data: *void,
            self: *ext_session_lock_v1) -> void #c_call {}
    }
}

ext_session_lock_surface_v1_interface: wl_interface;
ext_session_lock_surface_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *ext_session_lock_surface_v1_interface;

    /* ENUM: ext_session_lock_surface_v1::error */
    error_commit_before_first_ack : u32 : 0;
    error_null_buffer             : u32 : 1;
    error_dimensions_mismatch     : u32 : 2;
    error_invalid_serial          : u32 : 3;

    set_user_data :: inline (self: *ext_session_lock_surface_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *ext_session_lock_surface_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *ext_session_lock_surface_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *ext_session_lock_surface_v1) #c_call {
        wl_proxy.marshal_flags(
            self, EXT_SESSION_LOCK_SURFACE_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    ack_configure :: inline (self: *ext_session_lock_surface_v1, serial: u32) #c_call {
        wl_proxy.marshal_flags(
            self, EXT_SESSION_LOCK_SURFACE_V1_ACK_CONFIGURE,
            null, wl_proxy.get_version(self), 0,
            serial);
    }

    add_listener :: inline (self: *ext_session_lock_surface_v1, listener: *ext_session_lock_surface_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

EXT_SESSION_LOCK_SURFACE_V1_DESTROY             : u32 : 0;
EXT_SESSION_LOCK_SURFACE_V1_ACK_CONFIGURE       : u32 : 1;
EXT_SESSION_LOCK_SURFACE_V1_DESTROY_SINCE       : u32 : 1;
EXT_SESSION_LOCK_SURFACE_V1_ACK_CONFIGURE_SINCE : u32 : 1;
EXT_SESSION_LOCK_SURFACE_V1_CONFIGURE_SINCE     : u32 : 1;

ext_session_lock_surface_v1_listener :: struct {
    configure := _stubs_.configure;

    _stubs_ :: struct {
        configure :: (data: *void,
            self: *ext_session_lock_surface_v1,
            serial: u32,
            width: u32,
            height: u32) -> void #c_call {}
    }
}


#scope_module
ext_session_lock_v1_protocol_init :: () {
    ext_session_lock_v1_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: ext_session_lock_manager_v1::lock */
        *ext_session_lock_v1_interface,   // 1
        /* REQUEST: ext_session_lock_v1::get_lock_surface */
        *ext_session_lock_surface_v1_interface,   // 2
        *wl_surface_interface,   // 3
        *wl_output_interface,   // 4
        /* REQUEST: ext_session_lock_surface_v1::ack_configure */
        null,  // 5
        /* EVENT: ext_session_lock_surface_v1::configure */
        null,  // 6
        null,  // 7
        null,  // 8
    ];

    ext_session_lock_manager_v1_requests[0] = .{"destroy", "", ext_session_lock_v1_types_storage.data + 0};
    ext_session_lock_manager_v1_requests[1] = .{"lock", "n", ext_session_lock_v1_types_storage.data + 1};
    ext_session_lock_manager_v1_interface = .{
        "ext_session_lock_manager_v1", 1,
        ext_session_lock_manager_v1_requests.count, ext_session_lock_manager_v1_requests.data,
        0, null,
    };

    ext_session_lock_v1_requests[0] = .{"destroy", "", ext_session_lock_v1_types_storage.data + 0};
    ext_session_lock_v1_requests[1] = .{"get_lock_surface", "noo", ext_session_lock_v1_types_storage.data + 2};
    ext_session_lock_v1_requests[2] = .{"unlock_and_destroy", "", ext_session_lock_v1_types_storage.data + 0};
    ext_session_lock_v1_events[0] = .{"locked", "", ext_session_lock_v1_types_storage.data + 0};
    ext_session_lock_v1_events[1] = .{"finished", "", ext_session_lock_v1_types_storage.data + 0};
    ext_session_lock_v1_interface = .{
        "ext_session_lock_v1", 1,
        ext_session_lock_v1_requests.count, ext_session_lock_v1_requests.data,
        ext_session_lock_v1_events.count, ext_session_lock_v1_events.data,
    };

    ext_session_lock_surface_v1_requests[0] = .{"destroy", "", ext_session_lock_v1_types_storage.data + 0};
    ext_session_lock_surface_v1_requests[1] = .{"ack_configure", "u", ext_session_lock_v1_types_storage.data + 5};
    ext_session_lock_surface_v1_events[0] = .{"configure", "uuu", ext_session_lock_v1_types_storage.data + 6};
    ext_session_lock_surface_v1_interface = .{
        "ext_session_lock_surface_v1", 1,
        ext_session_lock_surface_v1_requests.count, ext_session_lock_surface_v1_requests.data,
        ext_session_lock_surface_v1_events.count, ext_session_lock_surface_v1_events.data,
    };
}


#scope_file
ext_session_lock_v1_types_storage: []*wl_interface;

ext_session_lock_manager_v1_requests: [2]wl_message;

ext_session_lock_v1_requests: [3]wl_message;
ext_session_lock_v1_events  : [2]wl_message;

ext_session_lock_surface_v1_requests: [2]wl_message;
ext_session_lock_surface_v1_events  : [1]wl_message;

#assert size_of(ext_session_lock_manager_v1) == 0 "wayland-scanner bug: ext_session_lock_manager_v1 is non-empty";
#assert size_of(ext_session_lock_v1) == 0 "wayland-scanner bug: ext_session_lock_v1 is non-empty";
#assert size_of(ext_session_lock_surface_v1) == 0 "wayland-scanner bug: ext_session_lock_surface_v1 is non-empty";
