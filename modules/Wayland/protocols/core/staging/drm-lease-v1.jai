/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: drm_lease_v1
 */

wp_drm_lease_device_v1_interface: wl_interface;
wp_drm_lease_device_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *wp_drm_lease_device_v1_interface;

    set_user_data :: inline (self: *wp_drm_lease_device_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *wp_drm_lease_device_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *wp_drm_lease_device_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *wp_drm_lease_device_v1) #c_call {
        wl_proxy.destroy(self);
    }

    create_lease_request :: inline (self: *wp_drm_lease_device_v1) -> *wp_drm_lease_request_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, WP_DRM_LEASE_DEVICE_V1_CREATE_LEASE_REQUEST,
            *wp_drm_lease_request_v1_interface, wl_proxy.get_version(self), 0,
            null);
        return cast(*wp_drm_lease_request_v1) ret;
    }

    release :: inline (self: *wp_drm_lease_device_v1) #c_call {
        wl_proxy.marshal_flags(
            self, WP_DRM_LEASE_DEVICE_V1_RELEASE,
            null, wl_proxy.get_version(self), 0);
    }

    add_listener :: inline (self: *wp_drm_lease_device_v1, listener: *wp_drm_lease_device_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

WP_DRM_LEASE_DEVICE_V1_CREATE_LEASE_REQUEST       : u32 : 0;
WP_DRM_LEASE_DEVICE_V1_RELEASE                    : u32 : 1;
WP_DRM_LEASE_DEVICE_V1_CREATE_LEASE_REQUEST_SINCE : u32 : 1;
WP_DRM_LEASE_DEVICE_V1_RELEASE_SINCE              : u32 : 1;
WP_DRM_LEASE_DEVICE_V1_DRM_FD_SINCE               : u32 : 1;
WP_DRM_LEASE_DEVICE_V1_CONNECTOR_SINCE            : u32 : 1;
WP_DRM_LEASE_DEVICE_V1_DONE_SINCE                 : u32 : 1;
WP_DRM_LEASE_DEVICE_V1_RELEASED_SINCE             : u32 : 1;

wp_drm_lease_device_v1_listener :: struct {
    drm_fd    := _stubs_.drm_fd;
    connector := _stubs_.connector;
    done      := _stubs_.done;
    released  := _stubs_.released;

    _stubs_ :: struct {
        drm_fd :: (data: *void,
            self: *wp_drm_lease_device_v1,
            fd: s32) -> void #c_call {}
        connector :: (data: *void,
            self: *wp_drm_lease_device_v1,
            id: *wp_drm_lease_connector_v1) -> void #c_call {}
        done :: (data: *void,
            self: *wp_drm_lease_device_v1) -> void #c_call {}
        released :: (data: *void,
            self: *wp_drm_lease_device_v1) -> void #c_call {}
    }
}

wp_drm_lease_connector_v1_interface: wl_interface;
wp_drm_lease_connector_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *wp_drm_lease_connector_v1_interface;

    set_user_data :: inline (self: *wp_drm_lease_connector_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *wp_drm_lease_connector_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *wp_drm_lease_connector_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *wp_drm_lease_connector_v1) #c_call {
        wl_proxy.marshal_flags(
            self, WP_DRM_LEASE_CONNECTOR_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *wp_drm_lease_connector_v1, listener: *wp_drm_lease_connector_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

WP_DRM_LEASE_CONNECTOR_V1_DESTROY            : u32 : 0;
WP_DRM_LEASE_CONNECTOR_V1_DESTROY_SINCE      : u32 : 1;
WP_DRM_LEASE_CONNECTOR_V1_NAME_SINCE         : u32 : 1;
WP_DRM_LEASE_CONNECTOR_V1_DESCRIPTION_SINCE  : u32 : 1;
WP_DRM_LEASE_CONNECTOR_V1_CONNECTOR_ID_SINCE : u32 : 1;
WP_DRM_LEASE_CONNECTOR_V1_DONE_SINCE         : u32 : 1;
WP_DRM_LEASE_CONNECTOR_V1_WITHDRAWN_SINCE    : u32 : 1;

wp_drm_lease_connector_v1_listener :: struct {
    name         := _stubs_.name;
    description  := _stubs_.description;
    connector_id := _stubs_.connector_id;
    done         := _stubs_.done;
    withdrawn    := _stubs_.withdrawn;

    _stubs_ :: struct {
        name :: (data: *void,
            self: *wp_drm_lease_connector_v1,
            name: *u8) -> void #c_call {}
        description :: (data: *void,
            self: *wp_drm_lease_connector_v1,
            description: *u8) -> void #c_call {}
        connector_id :: (data: *void,
            self: *wp_drm_lease_connector_v1,
            connector_id: u32) -> void #c_call {}
        done :: (data: *void,
            self: *wp_drm_lease_connector_v1) -> void #c_call {}
        withdrawn :: (data: *void,
            self: *wp_drm_lease_connector_v1) -> void #c_call {}
    }
}

wp_drm_lease_request_v1_interface: wl_interface;
wp_drm_lease_request_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *wp_drm_lease_request_v1_interface;

    /* ENUM: wp_drm_lease_request_v1::error */
    error_wrong_device        : u32 : 0;
    error_duplicate_connector : u32 : 1;
    error_empty_lease         : u32 : 2;

    set_user_data :: inline (self: *wp_drm_lease_request_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *wp_drm_lease_request_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *wp_drm_lease_request_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *wp_drm_lease_request_v1) #c_call {
        wl_proxy.destroy(self);
    }

    request_connector :: inline (self: *wp_drm_lease_request_v1, connector: *wp_drm_lease_connector_v1) #c_call {
        wl_proxy.marshal_flags(
            self, WP_DRM_LEASE_REQUEST_V1_REQUEST_CONNECTOR,
            null, wl_proxy.get_version(self), 0,
            connector);
    }

    submit :: inline (self: *wp_drm_lease_request_v1) -> *wp_drm_lease_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, WP_DRM_LEASE_REQUEST_V1_SUBMIT,
            *wp_drm_lease_v1_interface, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY,
            null);
        return cast(*wp_drm_lease_v1) ret;
    }
}

WP_DRM_LEASE_REQUEST_V1_REQUEST_CONNECTOR       : u32 : 0;
WP_DRM_LEASE_REQUEST_V1_SUBMIT                  : u32 : 1;
WP_DRM_LEASE_REQUEST_V1_REQUEST_CONNECTOR_SINCE : u32 : 1;
WP_DRM_LEASE_REQUEST_V1_SUBMIT_SINCE            : u32 : 1;

wp_drm_lease_v1_interface: wl_interface;
wp_drm_lease_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *wp_drm_lease_v1_interface;

    set_user_data :: inline (self: *wp_drm_lease_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *wp_drm_lease_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *wp_drm_lease_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *wp_drm_lease_v1) #c_call {
        wl_proxy.marshal_flags(
            self, WP_DRM_LEASE_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *wp_drm_lease_v1, listener: *wp_drm_lease_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

WP_DRM_LEASE_V1_DESTROY        : u32 : 0;
WP_DRM_LEASE_V1_DESTROY_SINCE  : u32 : 1;
WP_DRM_LEASE_V1_LEASE_FD_SINCE : u32 : 1;
WP_DRM_LEASE_V1_FINISHED_SINCE : u32 : 1;

wp_drm_lease_v1_listener :: struct {
    lease_fd := _stubs_.lease_fd;
    finished := _stubs_.finished;

    _stubs_ :: struct {
        lease_fd :: (data: *void,
            self: *wp_drm_lease_v1,
            leased_fd: s32) -> void #c_call {}
        finished :: (data: *void,
            self: *wp_drm_lease_v1) -> void #c_call {}
    }
}


#scope_module
drm_lease_v1_protocol_init :: () {
    drm_lease_v1_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: wp_drm_lease_device_v1::create_lease_request */
        *wp_drm_lease_request_v1_interface,   // 1
        /* EVENT: wp_drm_lease_device_v1::drm_fd */
        null,  // 2
        /* EVENT: wp_drm_lease_device_v1::connector */
        *wp_drm_lease_connector_v1_interface,  // 3
        /* EVENT: wp_drm_lease_connector_v1::name */
        null,  // 4
        /* EVENT: wp_drm_lease_connector_v1::description */
        null,  // 5
        /* EVENT: wp_drm_lease_connector_v1::connector_id */
        null,  // 6
        /* REQUEST: wp_drm_lease_request_v1::request_connector */
        *wp_drm_lease_connector_v1_interface,   // 7
        /* REQUEST: wp_drm_lease_request_v1::submit */
        *wp_drm_lease_v1_interface,   // 8
        /* EVENT: wp_drm_lease_v1::lease_fd */
        null,  // 9
    ];

    wp_drm_lease_device_v1_requests[0] = .{"create_lease_request", "n", drm_lease_v1_types_storage.data + 1};
    wp_drm_lease_device_v1_requests[1] = .{"release", "", drm_lease_v1_types_storage.data + 0};
    wp_drm_lease_device_v1_events[0] = .{"drm_fd", "h", drm_lease_v1_types_storage.data + 2};
    wp_drm_lease_device_v1_events[1] = .{"connector", "n", drm_lease_v1_types_storage.data + 3};
    wp_drm_lease_device_v1_events[2] = .{"done", "", drm_lease_v1_types_storage.data + 0};
    wp_drm_lease_device_v1_events[3] = .{"released", "", drm_lease_v1_types_storage.data + 0};
    wp_drm_lease_device_v1_interface = .{
        "wp_drm_lease_device_v1", 1,
        wp_drm_lease_device_v1_requests.count, wp_drm_lease_device_v1_requests.data,
        wp_drm_lease_device_v1_events.count, wp_drm_lease_device_v1_events.data,
    };

    wp_drm_lease_connector_v1_requests[0] = .{"destroy", "", drm_lease_v1_types_storage.data + 0};
    wp_drm_lease_connector_v1_events[0] = .{"name", "s", drm_lease_v1_types_storage.data + 4};
    wp_drm_lease_connector_v1_events[1] = .{"description", "s", drm_lease_v1_types_storage.data + 5};
    wp_drm_lease_connector_v1_events[2] = .{"connector_id", "u", drm_lease_v1_types_storage.data + 6};
    wp_drm_lease_connector_v1_events[3] = .{"done", "", drm_lease_v1_types_storage.data + 0};
    wp_drm_lease_connector_v1_events[4] = .{"withdrawn", "", drm_lease_v1_types_storage.data + 0};
    wp_drm_lease_connector_v1_interface = .{
        "wp_drm_lease_connector_v1", 1,
        wp_drm_lease_connector_v1_requests.count, wp_drm_lease_connector_v1_requests.data,
        wp_drm_lease_connector_v1_events.count, wp_drm_lease_connector_v1_events.data,
    };

    wp_drm_lease_request_v1_requests[0] = .{"request_connector", "o", drm_lease_v1_types_storage.data + 7};
    wp_drm_lease_request_v1_requests[1] = .{"submit", "n", drm_lease_v1_types_storage.data + 8};
    wp_drm_lease_request_v1_interface = .{
        "wp_drm_lease_request_v1", 1,
        wp_drm_lease_request_v1_requests.count, wp_drm_lease_request_v1_requests.data,
        0, null,
    };

    wp_drm_lease_v1_requests[0] = .{"destroy", "", drm_lease_v1_types_storage.data + 0};
    wp_drm_lease_v1_events[0] = .{"lease_fd", "h", drm_lease_v1_types_storage.data + 9};
    wp_drm_lease_v1_events[1] = .{"finished", "", drm_lease_v1_types_storage.data + 0};
    wp_drm_lease_v1_interface = .{
        "wp_drm_lease_v1", 1,
        wp_drm_lease_v1_requests.count, wp_drm_lease_v1_requests.data,
        wp_drm_lease_v1_events.count, wp_drm_lease_v1_events.data,
    };
}


#scope_file
drm_lease_v1_types_storage: []*wl_interface;

wp_drm_lease_device_v1_requests: [2]wl_message;
wp_drm_lease_device_v1_events  : [4]wl_message;

wp_drm_lease_connector_v1_requests: [1]wl_message;
wp_drm_lease_connector_v1_events  : [5]wl_message;

wp_drm_lease_request_v1_requests: [2]wl_message;

wp_drm_lease_v1_requests: [1]wl_message;
wp_drm_lease_v1_events  : [2]wl_message;

#assert size_of(wp_drm_lease_device_v1) == 0 "wayland-scanner bug: wp_drm_lease_device_v1 is non-empty";
#assert size_of(wp_drm_lease_connector_v1) == 0 "wayland-scanner bug: wp_drm_lease_connector_v1 is non-empty";
#assert size_of(wp_drm_lease_request_v1) == 0 "wayland-scanner bug: wp_drm_lease_request_v1 is non-empty";
#assert size_of(wp_drm_lease_v1) == 0 "wayland-scanner bug: wp_drm_lease_v1 is non-empty";
