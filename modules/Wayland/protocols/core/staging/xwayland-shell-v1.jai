/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: xwayland_shell_v1
 */

xwayland_shell_v1_interface: wl_interface;
xwayland_shell_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *xwayland_shell_v1_interface;

    /* ENUM: xwayland_shell_v1::error */
    error_role : u32 : 0;

    set_user_data :: inline (self: *xwayland_shell_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *xwayland_shell_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *xwayland_shell_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *xwayland_shell_v1) #c_call {
        wl_proxy.marshal_flags(
            self, XWAYLAND_SHELL_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    get_xwayland_surface :: inline (self: *xwayland_shell_v1, surface: *wl_surface) -> *xwayland_surface_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, XWAYLAND_SHELL_V1_GET_XWAYLAND_SURFACE,
            *xwayland_surface_v1_interface, wl_proxy.get_version(self), 0,
            null, surface);
        return cast(*xwayland_surface_v1) ret;
    }
}

XWAYLAND_SHELL_V1_DESTROY                    : u32 : 0;
XWAYLAND_SHELL_V1_GET_XWAYLAND_SURFACE       : u32 : 1;
XWAYLAND_SHELL_V1_DESTROY_SINCE              : u32 : 1;
XWAYLAND_SHELL_V1_GET_XWAYLAND_SURFACE_SINCE : u32 : 1;

xwayland_surface_v1_interface: wl_interface;
xwayland_surface_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *xwayland_surface_v1_interface;

    /* ENUM: xwayland_surface_v1::error */
    error_already_associated : u32 : 0;
    error_invalid_serial     : u32 : 1;

    set_user_data :: inline (self: *xwayland_surface_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *xwayland_surface_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *xwayland_surface_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    set_serial :: inline (self: *xwayland_surface_v1, serial_lo: u32, serial_hi: u32) #c_call {
        wl_proxy.marshal_flags(
            self, XWAYLAND_SURFACE_V1_SET_SERIAL,
            null, wl_proxy.get_version(self), 0,
            serial_lo, serial_hi);
    }

    destroy :: inline (self: *xwayland_surface_v1) #c_call {
        wl_proxy.marshal_flags(
            self, XWAYLAND_SURFACE_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }
}

XWAYLAND_SURFACE_V1_SET_SERIAL       : u32 : 0;
XWAYLAND_SURFACE_V1_DESTROY          : u32 : 1;
XWAYLAND_SURFACE_V1_SET_SERIAL_SINCE : u32 : 1;
XWAYLAND_SURFACE_V1_DESTROY_SINCE    : u32 : 1;


#scope_module
xwayland_shell_v1_protocol_init :: () {
    xwayland_shell_v1_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: xwayland_shell_v1::get_xwayland_surface */
        *xwayland_surface_v1_interface,   // 1
        *wl_surface_interface,   // 2
        /* REQUEST: xwayland_surface_v1::set_serial */
        null,  // 3
        null,  // 4
    ];

    xwayland_shell_v1_requests[0] = .{"destroy", "", xwayland_shell_v1_types_storage.data + 0};
    xwayland_shell_v1_requests[1] = .{"get_xwayland_surface", "no", xwayland_shell_v1_types_storage.data + 1};
    xwayland_shell_v1_interface = .{
        "xwayland_shell_v1", 1,
        xwayland_shell_v1_requests.count, xwayland_shell_v1_requests.data,
        0, null,
    };

    xwayland_surface_v1_requests[0] = .{"set_serial", "uu", xwayland_shell_v1_types_storage.data + 3};
    xwayland_surface_v1_requests[1] = .{"destroy", "", xwayland_shell_v1_types_storage.data + 0};
    xwayland_surface_v1_interface = .{
        "xwayland_surface_v1", 1,
        xwayland_surface_v1_requests.count, xwayland_surface_v1_requests.data,
        0, null,
    };
}


#scope_file
xwayland_shell_v1_types_storage: []*wl_interface;

xwayland_shell_v1_requests: [2]wl_message;

xwayland_surface_v1_requests: [2]wl_message;

#assert size_of(xwayland_shell_v1) == 0 "wayland-scanner bug: xwayland_shell_v1 is non-empty";
#assert size_of(xwayland_surface_v1) == 0 "wayland-scanner bug: xwayland_surface_v1 is non-empty";
