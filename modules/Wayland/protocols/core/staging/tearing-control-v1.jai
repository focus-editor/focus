/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: tearing_control_v1
 */

wp_tearing_control_manager_v1_interface: wl_interface;
wp_tearing_control_manager_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *wp_tearing_control_manager_v1_interface;

    /* ENUM: wp_tearing_control_manager_v1::error */
    error_tearing_control_exists : u32 : 0;

    set_user_data :: inline (self: *wp_tearing_control_manager_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *wp_tearing_control_manager_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *wp_tearing_control_manager_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *wp_tearing_control_manager_v1) #c_call {
        wl_proxy.marshal_flags(
            self, WP_TEARING_CONTROL_MANAGER_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    get_tearing_control :: inline (self: *wp_tearing_control_manager_v1, surface: *wl_surface) -> *wp_tearing_control_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, WP_TEARING_CONTROL_MANAGER_V1_GET_TEARING_CONTROL,
            *wp_tearing_control_v1_interface, wl_proxy.get_version(self), 0,
            null, surface);
        return cast(*wp_tearing_control_v1) ret;
    }
}

WP_TEARING_CONTROL_MANAGER_V1_DESTROY                   : u32 : 0;
WP_TEARING_CONTROL_MANAGER_V1_GET_TEARING_CONTROL       : u32 : 1;
WP_TEARING_CONTROL_MANAGER_V1_DESTROY_SINCE             : u32 : 1;
WP_TEARING_CONTROL_MANAGER_V1_GET_TEARING_CONTROL_SINCE : u32 : 1;

wp_tearing_control_v1_interface: wl_interface;
wp_tearing_control_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *wp_tearing_control_v1_interface;

    /* ENUM: wp_tearing_control_v1::presentation_hint */
    presentation_hint_vsync : u32 : 0;
    presentation_hint_async : u32 : 1;

    set_user_data :: inline (self: *wp_tearing_control_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *wp_tearing_control_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *wp_tearing_control_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    set_presentation_hint :: inline (self: *wp_tearing_control_v1, hint: u32) #c_call {
        wl_proxy.marshal_flags(
            self, WP_TEARING_CONTROL_V1_SET_PRESENTATION_HINT,
            null, wl_proxy.get_version(self), 0,
            hint);
    }

    destroy :: inline (self: *wp_tearing_control_v1) #c_call {
        wl_proxy.marshal_flags(
            self, WP_TEARING_CONTROL_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }
}

WP_TEARING_CONTROL_V1_SET_PRESENTATION_HINT       : u32 : 0;
WP_TEARING_CONTROL_V1_DESTROY                     : u32 : 1;
WP_TEARING_CONTROL_V1_SET_PRESENTATION_HINT_SINCE : u32 : 1;
WP_TEARING_CONTROL_V1_DESTROY_SINCE               : u32 : 1;


#scope_module
tearing_control_v1_protocol_init :: () {
    tearing_control_v1_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: wp_tearing_control_manager_v1::get_tearing_control */
        *wp_tearing_control_v1_interface,   // 1
        *wl_surface_interface,   // 2
        /* REQUEST: wp_tearing_control_v1::set_presentation_hint */
        null,  // 3
    ];

    wp_tearing_control_manager_v1_requests[0] = .{"destroy", "", tearing_control_v1_types_storage.data + 0};
    wp_tearing_control_manager_v1_requests[1] = .{"get_tearing_control", "no", tearing_control_v1_types_storage.data + 1};
    wp_tearing_control_manager_v1_interface = .{
        "wp_tearing_control_manager_v1", 1,
        wp_tearing_control_manager_v1_requests.count, wp_tearing_control_manager_v1_requests.data,
        0, null,
    };

    wp_tearing_control_v1_requests[0] = .{"set_presentation_hint", "u", tearing_control_v1_types_storage.data + 3};
    wp_tearing_control_v1_requests[1] = .{"destroy", "", tearing_control_v1_types_storage.data + 0};
    wp_tearing_control_v1_interface = .{
        "wp_tearing_control_v1", 1,
        wp_tearing_control_v1_requests.count, wp_tearing_control_v1_requests.data,
        0, null,
    };
}


#scope_file
tearing_control_v1_types_storage: []*wl_interface;

wp_tearing_control_manager_v1_requests: [2]wl_message;

wp_tearing_control_v1_requests: [2]wl_message;

#assert size_of(wp_tearing_control_manager_v1) == 0 "wayland-scanner bug: wp_tearing_control_manager_v1 is non-empty";
#assert size_of(wp_tearing_control_v1) == 0 "wayland-scanner bug: wp_tearing_control_v1 is non-empty";
