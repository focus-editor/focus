/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: xdg_activation_v1
 */

xdg_activation_v1_interface: wl_interface;
xdg_activation_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *xdg_activation_v1_interface;

    set_user_data :: inline (self: *xdg_activation_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *xdg_activation_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *xdg_activation_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *xdg_activation_v1) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_ACTIVATION_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    get_activation_token :: inline (self: *xdg_activation_v1) -> *xdg_activation_token_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, XDG_ACTIVATION_V1_GET_ACTIVATION_TOKEN,
            *xdg_activation_token_v1_interface, wl_proxy.get_version(self), 0,
            null);
        return cast(*xdg_activation_token_v1) ret;
    }

    activate :: inline (self: *xdg_activation_v1, token: *u8, surface: *wl_surface) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_ACTIVATION_V1_ACTIVATE,
            null, wl_proxy.get_version(self), 0,
            token, surface);
    }
}

XDG_ACTIVATION_V1_DESTROY                    : u32 : 0;
XDG_ACTIVATION_V1_GET_ACTIVATION_TOKEN       : u32 : 1;
XDG_ACTIVATION_V1_ACTIVATE                   : u32 : 2;
XDG_ACTIVATION_V1_DESTROY_SINCE              : u32 : 1;
XDG_ACTIVATION_V1_GET_ACTIVATION_TOKEN_SINCE : u32 : 1;
XDG_ACTIVATION_V1_ACTIVATE_SINCE             : u32 : 1;

xdg_activation_token_v1_interface: wl_interface;
xdg_activation_token_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *xdg_activation_token_v1_interface;

    /* ENUM: xdg_activation_token_v1::error */
    error_already_used : u32 : 0;

    set_user_data :: inline (self: *xdg_activation_token_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *xdg_activation_token_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *xdg_activation_token_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    set_serial :: inline (self: *xdg_activation_token_v1, serial: u32, seat: *wl_seat) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_ACTIVATION_TOKEN_V1_SET_SERIAL,
            null, wl_proxy.get_version(self), 0,
            serial, seat);
    }

    set_app_id :: inline (self: *xdg_activation_token_v1, app_id: *u8) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_ACTIVATION_TOKEN_V1_SET_APP_ID,
            null, wl_proxy.get_version(self), 0,
            app_id);
    }

    set_surface :: inline (self: *xdg_activation_token_v1, surface: *wl_surface) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_ACTIVATION_TOKEN_V1_SET_SURFACE,
            null, wl_proxy.get_version(self), 0,
            surface);
    }

    commit :: inline (self: *xdg_activation_token_v1) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_ACTIVATION_TOKEN_V1_COMMIT,
            null, wl_proxy.get_version(self), 0);
    }

    destroy :: inline (self: *xdg_activation_token_v1) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_ACTIVATION_TOKEN_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *xdg_activation_token_v1, listener: *xdg_activation_token_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

XDG_ACTIVATION_TOKEN_V1_SET_SERIAL        : u32 : 0;
XDG_ACTIVATION_TOKEN_V1_SET_APP_ID        : u32 : 1;
XDG_ACTIVATION_TOKEN_V1_SET_SURFACE       : u32 : 2;
XDG_ACTIVATION_TOKEN_V1_COMMIT            : u32 : 3;
XDG_ACTIVATION_TOKEN_V1_DESTROY           : u32 : 4;
XDG_ACTIVATION_TOKEN_V1_SET_SERIAL_SINCE  : u32 : 1;
XDG_ACTIVATION_TOKEN_V1_SET_APP_ID_SINCE  : u32 : 1;
XDG_ACTIVATION_TOKEN_V1_SET_SURFACE_SINCE : u32 : 1;
XDG_ACTIVATION_TOKEN_V1_COMMIT_SINCE      : u32 : 1;
XDG_ACTIVATION_TOKEN_V1_DESTROY_SINCE     : u32 : 1;
XDG_ACTIVATION_TOKEN_V1_DONE_SINCE        : u32 : 1;

xdg_activation_token_v1_listener :: struct {
    done := _stubs_.done;

    _stubs_ :: struct {
        done :: (data: *void,
            self: *xdg_activation_token_v1,
            token: *u8) -> void #c_call {}
    }
}


#scope_module
xdg_activation_v1_protocol_init :: () {
    xdg_activation_v1_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: xdg_activation_v1::get_activation_token */
        *xdg_activation_token_v1_interface,   // 1
        /* REQUEST: xdg_activation_v1::activate */
        null,  // 2
        *wl_surface_interface,   // 3
        /* REQUEST: xdg_activation_token_v1::set_serial */
        null,  // 4
        *wl_seat_interface,   // 5
        /* REQUEST: xdg_activation_token_v1::set_app_id */
        null,  // 6
        /* REQUEST: xdg_activation_token_v1::set_surface */
        *wl_surface_interface,   // 7
        /* EVENT: xdg_activation_token_v1::done */
        null,  // 8
    ];

    xdg_activation_v1_requests[0] = .{"destroy", "", xdg_activation_v1_types_storage.data + 0};
    xdg_activation_v1_requests[1] = .{"get_activation_token", "n", xdg_activation_v1_types_storage.data + 1};
    xdg_activation_v1_requests[2] = .{"activate", "so", xdg_activation_v1_types_storage.data + 2};
    xdg_activation_v1_interface = .{
        "xdg_activation_v1", 1,
        xdg_activation_v1_requests.count, xdg_activation_v1_requests.data,
        0, null,
    };

    xdg_activation_token_v1_requests[0] = .{"set_serial", "uo", xdg_activation_v1_types_storage.data + 4};
    xdg_activation_token_v1_requests[1] = .{"set_app_id", "s", xdg_activation_v1_types_storage.data + 6};
    xdg_activation_token_v1_requests[2] = .{"set_surface", "o", xdg_activation_v1_types_storage.data + 7};
    xdg_activation_token_v1_requests[3] = .{"commit", "", xdg_activation_v1_types_storage.data + 0};
    xdg_activation_token_v1_requests[4] = .{"destroy", "", xdg_activation_v1_types_storage.data + 0};
    xdg_activation_token_v1_events[0] = .{"done", "s", xdg_activation_v1_types_storage.data + 8};
    xdg_activation_token_v1_interface = .{
        "xdg_activation_token_v1", 1,
        xdg_activation_token_v1_requests.count, xdg_activation_token_v1_requests.data,
        xdg_activation_token_v1_events.count, xdg_activation_token_v1_events.data,
    };
}


#scope_file
xdg_activation_v1_types_storage: []*wl_interface;

xdg_activation_v1_requests: [3]wl_message;

xdg_activation_token_v1_requests: [5]wl_message;
xdg_activation_token_v1_events  : [1]wl_message;

#assert size_of(xdg_activation_v1) == 0 "wayland-scanner bug: xdg_activation_v1 is non-empty";
#assert size_of(xdg_activation_token_v1) == 0 "wayland-scanner bug: xdg_activation_token_v1 is non-empty";
