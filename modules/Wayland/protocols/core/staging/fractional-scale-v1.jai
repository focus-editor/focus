/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: fractional_scale_v1
 */

wp_fractional_scale_manager_v1_interface: wl_interface;
wp_fractional_scale_manager_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *wp_fractional_scale_manager_v1_interface;

    /* ENUM: wp_fractional_scale_manager_v1::error */
    error_fractional_scale_exists : u32 : 0;

    set_user_data :: inline (self: *wp_fractional_scale_manager_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *wp_fractional_scale_manager_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *wp_fractional_scale_manager_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *wp_fractional_scale_manager_v1) #c_call {
        wl_proxy.marshal_flags(
            self, WP_FRACTIONAL_SCALE_MANAGER_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    get_fractional_scale :: inline (self: *wp_fractional_scale_manager_v1, surface: *wl_surface) -> *wp_fractional_scale_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, WP_FRACTIONAL_SCALE_MANAGER_V1_GET_FRACTIONAL_SCALE,
            *wp_fractional_scale_v1_interface, wl_proxy.get_version(self), 0,
            null, surface);
        return cast(*wp_fractional_scale_v1) ret;
    }
}

WP_FRACTIONAL_SCALE_MANAGER_V1_DESTROY                    : u32 : 0;
WP_FRACTIONAL_SCALE_MANAGER_V1_GET_FRACTIONAL_SCALE       : u32 : 1;
WP_FRACTIONAL_SCALE_MANAGER_V1_DESTROY_SINCE              : u32 : 1;
WP_FRACTIONAL_SCALE_MANAGER_V1_GET_FRACTIONAL_SCALE_SINCE : u32 : 1;

wp_fractional_scale_v1_interface: wl_interface;
wp_fractional_scale_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *wp_fractional_scale_v1_interface;

    set_user_data :: inline (self: *wp_fractional_scale_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *wp_fractional_scale_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *wp_fractional_scale_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *wp_fractional_scale_v1) #c_call {
        wl_proxy.marshal_flags(
            self, WP_FRACTIONAL_SCALE_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *wp_fractional_scale_v1, listener: *wp_fractional_scale_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

WP_FRACTIONAL_SCALE_V1_DESTROY               : u32 : 0;
WP_FRACTIONAL_SCALE_V1_DESTROY_SINCE         : u32 : 1;
WP_FRACTIONAL_SCALE_V1_PREFERRED_SCALE_SINCE : u32 : 1;

wp_fractional_scale_v1_listener :: struct {
    preferred_scale := _stubs_.preferred_scale;

    _stubs_ :: struct {
        preferred_scale :: (data: *void,
            self: *wp_fractional_scale_v1,
            scale: u32) -> void #c_call {}
    }
}


#scope_module
fractional_scale_v1_protocol_init :: () {
    fractional_scale_v1_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: wp_fractional_scale_manager_v1::get_fractional_scale */
        *wp_fractional_scale_v1_interface,   // 1
        *wl_surface_interface,   // 2
        /* EVENT: wp_fractional_scale_v1::preferred_scale */
        null,  // 3
    ];

    wp_fractional_scale_manager_v1_requests[0] = .{"destroy", "", fractional_scale_v1_types_storage.data + 0};
    wp_fractional_scale_manager_v1_requests[1] = .{"get_fractional_scale", "no", fractional_scale_v1_types_storage.data + 1};
    wp_fractional_scale_manager_v1_interface = .{
        "wp_fractional_scale_manager_v1", 1,
        wp_fractional_scale_manager_v1_requests.count, wp_fractional_scale_manager_v1_requests.data,
        0, null,
    };

    wp_fractional_scale_v1_requests[0] = .{"destroy", "", fractional_scale_v1_types_storage.data + 0};
    wp_fractional_scale_v1_events[0] = .{"preferred_scale", "u", fractional_scale_v1_types_storage.data + 3};
    wp_fractional_scale_v1_interface = .{
        "wp_fractional_scale_v1", 1,
        wp_fractional_scale_v1_requests.count, wp_fractional_scale_v1_requests.data,
        wp_fractional_scale_v1_events.count, wp_fractional_scale_v1_events.data,
    };
}


#scope_file
fractional_scale_v1_types_storage: []*wl_interface;

wp_fractional_scale_manager_v1_requests: [2]wl_message;

wp_fractional_scale_v1_requests: [1]wl_message;
wp_fractional_scale_v1_events  : [1]wl_message;

#assert size_of(wp_fractional_scale_manager_v1) == 0 "wayland-scanner bug: wp_fractional_scale_manager_v1 is non-empty";
#assert size_of(wp_fractional_scale_v1) == 0 "wayland-scanner bug: wp_fractional_scale_v1 is non-empty";
