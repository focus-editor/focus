/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: single_pixel_buffer_v1
 */

wp_single_pixel_buffer_manager_v1_interface: wl_interface;
wp_single_pixel_buffer_manager_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *wp_single_pixel_buffer_manager_v1_interface;

    set_user_data :: inline (self: *wp_single_pixel_buffer_manager_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *wp_single_pixel_buffer_manager_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *wp_single_pixel_buffer_manager_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *wp_single_pixel_buffer_manager_v1) #c_call {
        wl_proxy.marshal_flags(
            self, WP_SINGLE_PIXEL_BUFFER_MANAGER_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    create_u32_rgba_buffer :: inline (self: *wp_single_pixel_buffer_manager_v1, r: u32, g: u32, b: u32, a: u32) -> *wl_buffer #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, WP_SINGLE_PIXEL_BUFFER_MANAGER_V1_CREATE_U32_RGBA_BUFFER,
            *wl_buffer_interface, wl_proxy.get_version(self), 0,
            null, r, g, b, a);
        return cast(*wl_buffer) ret;
    }
}

WP_SINGLE_PIXEL_BUFFER_MANAGER_V1_DESTROY                      : u32 : 0;
WP_SINGLE_PIXEL_BUFFER_MANAGER_V1_CREATE_U32_RGBA_BUFFER       : u32 : 1;
WP_SINGLE_PIXEL_BUFFER_MANAGER_V1_DESTROY_SINCE                : u32 : 1;
WP_SINGLE_PIXEL_BUFFER_MANAGER_V1_CREATE_U32_RGBA_BUFFER_SINCE : u32 : 1;


#scope_module
single_pixel_buffer_v1_protocol_init :: () {
    single_pixel_buffer_v1_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: wp_single_pixel_buffer_manager_v1::create_u32_rgba_buffer */
        *wl_buffer_interface,   // 1
        null,  // 2
        null,  // 3
        null,  // 4
        null,  // 5
    ];

    wp_single_pixel_buffer_manager_v1_requests[0] = .{"destroy", "", single_pixel_buffer_v1_types_storage.data + 0};
    wp_single_pixel_buffer_manager_v1_requests[1] = .{"create_u32_rgba_buffer", "nuuuu", single_pixel_buffer_v1_types_storage.data + 1};
    wp_single_pixel_buffer_manager_v1_interface = .{
        "wp_single_pixel_buffer_manager_v1", 1,
        wp_single_pixel_buffer_manager_v1_requests.count, wp_single_pixel_buffer_manager_v1_requests.data,
        0, null,
    };
}


#scope_file
single_pixel_buffer_v1_types_storage: []*wl_interface;

wp_single_pixel_buffer_manager_v1_requests: [2]wl_message;

#assert size_of(wp_single_pixel_buffer_manager_v1) == 0 "wayland-scanner bug: wp_single_pixel_buffer_manager_v1 is non-empty";
