/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: pointer_gestures_unstable_v1
 */

zwp_pointer_gestures_v1_interface: wl_interface;
zwp_pointer_gestures_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_pointer_gestures_v1_interface;

    set_user_data :: inline (self: *zwp_pointer_gestures_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_pointer_gestures_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_pointer_gestures_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_pointer_gestures_v1) #c_call {
        wl_proxy.destroy(self);
    }

    get_swipe_gesture :: inline (self: *zwp_pointer_gestures_v1, pointer: *wl_pointer) -> *zwp_pointer_gesture_swipe_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ZWP_POINTER_GESTURES_V1_GET_SWIPE_GESTURE,
            *zwp_pointer_gesture_swipe_v1_interface, wl_proxy.get_version(self), 0,
            null, pointer);
        return cast(*zwp_pointer_gesture_swipe_v1) ret;
    }

    get_pinch_gesture :: inline (self: *zwp_pointer_gestures_v1, pointer: *wl_pointer) -> *zwp_pointer_gesture_pinch_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ZWP_POINTER_GESTURES_V1_GET_PINCH_GESTURE,
            *zwp_pointer_gesture_pinch_v1_interface, wl_proxy.get_version(self), 0,
            null, pointer);
        return cast(*zwp_pointer_gesture_pinch_v1) ret;
    }

    release :: inline (self: *zwp_pointer_gestures_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_POINTER_GESTURES_V1_RELEASE,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    get_hold_gesture :: inline (self: *zwp_pointer_gestures_v1, pointer: *wl_pointer) -> *zwp_pointer_gesture_hold_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ZWP_POINTER_GESTURES_V1_GET_HOLD_GESTURE,
            *zwp_pointer_gesture_hold_v1_interface, wl_proxy.get_version(self), 0,
            null, pointer);
        return cast(*zwp_pointer_gesture_hold_v1) ret;
    }
}

ZWP_POINTER_GESTURES_V1_GET_SWIPE_GESTURE       : u32 : 0;
ZWP_POINTER_GESTURES_V1_GET_PINCH_GESTURE       : u32 : 1;
ZWP_POINTER_GESTURES_V1_RELEASE                 : u32 : 2;
ZWP_POINTER_GESTURES_V1_GET_HOLD_GESTURE        : u32 : 3;
ZWP_POINTER_GESTURES_V1_GET_SWIPE_GESTURE_SINCE : u32 : 1;
ZWP_POINTER_GESTURES_V1_GET_PINCH_GESTURE_SINCE : u32 : 1;
ZWP_POINTER_GESTURES_V1_RELEASE_SINCE           : u32 : 2;
ZWP_POINTER_GESTURES_V1_GET_HOLD_GESTURE_SINCE  : u32 : 3;

zwp_pointer_gesture_swipe_v1_interface: wl_interface;
zwp_pointer_gesture_swipe_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_pointer_gesture_swipe_v1_interface;

    set_user_data :: inline (self: *zwp_pointer_gesture_swipe_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_pointer_gesture_swipe_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_pointer_gesture_swipe_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_pointer_gesture_swipe_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_POINTER_GESTURE_SWIPE_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *zwp_pointer_gesture_swipe_v1, listener: *zwp_pointer_gesture_swipe_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_POINTER_GESTURE_SWIPE_V1_DESTROY       : u32 : 0;
ZWP_POINTER_GESTURE_SWIPE_V1_DESTROY_SINCE : u32 : 1;
ZWP_POINTER_GESTURE_SWIPE_V1_BEGIN_SINCE   : u32 : 1;
ZWP_POINTER_GESTURE_SWIPE_V1_UPDATE_SINCE  : u32 : 1;
ZWP_POINTER_GESTURE_SWIPE_V1_END_SINCE     : u32 : 1;

zwp_pointer_gesture_swipe_v1_listener :: struct {
    begin  := _stubs_.begin;
    update := _stubs_.update;
    end    := _stubs_.end;

    _stubs_ :: struct {
        begin :: (data: *void,
            self: *zwp_pointer_gesture_swipe_v1,
            serial: u32,
            time: u32,
            surface: *wl_surface,
            fingers: u32) -> void #c_call {}
        update :: (data: *void,
            self: *zwp_pointer_gesture_swipe_v1,
            time: u32,
            dx: wl_fixed_t,
            dy: wl_fixed_t) -> void #c_call {}
        end :: (data: *void,
            self: *zwp_pointer_gesture_swipe_v1,
            serial: u32,
            time: u32,
            cancelled: s32) -> void #c_call {}
    }
}

zwp_pointer_gesture_pinch_v1_interface: wl_interface;
zwp_pointer_gesture_pinch_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_pointer_gesture_pinch_v1_interface;

    set_user_data :: inline (self: *zwp_pointer_gesture_pinch_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_pointer_gesture_pinch_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_pointer_gesture_pinch_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_pointer_gesture_pinch_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_POINTER_GESTURE_PINCH_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *zwp_pointer_gesture_pinch_v1, listener: *zwp_pointer_gesture_pinch_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_POINTER_GESTURE_PINCH_V1_DESTROY       : u32 : 0;
ZWP_POINTER_GESTURE_PINCH_V1_DESTROY_SINCE : u32 : 1;
ZWP_POINTER_GESTURE_PINCH_V1_BEGIN_SINCE   : u32 : 1;
ZWP_POINTER_GESTURE_PINCH_V1_UPDATE_SINCE  : u32 : 1;
ZWP_POINTER_GESTURE_PINCH_V1_END_SINCE     : u32 : 1;

zwp_pointer_gesture_pinch_v1_listener :: struct {
    begin  := _stubs_.begin;
    update := _stubs_.update;
    end    := _stubs_.end;

    _stubs_ :: struct {
        begin :: (data: *void,
            self: *zwp_pointer_gesture_pinch_v1,
            serial: u32,
            time: u32,
            surface: *wl_surface,
            fingers: u32) -> void #c_call {}
        update :: (data: *void,
            self: *zwp_pointer_gesture_pinch_v1,
            time: u32,
            dx: wl_fixed_t,
            dy: wl_fixed_t,
            scale: wl_fixed_t,
            rotation: wl_fixed_t) -> void #c_call {}
        end :: (data: *void,
            self: *zwp_pointer_gesture_pinch_v1,
            serial: u32,
            time: u32,
            cancelled: s32) -> void #c_call {}
    }
}

zwp_pointer_gesture_hold_v1_interface: wl_interface;
zwp_pointer_gesture_hold_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_pointer_gesture_hold_v1_interface;

    set_user_data :: inline (self: *zwp_pointer_gesture_hold_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_pointer_gesture_hold_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_pointer_gesture_hold_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_pointer_gesture_hold_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_POINTER_GESTURE_HOLD_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *zwp_pointer_gesture_hold_v1, listener: *zwp_pointer_gesture_hold_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_POINTER_GESTURE_HOLD_V1_DESTROY       : u32 : 0;
ZWP_POINTER_GESTURE_HOLD_V1_DESTROY_SINCE : u32 : 3;
ZWP_POINTER_GESTURE_HOLD_V1_BEGIN_SINCE   : u32 : 3;
ZWP_POINTER_GESTURE_HOLD_V1_END_SINCE     : u32 : 3;

zwp_pointer_gesture_hold_v1_listener :: struct {
    begin := _stubs_.begin;
    end   := _stubs_.end;

    _stubs_ :: struct {
        begin :: (data: *void,
            self: *zwp_pointer_gesture_hold_v1,
            serial: u32,
            time: u32,
            surface: *wl_surface,
            fingers: u32) -> void #c_call {}
        end :: (data: *void,
            self: *zwp_pointer_gesture_hold_v1,
            serial: u32,
            time: u32,
            cancelled: s32) -> void #c_call {}
    }
}


#scope_module
pointer_gestures_unstable_v1_protocol_init :: () {
    pointer_gestures_unstable_v1_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: zwp_pointer_gestures_v1::get_swipe_gesture */
        *zwp_pointer_gesture_swipe_v1_interface,   // 1
        *wl_pointer_interface,   // 2
        /* REQUEST: zwp_pointer_gestures_v1::get_pinch_gesture */
        *zwp_pointer_gesture_pinch_v1_interface,   // 3
        *wl_pointer_interface,   // 4
        /* REQUEST: zwp_pointer_gestures_v1::get_hold_gesture */
        *zwp_pointer_gesture_hold_v1_interface,   // 5
        *wl_pointer_interface,   // 6
        /* EVENT: zwp_pointer_gesture_swipe_v1::begin */
        null,  // 7
        null,  // 8
        *wl_surface_interface,  // 9
        null,  // 10
        /* EVENT: zwp_pointer_gesture_swipe_v1::update */
        null,  // 11
        null,  // 12
        null,  // 13
        /* EVENT: zwp_pointer_gesture_swipe_v1::end */
        null,  // 14
        null,  // 15
        null,  // 16
        /* EVENT: zwp_pointer_gesture_pinch_v1::begin */
        null,  // 17
        null,  // 18
        *wl_surface_interface,  // 19
        null,  // 20
        /* EVENT: zwp_pointer_gesture_pinch_v1::update */
        null,  // 21
        null,  // 22
        null,  // 23
        null,  // 24
        null,  // 25
        /* EVENT: zwp_pointer_gesture_pinch_v1::end */
        null,  // 26
        null,  // 27
        null,  // 28
        /* EVENT: zwp_pointer_gesture_hold_v1::begin */
        null,  // 29
        null,  // 30
        *wl_surface_interface,  // 31
        null,  // 32
        /* EVENT: zwp_pointer_gesture_hold_v1::end */
        null,  // 33
        null,  // 34
        null,  // 35
    ];

    zwp_pointer_gestures_v1_requests[0] = .{"get_swipe_gesture", "no", pointer_gestures_unstable_v1_types_storage.data + 1};
    zwp_pointer_gestures_v1_requests[1] = .{"get_pinch_gesture", "no", pointer_gestures_unstable_v1_types_storage.data + 3};
    zwp_pointer_gestures_v1_requests[2] = .{"release", "", pointer_gestures_unstable_v1_types_storage.data + 0};
    zwp_pointer_gestures_v1_requests[3] = .{"get_hold_gesture", "no", pointer_gestures_unstable_v1_types_storage.data + 5};
    zwp_pointer_gestures_v1_interface = .{
        "zwp_pointer_gestures_v1", 3,
        zwp_pointer_gestures_v1_requests.count, zwp_pointer_gestures_v1_requests.data,
        0, null,
    };

    zwp_pointer_gesture_swipe_v1_requests[0] = .{"destroy", "", pointer_gestures_unstable_v1_types_storage.data + 0};
    zwp_pointer_gesture_swipe_v1_events[0] = .{"begin", "uuou", pointer_gestures_unstable_v1_types_storage.data + 7};
    zwp_pointer_gesture_swipe_v1_events[1] = .{"update", "uff", pointer_gestures_unstable_v1_types_storage.data + 11};
    zwp_pointer_gesture_swipe_v1_events[2] = .{"end", "uui", pointer_gestures_unstable_v1_types_storage.data + 14};
    zwp_pointer_gesture_swipe_v1_interface = .{
        "zwp_pointer_gesture_swipe_v1", 2,
        zwp_pointer_gesture_swipe_v1_requests.count, zwp_pointer_gesture_swipe_v1_requests.data,
        zwp_pointer_gesture_swipe_v1_events.count, zwp_pointer_gesture_swipe_v1_events.data,
    };

    zwp_pointer_gesture_pinch_v1_requests[0] = .{"destroy", "", pointer_gestures_unstable_v1_types_storage.data + 0};
    zwp_pointer_gesture_pinch_v1_events[0] = .{"begin", "uuou", pointer_gestures_unstable_v1_types_storage.data + 17};
    zwp_pointer_gesture_pinch_v1_events[1] = .{"update", "uffff", pointer_gestures_unstable_v1_types_storage.data + 21};
    zwp_pointer_gesture_pinch_v1_events[2] = .{"end", "uui", pointer_gestures_unstable_v1_types_storage.data + 26};
    zwp_pointer_gesture_pinch_v1_interface = .{
        "zwp_pointer_gesture_pinch_v1", 2,
        zwp_pointer_gesture_pinch_v1_requests.count, zwp_pointer_gesture_pinch_v1_requests.data,
        zwp_pointer_gesture_pinch_v1_events.count, zwp_pointer_gesture_pinch_v1_events.data,
    };

    zwp_pointer_gesture_hold_v1_requests[0] = .{"destroy", "", pointer_gestures_unstable_v1_types_storage.data + 0};
    zwp_pointer_gesture_hold_v1_events[0] = .{"begin", "uuou", pointer_gestures_unstable_v1_types_storage.data + 29};
    zwp_pointer_gesture_hold_v1_events[1] = .{"end", "uui", pointer_gestures_unstable_v1_types_storage.data + 33};
    zwp_pointer_gesture_hold_v1_interface = .{
        "zwp_pointer_gesture_hold_v1", 3,
        zwp_pointer_gesture_hold_v1_requests.count, zwp_pointer_gesture_hold_v1_requests.data,
        zwp_pointer_gesture_hold_v1_events.count, zwp_pointer_gesture_hold_v1_events.data,
    };
}


#scope_file
pointer_gestures_unstable_v1_types_storage: []*wl_interface;

zwp_pointer_gestures_v1_requests: [4]wl_message;

zwp_pointer_gesture_swipe_v1_requests: [1]wl_message;
zwp_pointer_gesture_swipe_v1_events  : [3]wl_message;

zwp_pointer_gesture_pinch_v1_requests: [1]wl_message;
zwp_pointer_gesture_pinch_v1_events  : [3]wl_message;

zwp_pointer_gesture_hold_v1_requests: [1]wl_message;
zwp_pointer_gesture_hold_v1_events  : [2]wl_message;

#assert size_of(zwp_pointer_gestures_v1) == 0 "wayland-scanner bug: zwp_pointer_gestures_v1 is non-empty";
#assert size_of(zwp_pointer_gesture_swipe_v1) == 0 "wayland-scanner bug: zwp_pointer_gesture_swipe_v1 is non-empty";
#assert size_of(zwp_pointer_gesture_pinch_v1) == 0 "wayland-scanner bug: zwp_pointer_gesture_pinch_v1 is non-empty";
#assert size_of(zwp_pointer_gesture_hold_v1) == 0 "wayland-scanner bug: zwp_pointer_gesture_hold_v1 is non-empty";
