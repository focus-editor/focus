/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: zwp_linux_explicit_synchronization_unstable_v1
 */

zwp_linux_explicit_synchronization_v1_interface: wl_interface;
zwp_linux_explicit_synchronization_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_linux_explicit_synchronization_v1_interface;

    /* ENUM: zwp_linux_explicit_synchronization_v1::error */
    error_synchronization_exists : u32 : 0;

    set_user_data :: inline (self: *zwp_linux_explicit_synchronization_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_linux_explicit_synchronization_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_linux_explicit_synchronization_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_linux_explicit_synchronization_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_LINUX_EXPLICIT_SYNCHRONIZATION_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    get_synchronization :: inline (self: *zwp_linux_explicit_synchronization_v1, surface: *wl_surface) -> *zwp_linux_surface_synchronization_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ZWP_LINUX_EXPLICIT_SYNCHRONIZATION_V1_GET_SYNCHRONIZATION,
            *zwp_linux_surface_synchronization_v1_interface, wl_proxy.get_version(self), 0,
            null, surface);
        return cast(*zwp_linux_surface_synchronization_v1) ret;
    }
}

ZWP_LINUX_EXPLICIT_SYNCHRONIZATION_V1_DESTROY                   : u32 : 0;
ZWP_LINUX_EXPLICIT_SYNCHRONIZATION_V1_GET_SYNCHRONIZATION       : u32 : 1;
ZWP_LINUX_EXPLICIT_SYNCHRONIZATION_V1_DESTROY_SINCE             : u32 : 1;
ZWP_LINUX_EXPLICIT_SYNCHRONIZATION_V1_GET_SYNCHRONIZATION_SINCE : u32 : 1;

zwp_linux_surface_synchronization_v1_interface: wl_interface;
zwp_linux_surface_synchronization_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_linux_surface_synchronization_v1_interface;

    /* ENUM: zwp_linux_surface_synchronization_v1::error */
    error_invalid_fence      : u32 : 0;
    error_duplicate_fence    : u32 : 1;
    error_duplicate_release  : u32 : 2;
    error_no_surface         : u32 : 3;
    error_unsupported_buffer : u32 : 4;
    error_no_buffer          : u32 : 5;

    set_user_data :: inline (self: *zwp_linux_surface_synchronization_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_linux_surface_synchronization_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_linux_surface_synchronization_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_linux_surface_synchronization_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_LINUX_SURFACE_SYNCHRONIZATION_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    set_acquire_fence :: inline (self: *zwp_linux_surface_synchronization_v1, fd: s32) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_LINUX_SURFACE_SYNCHRONIZATION_V1_SET_ACQUIRE_FENCE,
            null, wl_proxy.get_version(self), 0,
            fd);
    }

    get_release :: inline (self: *zwp_linux_surface_synchronization_v1) -> *zwp_linux_buffer_release_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ZWP_LINUX_SURFACE_SYNCHRONIZATION_V1_GET_RELEASE,
            *zwp_linux_buffer_release_v1_interface, wl_proxy.get_version(self), 0,
            null);
        return cast(*zwp_linux_buffer_release_v1) ret;
    }
}

ZWP_LINUX_SURFACE_SYNCHRONIZATION_V1_DESTROY                 : u32 : 0;
ZWP_LINUX_SURFACE_SYNCHRONIZATION_V1_SET_ACQUIRE_FENCE       : u32 : 1;
ZWP_LINUX_SURFACE_SYNCHRONIZATION_V1_GET_RELEASE             : u32 : 2;
ZWP_LINUX_SURFACE_SYNCHRONIZATION_V1_DESTROY_SINCE           : u32 : 1;
ZWP_LINUX_SURFACE_SYNCHRONIZATION_V1_SET_ACQUIRE_FENCE_SINCE : u32 : 1;
ZWP_LINUX_SURFACE_SYNCHRONIZATION_V1_GET_RELEASE_SINCE       : u32 : 1;

zwp_linux_buffer_release_v1_interface: wl_interface;
zwp_linux_buffer_release_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_linux_buffer_release_v1_interface;

    set_user_data :: inline (self: *zwp_linux_buffer_release_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_linux_buffer_release_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_linux_buffer_release_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_linux_buffer_release_v1) #c_call {
        wl_proxy.destroy(self);
    }

    add_listener :: inline (self: *zwp_linux_buffer_release_v1, listener: *zwp_linux_buffer_release_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}
ZWP_LINUX_BUFFER_RELEASE_V1_FENCED_RELEASE_SINCE    : u32 : 1;
ZWP_LINUX_BUFFER_RELEASE_V1_IMMEDIATE_RELEASE_SINCE : u32 : 1;

zwp_linux_buffer_release_v1_listener :: struct {
    fenced_release    := _stubs_.fenced_release;
    immediate_release := _stubs_.immediate_release;

    _stubs_ :: struct {
        fenced_release :: (data: *void,
            self: *zwp_linux_buffer_release_v1,
            fence: s32) -> void #c_call {}
        immediate_release :: (data: *void,
            self: *zwp_linux_buffer_release_v1) -> void #c_call {}
    }
}


#scope_module
zwp_linux_explicit_synchronization_unstable_v1_protocol_init :: () {
    zwp_linux_explicit_synchronization_unstable_v1_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: zwp_linux_explicit_synchronization_v1::get_synchronization */
        *zwp_linux_surface_synchronization_v1_interface,   // 1
        *wl_surface_interface,   // 2
        /* REQUEST: zwp_linux_surface_synchronization_v1::set_acquire_fence */
        null,  // 3
        /* REQUEST: zwp_linux_surface_synchronization_v1::get_release */
        *zwp_linux_buffer_release_v1_interface,   // 4
        /* EVENT: zwp_linux_buffer_release_v1::fenced_release */
        null,  // 5
    ];

    zwp_linux_explicit_synchronization_v1_requests[0] = .{"destroy", "", zwp_linux_explicit_synchronization_unstable_v1_types_storage.data + 0};
    zwp_linux_explicit_synchronization_v1_requests[1] = .{"get_synchronization", "no", zwp_linux_explicit_synchronization_unstable_v1_types_storage.data + 1};
    zwp_linux_explicit_synchronization_v1_interface = .{
        "zwp_linux_explicit_synchronization_v1", 2,
        zwp_linux_explicit_synchronization_v1_requests.count, zwp_linux_explicit_synchronization_v1_requests.data,
        0, null,
    };

    zwp_linux_surface_synchronization_v1_requests[0] = .{"destroy", "", zwp_linux_explicit_synchronization_unstable_v1_types_storage.data + 0};
    zwp_linux_surface_synchronization_v1_requests[1] = .{"set_acquire_fence", "h", zwp_linux_explicit_synchronization_unstable_v1_types_storage.data + 3};
    zwp_linux_surface_synchronization_v1_requests[2] = .{"get_release", "n", zwp_linux_explicit_synchronization_unstable_v1_types_storage.data + 4};
    zwp_linux_surface_synchronization_v1_interface = .{
        "zwp_linux_surface_synchronization_v1", 2,
        zwp_linux_surface_synchronization_v1_requests.count, zwp_linux_surface_synchronization_v1_requests.data,
        0, null,
    };

    zwp_linux_buffer_release_v1_events[0] = .{"fenced_release", "h", zwp_linux_explicit_synchronization_unstable_v1_types_storage.data + 5};
    zwp_linux_buffer_release_v1_events[1] = .{"immediate_release", "", zwp_linux_explicit_synchronization_unstable_v1_types_storage.data + 0};
    zwp_linux_buffer_release_v1_interface = .{
        "zwp_linux_buffer_release_v1", 1,
        0, null,
        zwp_linux_buffer_release_v1_events.count, zwp_linux_buffer_release_v1_events.data,
    };
}


#scope_file
zwp_linux_explicit_synchronization_unstable_v1_types_storage: []*wl_interface;

zwp_linux_explicit_synchronization_v1_requests: [2]wl_message;

zwp_linux_surface_synchronization_v1_requests: [3]wl_message;

zwp_linux_buffer_release_v1_events  : [2]wl_message;

#assert size_of(zwp_linux_explicit_synchronization_v1) == 0 "wayland-scanner bug: zwp_linux_explicit_synchronization_v1 is non-empty";
#assert size_of(zwp_linux_surface_synchronization_v1) == 0 "wayland-scanner bug: zwp_linux_surface_synchronization_v1 is non-empty";
#assert size_of(zwp_linux_buffer_release_v1) == 0 "wayland-scanner bug: zwp_linux_buffer_release_v1 is non-empty";
