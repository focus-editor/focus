/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: text_input_unstable_v3
 */

zwp_text_input_v3_interface: wl_interface;
zwp_text_input_v3 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_text_input_v3_interface;

    /* ENUM: zwp_text_input_v3::change_cause */
    change_cause_input_method : u32 : 0;
    change_cause_other        : u32 : 1;

    /* ENUM: zwp_text_input_v3::content_hint */
    content_hint_none                : u32 : 0x0;
    content_hint_completion          : u32 : 0x1;
    content_hint_spellcheck          : u32 : 0x2;
    content_hint_auto_capitalization : u32 : 0x4;
    content_hint_lowercase           : u32 : 0x8;
    content_hint_uppercase           : u32 : 0x10;
    content_hint_titlecase           : u32 : 0x20;
    content_hint_hidden_text         : u32 : 0x40;
    content_hint_sensitive_data      : u32 : 0x80;
    content_hint_latin               : u32 : 0x100;
    content_hint_multiline           : u32 : 0x200;

    /* ENUM: zwp_text_input_v3::content_purpose */
    content_purpose_normal   : u32 : 0;
    content_purpose_alpha    : u32 : 1;
    content_purpose_digits   : u32 : 2;
    content_purpose_number   : u32 : 3;
    content_purpose_phone    : u32 : 4;
    content_purpose_url      : u32 : 5;
    content_purpose_email    : u32 : 6;
    content_purpose_name     : u32 : 7;
    content_purpose_password : u32 : 8;
    content_purpose_pin      : u32 : 9;
    content_purpose_date     : u32 : 10;
    content_purpose_time     : u32 : 11;
    content_purpose_datetime : u32 : 12;
    content_purpose_terminal : u32 : 13;

    set_user_data :: inline (self: *zwp_text_input_v3, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_text_input_v3) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_text_input_v3) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_text_input_v3) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TEXT_INPUT_V3_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    enable :: inline (self: *zwp_text_input_v3) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TEXT_INPUT_V3_ENABLE,
            null, wl_proxy.get_version(self), 0);
    }

    disable :: inline (self: *zwp_text_input_v3) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TEXT_INPUT_V3_DISABLE,
            null, wl_proxy.get_version(self), 0);
    }

    set_surrounding_text :: inline (self: *zwp_text_input_v3, text: *u8, cursor: s32, anchor: s32) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TEXT_INPUT_V3_SET_SURROUNDING_TEXT,
            null, wl_proxy.get_version(self), 0,
            text, cursor, anchor);
    }

    set_text_change_cause :: inline (self: *zwp_text_input_v3, cause: u32) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TEXT_INPUT_V3_SET_TEXT_CHANGE_CAUSE,
            null, wl_proxy.get_version(self), 0,
            cause);
    }

    set_content_type :: inline (self: *zwp_text_input_v3, hint: u32, purpose: u32) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TEXT_INPUT_V3_SET_CONTENT_TYPE,
            null, wl_proxy.get_version(self), 0,
            hint, purpose);
    }

    set_cursor_rectangle :: inline (self: *zwp_text_input_v3, x: s32, y: s32, width: s32, height: s32) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TEXT_INPUT_V3_SET_CURSOR_RECTANGLE,
            null, wl_proxy.get_version(self), 0,
            x, y, width, height);
    }

    commit :: inline (self: *zwp_text_input_v3) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TEXT_INPUT_V3_COMMIT,
            null, wl_proxy.get_version(self), 0);
    }

    add_listener :: inline (self: *zwp_text_input_v3, listener: *zwp_text_input_v3_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_TEXT_INPUT_V3_DESTROY                       : u32 : 0;
ZWP_TEXT_INPUT_V3_ENABLE                        : u32 : 1;
ZWP_TEXT_INPUT_V3_DISABLE                       : u32 : 2;
ZWP_TEXT_INPUT_V3_SET_SURROUNDING_TEXT          : u32 : 3;
ZWP_TEXT_INPUT_V3_SET_TEXT_CHANGE_CAUSE         : u32 : 4;
ZWP_TEXT_INPUT_V3_SET_CONTENT_TYPE              : u32 : 5;
ZWP_TEXT_INPUT_V3_SET_CURSOR_RECTANGLE          : u32 : 6;
ZWP_TEXT_INPUT_V3_COMMIT                        : u32 : 7;
ZWP_TEXT_INPUT_V3_DESTROY_SINCE                 : u32 : 1;
ZWP_TEXT_INPUT_V3_ENABLE_SINCE                  : u32 : 1;
ZWP_TEXT_INPUT_V3_DISABLE_SINCE                 : u32 : 1;
ZWP_TEXT_INPUT_V3_SET_SURROUNDING_TEXT_SINCE    : u32 : 1;
ZWP_TEXT_INPUT_V3_SET_TEXT_CHANGE_CAUSE_SINCE   : u32 : 1;
ZWP_TEXT_INPUT_V3_SET_CONTENT_TYPE_SINCE        : u32 : 1;
ZWP_TEXT_INPUT_V3_SET_CURSOR_RECTANGLE_SINCE    : u32 : 1;
ZWP_TEXT_INPUT_V3_COMMIT_SINCE                  : u32 : 1;
ZWP_TEXT_INPUT_V3_ENTER_SINCE                   : u32 : 1;
ZWP_TEXT_INPUT_V3_LEAVE_SINCE                   : u32 : 1;
ZWP_TEXT_INPUT_V3_PREEDIT_STRING_SINCE          : u32 : 1;
ZWP_TEXT_INPUT_V3_COMMIT_STRING_SINCE           : u32 : 1;
ZWP_TEXT_INPUT_V3_DELETE_SURROUNDING_TEXT_SINCE : u32 : 1;
ZWP_TEXT_INPUT_V3_DONE_SINCE                    : u32 : 1;

zwp_text_input_v3_listener :: struct {
    enter                   := _stubs_.enter;
    leave                   := _stubs_.leave;
    preedit_string          := _stubs_.preedit_string;
    commit_string           := _stubs_.commit_string;
    delete_surrounding_text := _stubs_.delete_surrounding_text;
    done                    := _stubs_.done;

    _stubs_ :: struct {
        enter :: (data: *void,
            self: *zwp_text_input_v3,
            surface: *wl_surface) -> void #c_call {}
        leave :: (data: *void,
            self: *zwp_text_input_v3,
            surface: *wl_surface) -> void #c_call {}
        preedit_string :: (data: *void,
            self: *zwp_text_input_v3,
            text: *u8,
            cursor_begin: s32,
            cursor_end: s32) -> void #c_call {}
        commit_string :: (data: *void,
            self: *zwp_text_input_v3,
            text: *u8) -> void #c_call {}
        delete_surrounding_text :: (data: *void,
            self: *zwp_text_input_v3,
            before_length: u32,
            after_length: u32) -> void #c_call {}
        done :: (data: *void,
            self: *zwp_text_input_v3,
            serial: u32) -> void #c_call {}
    }
}

zwp_text_input_manager_v3_interface: wl_interface;
zwp_text_input_manager_v3 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_text_input_manager_v3_interface;

    set_user_data :: inline (self: *zwp_text_input_manager_v3, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_text_input_manager_v3) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_text_input_manager_v3) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_text_input_manager_v3) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TEXT_INPUT_MANAGER_V3_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    get_text_input :: inline (self: *zwp_text_input_manager_v3, seat: *wl_seat) -> *zwp_text_input_v3 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ZWP_TEXT_INPUT_MANAGER_V3_GET_TEXT_INPUT,
            *zwp_text_input_v3_interface, wl_proxy.get_version(self), 0,
            null, seat);
        return cast(*zwp_text_input_v3) ret;
    }
}

ZWP_TEXT_INPUT_MANAGER_V3_DESTROY              : u32 : 0;
ZWP_TEXT_INPUT_MANAGER_V3_GET_TEXT_INPUT       : u32 : 1;
ZWP_TEXT_INPUT_MANAGER_V3_DESTROY_SINCE        : u32 : 1;
ZWP_TEXT_INPUT_MANAGER_V3_GET_TEXT_INPUT_SINCE : u32 : 1;


#scope_module
text_input_unstable_v3_protocol_init :: () {
    text_input_unstable_v3_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: zwp_text_input_v3::set_surrounding_text */
        null,  // 1
        null,  // 2
        null,  // 3
        /* REQUEST: zwp_text_input_v3::set_text_change_cause */
        null,  // 4
        /* REQUEST: zwp_text_input_v3::set_content_type */
        null,  // 5
        null,  // 6
        /* REQUEST: zwp_text_input_v3::set_cursor_rectangle */
        null,  // 7
        null,  // 8
        null,  // 9
        null,  // 10
        /* EVENT: zwp_text_input_v3::enter */
        *wl_surface_interface,  // 11
        /* EVENT: zwp_text_input_v3::leave */
        *wl_surface_interface,  // 12
        /* EVENT: zwp_text_input_v3::preedit_string */
        null,  // 13
        null,  // 14
        null,  // 15
        /* EVENT: zwp_text_input_v3::commit_string */
        null,  // 16
        /* EVENT: zwp_text_input_v3::delete_surrounding_text */
        null,  // 17
        null,  // 18
        /* EVENT: zwp_text_input_v3::done */
        null,  // 19
        /* REQUEST: zwp_text_input_manager_v3::get_text_input */
        *zwp_text_input_v3_interface,   // 20
        *wl_seat_interface,   // 21
    ];

    zwp_text_input_v3_requests[0] = .{"destroy", "", text_input_unstable_v3_types_storage.data + 0};
    zwp_text_input_v3_requests[1] = .{"enable", "", text_input_unstable_v3_types_storage.data + 0};
    zwp_text_input_v3_requests[2] = .{"disable", "", text_input_unstable_v3_types_storage.data + 0};
    zwp_text_input_v3_requests[3] = .{"set_surrounding_text", "sii", text_input_unstable_v3_types_storage.data + 1};
    zwp_text_input_v3_requests[4] = .{"set_text_change_cause", "u", text_input_unstable_v3_types_storage.data + 4};
    zwp_text_input_v3_requests[5] = .{"set_content_type", "uu", text_input_unstable_v3_types_storage.data + 5};
    zwp_text_input_v3_requests[6] = .{"set_cursor_rectangle", "iiii", text_input_unstable_v3_types_storage.data + 7};
    zwp_text_input_v3_requests[7] = .{"commit", "", text_input_unstable_v3_types_storage.data + 0};
    zwp_text_input_v3_events[0] = .{"enter", "o", text_input_unstable_v3_types_storage.data + 11};
    zwp_text_input_v3_events[1] = .{"leave", "o", text_input_unstable_v3_types_storage.data + 12};
    zwp_text_input_v3_events[2] = .{"preedit_string", "?sii", text_input_unstable_v3_types_storage.data + 13};
    zwp_text_input_v3_events[3] = .{"commit_string", "?s", text_input_unstable_v3_types_storage.data + 16};
    zwp_text_input_v3_events[4] = .{"delete_surrounding_text", "uu", text_input_unstable_v3_types_storage.data + 17};
    zwp_text_input_v3_events[5] = .{"done", "u", text_input_unstable_v3_types_storage.data + 19};
    zwp_text_input_v3_interface = .{
        "zwp_text_input_v3", 1,
        zwp_text_input_v3_requests.count, zwp_text_input_v3_requests.data,
        zwp_text_input_v3_events.count, zwp_text_input_v3_events.data,
    };

    zwp_text_input_manager_v3_requests[0] = .{"destroy", "", text_input_unstable_v3_types_storage.data + 0};
    zwp_text_input_manager_v3_requests[1] = .{"get_text_input", "no", text_input_unstable_v3_types_storage.data + 20};
    zwp_text_input_manager_v3_interface = .{
        "zwp_text_input_manager_v3", 1,
        zwp_text_input_manager_v3_requests.count, zwp_text_input_manager_v3_requests.data,
        0, null,
    };
}


#scope_file
text_input_unstable_v3_types_storage: []*wl_interface;

zwp_text_input_v3_requests: [8]wl_message;
zwp_text_input_v3_events  : [6]wl_message;

zwp_text_input_manager_v3_requests: [2]wl_message;

#assert size_of(zwp_text_input_v3) == 0 "wayland-scanner bug: zwp_text_input_v3 is non-empty";
#assert size_of(zwp_text_input_manager_v3) == 0 "wayland-scanner bug: zwp_text_input_manager_v3 is non-empty";
