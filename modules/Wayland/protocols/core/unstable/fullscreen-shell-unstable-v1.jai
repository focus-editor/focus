/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: fullscreen_shell_unstable_v1
 */

zwp_fullscreen_shell_v1_interface: wl_interface;
zwp_fullscreen_shell_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_fullscreen_shell_v1_interface;

    /* ENUM: zwp_fullscreen_shell_v1::capability */
    capability_arbitrary_modes : u32 : 1;
    capability_cursor_plane    : u32 : 2;

    /* ENUM: zwp_fullscreen_shell_v1::present_method */
    present_method_default   : u32 : 0;
    present_method_center    : u32 : 1;
    present_method_zoom      : u32 : 2;
    present_method_zoom_crop : u32 : 3;
    present_method_stretch   : u32 : 4;

    /* ENUM: zwp_fullscreen_shell_v1::error */
    error_invalid_method : u32 : 0;
    error_role           : u32 : 1;

    set_user_data :: inline (self: *zwp_fullscreen_shell_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_fullscreen_shell_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_fullscreen_shell_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_fullscreen_shell_v1) #c_call {
        wl_proxy.destroy(self);
    }

    release :: inline (self: *zwp_fullscreen_shell_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_FULLSCREEN_SHELL_V1_RELEASE,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    present_surface :: inline (self: *zwp_fullscreen_shell_v1, surface: *wl_surface, method: u32, output: *wl_output) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_FULLSCREEN_SHELL_V1_PRESENT_SURFACE,
            null, wl_proxy.get_version(self), 0,
            surface, method, output);
    }

    present_surface_for_mode :: inline (self: *zwp_fullscreen_shell_v1, surface: *wl_surface, output: *wl_output, framerate: s32) -> *zwp_fullscreen_shell_mode_feedback_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ZWP_FULLSCREEN_SHELL_V1_PRESENT_SURFACE_FOR_MODE,
            *zwp_fullscreen_shell_mode_feedback_v1_interface, wl_proxy.get_version(self), 0,
            surface, output, framerate, null);
        return cast(*zwp_fullscreen_shell_mode_feedback_v1) ret;
    }

    add_listener :: inline (self: *zwp_fullscreen_shell_v1, listener: *zwp_fullscreen_shell_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_FULLSCREEN_SHELL_V1_RELEASE                        : u32 : 0;
ZWP_FULLSCREEN_SHELL_V1_PRESENT_SURFACE                : u32 : 1;
ZWP_FULLSCREEN_SHELL_V1_PRESENT_SURFACE_FOR_MODE       : u32 : 2;
ZWP_FULLSCREEN_SHELL_V1_RELEASE_SINCE                  : u32 : 1;
ZWP_FULLSCREEN_SHELL_V1_PRESENT_SURFACE_SINCE          : u32 : 1;
ZWP_FULLSCREEN_SHELL_V1_PRESENT_SURFACE_FOR_MODE_SINCE : u32 : 1;
ZWP_FULLSCREEN_SHELL_V1_CAPABILITY_SINCE               : u32 : 1;

zwp_fullscreen_shell_v1_listener :: struct {
    capability := _stubs_.capability;

    _stubs_ :: struct {
        capability :: (data: *void,
            self: *zwp_fullscreen_shell_v1,
            capability: u32) -> void #c_call {}
    }
}

zwp_fullscreen_shell_mode_feedback_v1_interface: wl_interface;
zwp_fullscreen_shell_mode_feedback_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_fullscreen_shell_mode_feedback_v1_interface;

    set_user_data :: inline (self: *zwp_fullscreen_shell_mode_feedback_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_fullscreen_shell_mode_feedback_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_fullscreen_shell_mode_feedback_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_fullscreen_shell_mode_feedback_v1) #c_call {
        wl_proxy.destroy(self);
    }

    add_listener :: inline (self: *zwp_fullscreen_shell_mode_feedback_v1, listener: *zwp_fullscreen_shell_mode_feedback_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}
ZWP_FULLSCREEN_SHELL_MODE_FEEDBACK_V1_MODE_SUCCESSFUL_SINCE   : u32 : 1;
ZWP_FULLSCREEN_SHELL_MODE_FEEDBACK_V1_MODE_FAILED_SINCE       : u32 : 1;
ZWP_FULLSCREEN_SHELL_MODE_FEEDBACK_V1_PRESENT_CANCELLED_SINCE : u32 : 1;

zwp_fullscreen_shell_mode_feedback_v1_listener :: struct {
    mode_successful   := _stubs_.mode_successful;
    mode_failed       := _stubs_.mode_failed;
    present_cancelled := _stubs_.present_cancelled;

    _stubs_ :: struct {
        mode_successful :: (data: *void,
            self: *zwp_fullscreen_shell_mode_feedback_v1) -> void #c_call {}
        mode_failed :: (data: *void,
            self: *zwp_fullscreen_shell_mode_feedback_v1) -> void #c_call {}
        present_cancelled :: (data: *void,
            self: *zwp_fullscreen_shell_mode_feedback_v1) -> void #c_call {}
    }
}


#scope_module
fullscreen_shell_unstable_v1_protocol_init :: () {
    fullscreen_shell_unstable_v1_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: zwp_fullscreen_shell_v1::present_surface */
        *wl_surface_interface,   // 1
        null,  // 2
        *wl_output_interface,   // 3
        /* REQUEST: zwp_fullscreen_shell_v1::present_surface_for_mode */
        *wl_surface_interface,   // 4
        *wl_output_interface,   // 5
        null,  // 6
        *zwp_fullscreen_shell_mode_feedback_v1_interface,   // 7
        /* EVENT: zwp_fullscreen_shell_v1::capability */
        null,  // 8
    ];

    zwp_fullscreen_shell_v1_requests[0] = .{"release", "", fullscreen_shell_unstable_v1_types_storage.data + 0};
    zwp_fullscreen_shell_v1_requests[1] = .{"present_surface", "?ou?o", fullscreen_shell_unstable_v1_types_storage.data + 1};
    zwp_fullscreen_shell_v1_requests[2] = .{"present_surface_for_mode", "ooin", fullscreen_shell_unstable_v1_types_storage.data + 4};
    zwp_fullscreen_shell_v1_events[0] = .{"capability", "u", fullscreen_shell_unstable_v1_types_storage.data + 8};
    zwp_fullscreen_shell_v1_interface = .{
        "zwp_fullscreen_shell_v1", 1,
        zwp_fullscreen_shell_v1_requests.count, zwp_fullscreen_shell_v1_requests.data,
        zwp_fullscreen_shell_v1_events.count, zwp_fullscreen_shell_v1_events.data,
    };

    zwp_fullscreen_shell_mode_feedback_v1_events[0] = .{"mode_successful", "", fullscreen_shell_unstable_v1_types_storage.data + 0};
    zwp_fullscreen_shell_mode_feedback_v1_events[1] = .{"mode_failed", "", fullscreen_shell_unstable_v1_types_storage.data + 0};
    zwp_fullscreen_shell_mode_feedback_v1_events[2] = .{"present_cancelled", "", fullscreen_shell_unstable_v1_types_storage.data + 0};
    zwp_fullscreen_shell_mode_feedback_v1_interface = .{
        "zwp_fullscreen_shell_mode_feedback_v1", 1,
        0, null,
        zwp_fullscreen_shell_mode_feedback_v1_events.count, zwp_fullscreen_shell_mode_feedback_v1_events.data,
    };
}


#scope_file
fullscreen_shell_unstable_v1_types_storage: []*wl_interface;

zwp_fullscreen_shell_v1_requests: [3]wl_message;
zwp_fullscreen_shell_v1_events  : [1]wl_message;

zwp_fullscreen_shell_mode_feedback_v1_events  : [3]wl_message;

#assert size_of(zwp_fullscreen_shell_v1) == 0 "wayland-scanner bug: zwp_fullscreen_shell_v1 is non-empty";
#assert size_of(zwp_fullscreen_shell_mode_feedback_v1) == 0 "wayland-scanner bug: zwp_fullscreen_shell_mode_feedback_v1 is non-empty";
