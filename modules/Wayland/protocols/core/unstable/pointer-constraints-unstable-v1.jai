/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: pointer_constraints_unstable_v1
 */

zwp_pointer_constraints_v1_interface: wl_interface;
zwp_pointer_constraints_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_pointer_constraints_v1_interface;

    /* ENUM: zwp_pointer_constraints_v1::error */
    error_already_constrained : u32 : 1;

    /* ENUM: zwp_pointer_constraints_v1::lifetime */
    lifetime_oneshot    : u32 : 1;
    lifetime_persistent : u32 : 2;

    set_user_data :: inline (self: *zwp_pointer_constraints_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_pointer_constraints_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_pointer_constraints_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_pointer_constraints_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_POINTER_CONSTRAINTS_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    lock_pointer :: inline (self: *zwp_pointer_constraints_v1, surface: *wl_surface, pointer: *wl_pointer, region: *wl_region, lifetime: u32) -> *zwp_locked_pointer_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ZWP_POINTER_CONSTRAINTS_V1_LOCK_POINTER,
            *zwp_locked_pointer_v1_interface, wl_proxy.get_version(self), 0,
            null, surface, pointer, region, lifetime);
        return cast(*zwp_locked_pointer_v1) ret;
    }

    confine_pointer :: inline (self: *zwp_pointer_constraints_v1, surface: *wl_surface, pointer: *wl_pointer, region: *wl_region, lifetime: u32) -> *zwp_confined_pointer_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ZWP_POINTER_CONSTRAINTS_V1_CONFINE_POINTER,
            *zwp_confined_pointer_v1_interface, wl_proxy.get_version(self), 0,
            null, surface, pointer, region, lifetime);
        return cast(*zwp_confined_pointer_v1) ret;
    }
}

ZWP_POINTER_CONSTRAINTS_V1_DESTROY               : u32 : 0;
ZWP_POINTER_CONSTRAINTS_V1_LOCK_POINTER          : u32 : 1;
ZWP_POINTER_CONSTRAINTS_V1_CONFINE_POINTER       : u32 : 2;
ZWP_POINTER_CONSTRAINTS_V1_DESTROY_SINCE         : u32 : 1;
ZWP_POINTER_CONSTRAINTS_V1_LOCK_POINTER_SINCE    : u32 : 1;
ZWP_POINTER_CONSTRAINTS_V1_CONFINE_POINTER_SINCE : u32 : 1;

zwp_locked_pointer_v1_interface: wl_interface;
zwp_locked_pointer_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_locked_pointer_v1_interface;

    set_user_data :: inline (self: *zwp_locked_pointer_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_locked_pointer_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_locked_pointer_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_locked_pointer_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_LOCKED_POINTER_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    set_cursor_position_hint :: inline (self: *zwp_locked_pointer_v1, surface_x: wl_fixed_t, surface_y: wl_fixed_t) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_LOCKED_POINTER_V1_SET_CURSOR_POSITION_HINT,
            null, wl_proxy.get_version(self), 0,
            surface_x, surface_y);
    }

    set_region :: inline (self: *zwp_locked_pointer_v1, region: *wl_region) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_LOCKED_POINTER_V1_SET_REGION,
            null, wl_proxy.get_version(self), 0,
            region);
    }

    add_listener :: inline (self: *zwp_locked_pointer_v1, listener: *zwp_locked_pointer_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_LOCKED_POINTER_V1_DESTROY                        : u32 : 0;
ZWP_LOCKED_POINTER_V1_SET_CURSOR_POSITION_HINT       : u32 : 1;
ZWP_LOCKED_POINTER_V1_SET_REGION                     : u32 : 2;
ZWP_LOCKED_POINTER_V1_DESTROY_SINCE                  : u32 : 1;
ZWP_LOCKED_POINTER_V1_SET_CURSOR_POSITION_HINT_SINCE : u32 : 1;
ZWP_LOCKED_POINTER_V1_SET_REGION_SINCE               : u32 : 1;
ZWP_LOCKED_POINTER_V1_LOCKED_SINCE                   : u32 : 1;
ZWP_LOCKED_POINTER_V1_UNLOCKED_SINCE                 : u32 : 1;

zwp_locked_pointer_v1_listener :: struct {
    locked   := _stubs_.locked;
    unlocked := _stubs_.unlocked;

    _stubs_ :: struct {
        locked :: (data: *void,
            self: *zwp_locked_pointer_v1) -> void #c_call {}
        unlocked :: (data: *void,
            self: *zwp_locked_pointer_v1) -> void #c_call {}
    }
}

zwp_confined_pointer_v1_interface: wl_interface;
zwp_confined_pointer_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_confined_pointer_v1_interface;

    set_user_data :: inline (self: *zwp_confined_pointer_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_confined_pointer_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_confined_pointer_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_confined_pointer_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_CONFINED_POINTER_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    set_region :: inline (self: *zwp_confined_pointer_v1, region: *wl_region) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_CONFINED_POINTER_V1_SET_REGION,
            null, wl_proxy.get_version(self), 0,
            region);
    }

    add_listener :: inline (self: *zwp_confined_pointer_v1, listener: *zwp_confined_pointer_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_CONFINED_POINTER_V1_DESTROY          : u32 : 0;
ZWP_CONFINED_POINTER_V1_SET_REGION       : u32 : 1;
ZWP_CONFINED_POINTER_V1_DESTROY_SINCE    : u32 : 1;
ZWP_CONFINED_POINTER_V1_SET_REGION_SINCE : u32 : 1;
ZWP_CONFINED_POINTER_V1_CONFINED_SINCE   : u32 : 1;
ZWP_CONFINED_POINTER_V1_UNCONFINED_SINCE : u32 : 1;

zwp_confined_pointer_v1_listener :: struct {
    confined   := _stubs_.confined;
    unconfined := _stubs_.unconfined;

    _stubs_ :: struct {
        confined :: (data: *void,
            self: *zwp_confined_pointer_v1) -> void #c_call {}
        unconfined :: (data: *void,
            self: *zwp_confined_pointer_v1) -> void #c_call {}
    }
}


#scope_module
pointer_constraints_unstable_v1_protocol_init :: () {
    pointer_constraints_unstable_v1_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: zwp_pointer_constraints_v1::lock_pointer */
        *zwp_locked_pointer_v1_interface,   // 1
        *wl_surface_interface,   // 2
        *wl_pointer_interface,   // 3
        *wl_region_interface,   // 4
        null,  // 5
        /* REQUEST: zwp_pointer_constraints_v1::confine_pointer */
        *zwp_confined_pointer_v1_interface,   // 6
        *wl_surface_interface,   // 7
        *wl_pointer_interface,   // 8
        *wl_region_interface,   // 9
        null,  // 10
        /* REQUEST: zwp_locked_pointer_v1::set_cursor_position_hint */
        null,  // 11
        null,  // 12
        /* REQUEST: zwp_locked_pointer_v1::set_region */
        *wl_region_interface,   // 13
        /* REQUEST: zwp_confined_pointer_v1::set_region */
        *wl_region_interface,   // 14
    ];

    zwp_pointer_constraints_v1_requests[0] = .{"destroy", "", pointer_constraints_unstable_v1_types_storage.data + 0};
    zwp_pointer_constraints_v1_requests[1] = .{"lock_pointer", "noo?ou", pointer_constraints_unstable_v1_types_storage.data + 1};
    zwp_pointer_constraints_v1_requests[2] = .{"confine_pointer", "noo?ou", pointer_constraints_unstable_v1_types_storage.data + 6};
    zwp_pointer_constraints_v1_interface = .{
        "zwp_pointer_constraints_v1", 1,
        zwp_pointer_constraints_v1_requests.count, zwp_pointer_constraints_v1_requests.data,
        0, null,
    };

    zwp_locked_pointer_v1_requests[0] = .{"destroy", "", pointer_constraints_unstable_v1_types_storage.data + 0};
    zwp_locked_pointer_v1_requests[1] = .{"set_cursor_position_hint", "ff", pointer_constraints_unstable_v1_types_storage.data + 11};
    zwp_locked_pointer_v1_requests[2] = .{"set_region", "?o", pointer_constraints_unstable_v1_types_storage.data + 13};
    zwp_locked_pointer_v1_events[0] = .{"locked", "", pointer_constraints_unstable_v1_types_storage.data + 0};
    zwp_locked_pointer_v1_events[1] = .{"unlocked", "", pointer_constraints_unstable_v1_types_storage.data + 0};
    zwp_locked_pointer_v1_interface = .{
        "zwp_locked_pointer_v1", 1,
        zwp_locked_pointer_v1_requests.count, zwp_locked_pointer_v1_requests.data,
        zwp_locked_pointer_v1_events.count, zwp_locked_pointer_v1_events.data,
    };

    zwp_confined_pointer_v1_requests[0] = .{"destroy", "", pointer_constraints_unstable_v1_types_storage.data + 0};
    zwp_confined_pointer_v1_requests[1] = .{"set_region", "?o", pointer_constraints_unstable_v1_types_storage.data + 14};
    zwp_confined_pointer_v1_events[0] = .{"confined", "", pointer_constraints_unstable_v1_types_storage.data + 0};
    zwp_confined_pointer_v1_events[1] = .{"unconfined", "", pointer_constraints_unstable_v1_types_storage.data + 0};
    zwp_confined_pointer_v1_interface = .{
        "zwp_confined_pointer_v1", 1,
        zwp_confined_pointer_v1_requests.count, zwp_confined_pointer_v1_requests.data,
        zwp_confined_pointer_v1_events.count, zwp_confined_pointer_v1_events.data,
    };
}


#scope_file
pointer_constraints_unstable_v1_types_storage: []*wl_interface;

zwp_pointer_constraints_v1_requests: [3]wl_message;

zwp_locked_pointer_v1_requests: [3]wl_message;
zwp_locked_pointer_v1_events  : [2]wl_message;

zwp_confined_pointer_v1_requests: [2]wl_message;
zwp_confined_pointer_v1_events  : [2]wl_message;

#assert size_of(zwp_pointer_constraints_v1) == 0 "wayland-scanner bug: zwp_pointer_constraints_v1 is non-empty";
#assert size_of(zwp_locked_pointer_v1) == 0 "wayland-scanner bug: zwp_locked_pointer_v1 is non-empty";
#assert size_of(zwp_confined_pointer_v1) == 0 "wayland-scanner bug: zwp_confined_pointer_v1 is non-empty";
