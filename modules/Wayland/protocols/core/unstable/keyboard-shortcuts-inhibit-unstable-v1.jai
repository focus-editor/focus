/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: keyboard_shortcuts_inhibit_unstable_v1
 */

zwp_keyboard_shortcuts_inhibit_manager_v1_interface: wl_interface;
zwp_keyboard_shortcuts_inhibit_manager_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_keyboard_shortcuts_inhibit_manager_v1_interface;

    /* ENUM: zwp_keyboard_shortcuts_inhibit_manager_v1::error */
    error_already_inhibited : u32 : 0;

    set_user_data :: inline (self: *zwp_keyboard_shortcuts_inhibit_manager_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_keyboard_shortcuts_inhibit_manager_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_keyboard_shortcuts_inhibit_manager_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_keyboard_shortcuts_inhibit_manager_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_KEYBOARD_SHORTCUTS_INHIBIT_MANAGER_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    inhibit_shortcuts :: inline (self: *zwp_keyboard_shortcuts_inhibit_manager_v1, surface: *wl_surface, seat: *wl_seat) -> *zwp_keyboard_shortcuts_inhibitor_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ZWP_KEYBOARD_SHORTCUTS_INHIBIT_MANAGER_V1_INHIBIT_SHORTCUTS,
            *zwp_keyboard_shortcuts_inhibitor_v1_interface, wl_proxy.get_version(self), 0,
            null, surface, seat);
        return cast(*zwp_keyboard_shortcuts_inhibitor_v1) ret;
    }
}

ZWP_KEYBOARD_SHORTCUTS_INHIBIT_MANAGER_V1_DESTROY                 : u32 : 0;
ZWP_KEYBOARD_SHORTCUTS_INHIBIT_MANAGER_V1_INHIBIT_SHORTCUTS       : u32 : 1;
ZWP_KEYBOARD_SHORTCUTS_INHIBIT_MANAGER_V1_DESTROY_SINCE           : u32 : 1;
ZWP_KEYBOARD_SHORTCUTS_INHIBIT_MANAGER_V1_INHIBIT_SHORTCUTS_SINCE : u32 : 1;

zwp_keyboard_shortcuts_inhibitor_v1_interface: wl_interface;
zwp_keyboard_shortcuts_inhibitor_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_keyboard_shortcuts_inhibitor_v1_interface;

    set_user_data :: inline (self: *zwp_keyboard_shortcuts_inhibitor_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_keyboard_shortcuts_inhibitor_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_keyboard_shortcuts_inhibitor_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_keyboard_shortcuts_inhibitor_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_KEYBOARD_SHORTCUTS_INHIBITOR_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *zwp_keyboard_shortcuts_inhibitor_v1, listener: *zwp_keyboard_shortcuts_inhibitor_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_KEYBOARD_SHORTCUTS_INHIBITOR_V1_DESTROY        : u32 : 0;
ZWP_KEYBOARD_SHORTCUTS_INHIBITOR_V1_DESTROY_SINCE  : u32 : 1;
ZWP_KEYBOARD_SHORTCUTS_INHIBITOR_V1_ACTIVE_SINCE   : u32 : 1;
ZWP_KEYBOARD_SHORTCUTS_INHIBITOR_V1_INACTIVE_SINCE : u32 : 1;

zwp_keyboard_shortcuts_inhibitor_v1_listener :: struct {
    active   := _stubs_.active;
    inactive := _stubs_.inactive;

    _stubs_ :: struct {
        active :: (data: *void,
            self: *zwp_keyboard_shortcuts_inhibitor_v1) -> void #c_call {}
        inactive :: (data: *void,
            self: *zwp_keyboard_shortcuts_inhibitor_v1) -> void #c_call {}
    }
}


#scope_module
keyboard_shortcuts_inhibit_unstable_v1_protocol_init :: () {
    keyboard_shortcuts_inhibit_unstable_v1_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: zwp_keyboard_shortcuts_inhibit_manager_v1::inhibit_shortcuts */
        *zwp_keyboard_shortcuts_inhibitor_v1_interface,   // 1
        *wl_surface_interface,   // 2
        *wl_seat_interface,   // 3
    ];

    zwp_keyboard_shortcuts_inhibit_manager_v1_requests[0] = .{"destroy", "", keyboard_shortcuts_inhibit_unstable_v1_types_storage.data + 0};
    zwp_keyboard_shortcuts_inhibit_manager_v1_requests[1] = .{"inhibit_shortcuts", "noo", keyboard_shortcuts_inhibit_unstable_v1_types_storage.data + 1};
    zwp_keyboard_shortcuts_inhibit_manager_v1_interface = .{
        "zwp_keyboard_shortcuts_inhibit_manager_v1", 1,
        zwp_keyboard_shortcuts_inhibit_manager_v1_requests.count, zwp_keyboard_shortcuts_inhibit_manager_v1_requests.data,
        0, null,
    };

    zwp_keyboard_shortcuts_inhibitor_v1_requests[0] = .{"destroy", "", keyboard_shortcuts_inhibit_unstable_v1_types_storage.data + 0};
    zwp_keyboard_shortcuts_inhibitor_v1_events[0] = .{"active", "", keyboard_shortcuts_inhibit_unstable_v1_types_storage.data + 0};
    zwp_keyboard_shortcuts_inhibitor_v1_events[1] = .{"inactive", "", keyboard_shortcuts_inhibit_unstable_v1_types_storage.data + 0};
    zwp_keyboard_shortcuts_inhibitor_v1_interface = .{
        "zwp_keyboard_shortcuts_inhibitor_v1", 1,
        zwp_keyboard_shortcuts_inhibitor_v1_requests.count, zwp_keyboard_shortcuts_inhibitor_v1_requests.data,
        zwp_keyboard_shortcuts_inhibitor_v1_events.count, zwp_keyboard_shortcuts_inhibitor_v1_events.data,
    };
}


#scope_file
keyboard_shortcuts_inhibit_unstable_v1_types_storage: []*wl_interface;

zwp_keyboard_shortcuts_inhibit_manager_v1_requests: [2]wl_message;

zwp_keyboard_shortcuts_inhibitor_v1_requests: [1]wl_message;
zwp_keyboard_shortcuts_inhibitor_v1_events  : [2]wl_message;

#assert size_of(zwp_keyboard_shortcuts_inhibit_manager_v1) == 0 "wayland-scanner bug: zwp_keyboard_shortcuts_inhibit_manager_v1 is non-empty";
#assert size_of(zwp_keyboard_shortcuts_inhibitor_v1) == 0 "wayland-scanner bug: zwp_keyboard_shortcuts_inhibitor_v1 is non-empty";
