/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: relative_pointer_unstable_v1
 */

zwp_relative_pointer_manager_v1_interface: wl_interface;
zwp_relative_pointer_manager_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_relative_pointer_manager_v1_interface;

    set_user_data :: inline (self: *zwp_relative_pointer_manager_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_relative_pointer_manager_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_relative_pointer_manager_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_relative_pointer_manager_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_RELATIVE_POINTER_MANAGER_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    get_relative_pointer :: inline (self: *zwp_relative_pointer_manager_v1, pointer: *wl_pointer) -> *zwp_relative_pointer_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ZWP_RELATIVE_POINTER_MANAGER_V1_GET_RELATIVE_POINTER,
            *zwp_relative_pointer_v1_interface, wl_proxy.get_version(self), 0,
            null, pointer);
        return cast(*zwp_relative_pointer_v1) ret;
    }
}

ZWP_RELATIVE_POINTER_MANAGER_V1_DESTROY                    : u32 : 0;
ZWP_RELATIVE_POINTER_MANAGER_V1_GET_RELATIVE_POINTER       : u32 : 1;
ZWP_RELATIVE_POINTER_MANAGER_V1_DESTROY_SINCE              : u32 : 1;
ZWP_RELATIVE_POINTER_MANAGER_V1_GET_RELATIVE_POINTER_SINCE : u32 : 1;

zwp_relative_pointer_v1_interface: wl_interface;
zwp_relative_pointer_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_relative_pointer_v1_interface;

    set_user_data :: inline (self: *zwp_relative_pointer_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_relative_pointer_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_relative_pointer_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_relative_pointer_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_RELATIVE_POINTER_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *zwp_relative_pointer_v1, listener: *zwp_relative_pointer_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_RELATIVE_POINTER_V1_DESTROY               : u32 : 0;
ZWP_RELATIVE_POINTER_V1_DESTROY_SINCE         : u32 : 1;
ZWP_RELATIVE_POINTER_V1_RELATIVE_MOTION_SINCE : u32 : 1;

zwp_relative_pointer_v1_listener :: struct {
    relative_motion := _stubs_.relative_motion;

    _stubs_ :: struct {
        relative_motion :: (data: *void,
            self: *zwp_relative_pointer_v1,
            utime_hi: u32,
            utime_lo: u32,
            dx: wl_fixed_t,
            dy: wl_fixed_t,
            dx_unaccel: wl_fixed_t,
            dy_unaccel: wl_fixed_t) -> void #c_call {}
    }
}


#scope_module
relative_pointer_unstable_v1_protocol_init :: () {
    relative_pointer_unstable_v1_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: zwp_relative_pointer_manager_v1::get_relative_pointer */
        *zwp_relative_pointer_v1_interface,   // 1
        *wl_pointer_interface,   // 2
        /* EVENT: zwp_relative_pointer_v1::relative_motion */
        null,  // 3
        null,  // 4
        null,  // 5
        null,  // 6
        null,  // 7
        null,  // 8
    ];

    zwp_relative_pointer_manager_v1_requests[0] = .{"destroy", "", relative_pointer_unstable_v1_types_storage.data + 0};
    zwp_relative_pointer_manager_v1_requests[1] = .{"get_relative_pointer", "no", relative_pointer_unstable_v1_types_storage.data + 1};
    zwp_relative_pointer_manager_v1_interface = .{
        "zwp_relative_pointer_manager_v1", 1,
        zwp_relative_pointer_manager_v1_requests.count, zwp_relative_pointer_manager_v1_requests.data,
        0, null,
    };

    zwp_relative_pointer_v1_requests[0] = .{"destroy", "", relative_pointer_unstable_v1_types_storage.data + 0};
    zwp_relative_pointer_v1_events[0] = .{"relative_motion", "uuffff", relative_pointer_unstable_v1_types_storage.data + 3};
    zwp_relative_pointer_v1_interface = .{
        "zwp_relative_pointer_v1", 1,
        zwp_relative_pointer_v1_requests.count, zwp_relative_pointer_v1_requests.data,
        zwp_relative_pointer_v1_events.count, zwp_relative_pointer_v1_events.data,
    };
}


#scope_file
relative_pointer_unstable_v1_types_storage: []*wl_interface;

zwp_relative_pointer_manager_v1_requests: [2]wl_message;

zwp_relative_pointer_v1_requests: [1]wl_message;
zwp_relative_pointer_v1_events  : [1]wl_message;

#assert size_of(zwp_relative_pointer_manager_v1) == 0 "wayland-scanner bug: zwp_relative_pointer_manager_v1 is non-empty";
#assert size_of(zwp_relative_pointer_v1) == 0 "wayland-scanner bug: zwp_relative_pointer_v1 is non-empty";
