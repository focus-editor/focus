/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: linux_dmabuf_unstable_v1
 */

zwp_linux_dmabuf_v1_interface: wl_interface;
zwp_linux_dmabuf_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_linux_dmabuf_v1_interface;

    set_user_data :: inline (self: *zwp_linux_dmabuf_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_linux_dmabuf_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_linux_dmabuf_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_linux_dmabuf_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_LINUX_DMABUF_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    create_params :: inline (self: *zwp_linux_dmabuf_v1) -> *zwp_linux_buffer_params_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ZWP_LINUX_DMABUF_V1_CREATE_PARAMS,
            *zwp_linux_buffer_params_v1_interface, wl_proxy.get_version(self), 0,
            null);
        return cast(*zwp_linux_buffer_params_v1) ret;
    }

    get_default_feedback :: inline (self: *zwp_linux_dmabuf_v1) -> *zwp_linux_dmabuf_feedback_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ZWP_LINUX_DMABUF_V1_GET_DEFAULT_FEEDBACK,
            *zwp_linux_dmabuf_feedback_v1_interface, wl_proxy.get_version(self), 0,
            null);
        return cast(*zwp_linux_dmabuf_feedback_v1) ret;
    }

    get_surface_feedback :: inline (self: *zwp_linux_dmabuf_v1, surface: *wl_surface) -> *zwp_linux_dmabuf_feedback_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ZWP_LINUX_DMABUF_V1_GET_SURFACE_FEEDBACK,
            *zwp_linux_dmabuf_feedback_v1_interface, wl_proxy.get_version(self), 0,
            null, surface);
        return cast(*zwp_linux_dmabuf_feedback_v1) ret;
    }

    add_listener :: inline (self: *zwp_linux_dmabuf_v1, listener: *zwp_linux_dmabuf_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_LINUX_DMABUF_V1_DESTROY                    : u32 : 0;
ZWP_LINUX_DMABUF_V1_CREATE_PARAMS              : u32 : 1;
ZWP_LINUX_DMABUF_V1_GET_DEFAULT_FEEDBACK       : u32 : 2;
ZWP_LINUX_DMABUF_V1_GET_SURFACE_FEEDBACK       : u32 : 3;
ZWP_LINUX_DMABUF_V1_DESTROY_SINCE              : u32 : 1;
ZWP_LINUX_DMABUF_V1_CREATE_PARAMS_SINCE        : u32 : 1;
ZWP_LINUX_DMABUF_V1_GET_DEFAULT_FEEDBACK_SINCE : u32 : 4;
ZWP_LINUX_DMABUF_V1_GET_SURFACE_FEEDBACK_SINCE : u32 : 4;
ZWP_LINUX_DMABUF_V1_FORMAT_SINCE               : u32 : 1;
ZWP_LINUX_DMABUF_V1_MODIFIER_SINCE             : u32 : 3;

zwp_linux_dmabuf_v1_listener :: struct {
    format   := _stubs_.format;
    modifier := _stubs_.modifier;

    _stubs_ :: struct {
        format :: (data: *void,
            self: *zwp_linux_dmabuf_v1,
            format: u32) -> void #c_call {}
        modifier :: (data: *void,
            self: *zwp_linux_dmabuf_v1,
            format: u32,
            modifier_hi: u32,
            modifier_lo: u32) -> void #c_call {}
    }
}

zwp_linux_buffer_params_v1_interface: wl_interface;
zwp_linux_buffer_params_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_linux_buffer_params_v1_interface;

    /* ENUM: zwp_linux_buffer_params_v1::error */
    error_already_used       : u32 : 0;
    error_plane_idx          : u32 : 1;
    error_plane_set          : u32 : 2;
    error_incomplete         : u32 : 3;
    error_invalid_format     : u32 : 4;
    error_invalid_dimensions : u32 : 5;
    error_out_of_bounds      : u32 : 6;
    error_invalid_wl_buffer  : u32 : 7;

    /* ENUM: zwp_linux_buffer_params_v1::flags */
    flags_y_invert     : u32 : 1;
    flags_interlaced   : u32 : 2;
    flags_bottom_first : u32 : 4;

    set_user_data :: inline (self: *zwp_linux_buffer_params_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_linux_buffer_params_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_linux_buffer_params_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_linux_buffer_params_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_LINUX_BUFFER_PARAMS_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add :: inline (self: *zwp_linux_buffer_params_v1, fd: s32, plane_idx: u32, offset: u32, stride: u32, modifier_hi: u32, modifier_lo: u32) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_LINUX_BUFFER_PARAMS_V1_ADD,
            null, wl_proxy.get_version(self), 0,
            fd, plane_idx, offset, stride, modifier_hi, modifier_lo);
    }

    create :: inline (self: *zwp_linux_buffer_params_v1, width: s32, height: s32, format: u32, flags: u32) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_LINUX_BUFFER_PARAMS_V1_CREATE,
            null, wl_proxy.get_version(self), 0,
            width, height, format, flags);
    }

    create_immed :: inline (self: *zwp_linux_buffer_params_v1, width: s32, height: s32, format: u32, flags: u32) -> *wl_buffer #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ZWP_LINUX_BUFFER_PARAMS_V1_CREATE_IMMED,
            *wl_buffer_interface, wl_proxy.get_version(self), 0,
            null, width, height, format, flags);
        return cast(*wl_buffer) ret;
    }

    add_listener :: inline (self: *zwp_linux_buffer_params_v1, listener: *zwp_linux_buffer_params_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_LINUX_BUFFER_PARAMS_V1_DESTROY            : u32 : 0;
ZWP_LINUX_BUFFER_PARAMS_V1_ADD                : u32 : 1;
ZWP_LINUX_BUFFER_PARAMS_V1_CREATE             : u32 : 2;
ZWP_LINUX_BUFFER_PARAMS_V1_CREATE_IMMED       : u32 : 3;
ZWP_LINUX_BUFFER_PARAMS_V1_DESTROY_SINCE      : u32 : 1;
ZWP_LINUX_BUFFER_PARAMS_V1_ADD_SINCE          : u32 : 1;
ZWP_LINUX_BUFFER_PARAMS_V1_CREATE_SINCE       : u32 : 1;
ZWP_LINUX_BUFFER_PARAMS_V1_CREATE_IMMED_SINCE : u32 : 2;
ZWP_LINUX_BUFFER_PARAMS_V1_CREATED_SINCE      : u32 : 1;
ZWP_LINUX_BUFFER_PARAMS_V1_FAILED_SINCE       : u32 : 1;

zwp_linux_buffer_params_v1_listener :: struct {
    created := _stubs_.created;
    failed  := _stubs_.failed;

    _stubs_ :: struct {
        created :: (data: *void,
            self: *zwp_linux_buffer_params_v1,
            buffer: *wl_buffer) -> void #c_call {}
        failed :: (data: *void,
            self: *zwp_linux_buffer_params_v1) -> void #c_call {}
    }
}

zwp_linux_dmabuf_feedback_v1_interface: wl_interface;
zwp_linux_dmabuf_feedback_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_linux_dmabuf_feedback_v1_interface;

    /* ENUM: zwp_linux_dmabuf_feedback_v1::tranche_flags */
    tranche_flags_scanout : u32 : 1;

    set_user_data :: inline (self: *zwp_linux_dmabuf_feedback_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_linux_dmabuf_feedback_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_linux_dmabuf_feedback_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_linux_dmabuf_feedback_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_LINUX_DMABUF_FEEDBACK_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *zwp_linux_dmabuf_feedback_v1, listener: *zwp_linux_dmabuf_feedback_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_LINUX_DMABUF_FEEDBACK_V1_DESTROY                     : u32 : 0;
ZWP_LINUX_DMABUF_FEEDBACK_V1_DESTROY_SINCE               : u32 : 1;
ZWP_LINUX_DMABUF_FEEDBACK_V1_DONE_SINCE                  : u32 : 1;
ZWP_LINUX_DMABUF_FEEDBACK_V1_FORMAT_TABLE_SINCE          : u32 : 1;
ZWP_LINUX_DMABUF_FEEDBACK_V1_MAIN_DEVICE_SINCE           : u32 : 1;
ZWP_LINUX_DMABUF_FEEDBACK_V1_TRANCHE_DONE_SINCE          : u32 : 1;
ZWP_LINUX_DMABUF_FEEDBACK_V1_TRANCHE_TARGET_DEVICE_SINCE : u32 : 1;
ZWP_LINUX_DMABUF_FEEDBACK_V1_TRANCHE_FORMATS_SINCE       : u32 : 1;
ZWP_LINUX_DMABUF_FEEDBACK_V1_TRANCHE_FLAGS_SINCE         : u32 : 1;

zwp_linux_dmabuf_feedback_v1_listener :: struct {
    done                  := _stubs_.done;
    format_table          := _stubs_.format_table;
    main_device           := _stubs_.main_device;
    tranche_done          := _stubs_.tranche_done;
    tranche_target_device := _stubs_.tranche_target_device;
    tranche_formats       := _stubs_.tranche_formats;
    tranche_flags         := _stubs_.tranche_flags;

    _stubs_ :: struct {
        done :: (data: *void,
            self: *zwp_linux_dmabuf_feedback_v1) -> void #c_call {}
        format_table :: (data: *void,
            self: *zwp_linux_dmabuf_feedback_v1,
            fd: s32,
            size: u32) -> void #c_call {}
        main_device :: (data: *void,
            self: *zwp_linux_dmabuf_feedback_v1,
            device: *wl_array) -> void #c_call {}
        tranche_done :: (data: *void,
            self: *zwp_linux_dmabuf_feedback_v1) -> void #c_call {}
        tranche_target_device :: (data: *void,
            self: *zwp_linux_dmabuf_feedback_v1,
            device: *wl_array) -> void #c_call {}
        tranche_formats :: (data: *void,
            self: *zwp_linux_dmabuf_feedback_v1,
            indices: *wl_array) -> void #c_call {}
        tranche_flags :: (data: *void,
            self: *zwp_linux_dmabuf_feedback_v1,
            flags: u32) -> void #c_call {}
    }
}


#scope_module
linux_dmabuf_unstable_v1_protocol_init :: () {
    linux_dmabuf_unstable_v1_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: zwp_linux_dmabuf_v1::create_params */
        *zwp_linux_buffer_params_v1_interface,   // 1
        /* REQUEST: zwp_linux_dmabuf_v1::get_default_feedback */
        *zwp_linux_dmabuf_feedback_v1_interface,   // 2
        /* REQUEST: zwp_linux_dmabuf_v1::get_surface_feedback */
        *zwp_linux_dmabuf_feedback_v1_interface,   // 3
        *wl_surface_interface,   // 4
        /* EVENT: zwp_linux_dmabuf_v1::format */
        null,  // 5
        /* EVENT: zwp_linux_dmabuf_v1::modifier */
        null,  // 6
        null,  // 7
        null,  // 8
        /* REQUEST: zwp_linux_buffer_params_v1::add */
        null,  // 9
        null,  // 10
        null,  // 11
        null,  // 12
        null,  // 13
        null,  // 14
        /* REQUEST: zwp_linux_buffer_params_v1::create */
        null,  // 15
        null,  // 16
        null,  // 17
        null,  // 18
        /* REQUEST: zwp_linux_buffer_params_v1::create_immed */
        *wl_buffer_interface,   // 19
        null,  // 20
        null,  // 21
        null,  // 22
        null,  // 23
        /* EVENT: zwp_linux_buffer_params_v1::created */
        *wl_buffer_interface,  // 24
        /* EVENT: zwp_linux_dmabuf_feedback_v1::format_table */
        null,  // 25
        null,  // 26
        /* EVENT: zwp_linux_dmabuf_feedback_v1::main_device */
        null,  // 27
        /* EVENT: zwp_linux_dmabuf_feedback_v1::tranche_target_device */
        null,  // 28
        /* EVENT: zwp_linux_dmabuf_feedback_v1::tranche_formats */
        null,  // 29
        /* EVENT: zwp_linux_dmabuf_feedback_v1::tranche_flags */
        null,  // 30
    ];

    zwp_linux_dmabuf_v1_requests[0] = .{"destroy", "", linux_dmabuf_unstable_v1_types_storage.data + 0};
    zwp_linux_dmabuf_v1_requests[1] = .{"create_params", "n", linux_dmabuf_unstable_v1_types_storage.data + 1};
    zwp_linux_dmabuf_v1_requests[2] = .{"get_default_feedback", "n", linux_dmabuf_unstable_v1_types_storage.data + 2};
    zwp_linux_dmabuf_v1_requests[3] = .{"get_surface_feedback", "no", linux_dmabuf_unstable_v1_types_storage.data + 3};
    zwp_linux_dmabuf_v1_events[0] = .{"format", "u", linux_dmabuf_unstable_v1_types_storage.data + 5};
    zwp_linux_dmabuf_v1_events[1] = .{"modifier", "uuu", linux_dmabuf_unstable_v1_types_storage.data + 6};
    zwp_linux_dmabuf_v1_interface = .{
        "zwp_linux_dmabuf_v1", 4,
        zwp_linux_dmabuf_v1_requests.count, zwp_linux_dmabuf_v1_requests.data,
        zwp_linux_dmabuf_v1_events.count, zwp_linux_dmabuf_v1_events.data,
    };

    zwp_linux_buffer_params_v1_requests[0] = .{"destroy", "", linux_dmabuf_unstable_v1_types_storage.data + 0};
    zwp_linux_buffer_params_v1_requests[1] = .{"add", "huuuuu", linux_dmabuf_unstable_v1_types_storage.data + 9};
    zwp_linux_buffer_params_v1_requests[2] = .{"create", "iiuu", linux_dmabuf_unstable_v1_types_storage.data + 15};
    zwp_linux_buffer_params_v1_requests[3] = .{"create_immed", "niiuu", linux_dmabuf_unstable_v1_types_storage.data + 19};
    zwp_linux_buffer_params_v1_events[0] = .{"created", "n", linux_dmabuf_unstable_v1_types_storage.data + 24};
    zwp_linux_buffer_params_v1_events[1] = .{"failed", "", linux_dmabuf_unstable_v1_types_storage.data + 0};
    zwp_linux_buffer_params_v1_interface = .{
        "zwp_linux_buffer_params_v1", 4,
        zwp_linux_buffer_params_v1_requests.count, zwp_linux_buffer_params_v1_requests.data,
        zwp_linux_buffer_params_v1_events.count, zwp_linux_buffer_params_v1_events.data,
    };

    zwp_linux_dmabuf_feedback_v1_requests[0] = .{"destroy", "", linux_dmabuf_unstable_v1_types_storage.data + 0};
    zwp_linux_dmabuf_feedback_v1_events[0] = .{"done", "", linux_dmabuf_unstable_v1_types_storage.data + 0};
    zwp_linux_dmabuf_feedback_v1_events[1] = .{"format_table", "hu", linux_dmabuf_unstable_v1_types_storage.data + 25};
    zwp_linux_dmabuf_feedback_v1_events[2] = .{"main_device", "a", linux_dmabuf_unstable_v1_types_storage.data + 27};
    zwp_linux_dmabuf_feedback_v1_events[3] = .{"tranche_done", "", linux_dmabuf_unstable_v1_types_storage.data + 0};
    zwp_linux_dmabuf_feedback_v1_events[4] = .{"tranche_target_device", "a", linux_dmabuf_unstable_v1_types_storage.data + 28};
    zwp_linux_dmabuf_feedback_v1_events[5] = .{"tranche_formats", "a", linux_dmabuf_unstable_v1_types_storage.data + 29};
    zwp_linux_dmabuf_feedback_v1_events[6] = .{"tranche_flags", "u", linux_dmabuf_unstable_v1_types_storage.data + 30};
    zwp_linux_dmabuf_feedback_v1_interface = .{
        "zwp_linux_dmabuf_feedback_v1", 4,
        zwp_linux_dmabuf_feedback_v1_requests.count, zwp_linux_dmabuf_feedback_v1_requests.data,
        zwp_linux_dmabuf_feedback_v1_events.count, zwp_linux_dmabuf_feedback_v1_events.data,
    };
}


#scope_file
linux_dmabuf_unstable_v1_types_storage: []*wl_interface;

zwp_linux_dmabuf_v1_requests: [4]wl_message;
zwp_linux_dmabuf_v1_events  : [2]wl_message;

zwp_linux_buffer_params_v1_requests: [4]wl_message;
zwp_linux_buffer_params_v1_events  : [2]wl_message;

zwp_linux_dmabuf_feedback_v1_requests: [1]wl_message;
zwp_linux_dmabuf_feedback_v1_events  : [7]wl_message;

#assert size_of(zwp_linux_dmabuf_v1) == 0 "wayland-scanner bug: zwp_linux_dmabuf_v1 is non-empty";
#assert size_of(zwp_linux_buffer_params_v1) == 0 "wayland-scanner bug: zwp_linux_buffer_params_v1 is non-empty";
#assert size_of(zwp_linux_dmabuf_feedback_v1) == 0 "wayland-scanner bug: zwp_linux_dmabuf_feedback_v1 is non-empty";
