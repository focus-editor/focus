/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: input_timestamps_unstable_v1
 */

zwp_input_timestamps_manager_v1_interface: wl_interface;
zwp_input_timestamps_manager_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_input_timestamps_manager_v1_interface;

    set_user_data :: inline (self: *zwp_input_timestamps_manager_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_input_timestamps_manager_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_input_timestamps_manager_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_input_timestamps_manager_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_INPUT_TIMESTAMPS_MANAGER_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    get_keyboard_timestamps :: inline (self: *zwp_input_timestamps_manager_v1, keyboard: *wl_keyboard) -> *zwp_input_timestamps_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ZWP_INPUT_TIMESTAMPS_MANAGER_V1_GET_KEYBOARD_TIMESTAMPS,
            *zwp_input_timestamps_v1_interface, wl_proxy.get_version(self), 0,
            null, keyboard);
        return cast(*zwp_input_timestamps_v1) ret;
    }

    get_pointer_timestamps :: inline (self: *zwp_input_timestamps_manager_v1, pointer: *wl_pointer) -> *zwp_input_timestamps_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ZWP_INPUT_TIMESTAMPS_MANAGER_V1_GET_POINTER_TIMESTAMPS,
            *zwp_input_timestamps_v1_interface, wl_proxy.get_version(self), 0,
            null, pointer);
        return cast(*zwp_input_timestamps_v1) ret;
    }

    get_touch_timestamps :: inline (self: *zwp_input_timestamps_manager_v1, touch: *wl_touch) -> *zwp_input_timestamps_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ZWP_INPUT_TIMESTAMPS_MANAGER_V1_GET_TOUCH_TIMESTAMPS,
            *zwp_input_timestamps_v1_interface, wl_proxy.get_version(self), 0,
            null, touch);
        return cast(*zwp_input_timestamps_v1) ret;
    }
}

ZWP_INPUT_TIMESTAMPS_MANAGER_V1_DESTROY                       : u32 : 0;
ZWP_INPUT_TIMESTAMPS_MANAGER_V1_GET_KEYBOARD_TIMESTAMPS       : u32 : 1;
ZWP_INPUT_TIMESTAMPS_MANAGER_V1_GET_POINTER_TIMESTAMPS        : u32 : 2;
ZWP_INPUT_TIMESTAMPS_MANAGER_V1_GET_TOUCH_TIMESTAMPS          : u32 : 3;
ZWP_INPUT_TIMESTAMPS_MANAGER_V1_DESTROY_SINCE                 : u32 : 1;
ZWP_INPUT_TIMESTAMPS_MANAGER_V1_GET_KEYBOARD_TIMESTAMPS_SINCE : u32 : 1;
ZWP_INPUT_TIMESTAMPS_MANAGER_V1_GET_POINTER_TIMESTAMPS_SINCE  : u32 : 1;
ZWP_INPUT_TIMESTAMPS_MANAGER_V1_GET_TOUCH_TIMESTAMPS_SINCE    : u32 : 1;

zwp_input_timestamps_v1_interface: wl_interface;
zwp_input_timestamps_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_input_timestamps_v1_interface;

    set_user_data :: inline (self: *zwp_input_timestamps_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_input_timestamps_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_input_timestamps_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_input_timestamps_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_INPUT_TIMESTAMPS_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *zwp_input_timestamps_v1, listener: *zwp_input_timestamps_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_INPUT_TIMESTAMPS_V1_DESTROY         : u32 : 0;
ZWP_INPUT_TIMESTAMPS_V1_DESTROY_SINCE   : u32 : 1;
ZWP_INPUT_TIMESTAMPS_V1_TIMESTAMP_SINCE : u32 : 1;

zwp_input_timestamps_v1_listener :: struct {
    timestamp := _stubs_.timestamp;

    _stubs_ :: struct {
        timestamp :: (data: *void,
            self: *zwp_input_timestamps_v1,
            tv_sec_hi: u32,
            tv_sec_lo: u32,
            tv_nsec: u32) -> void #c_call {}
    }
}


#scope_module
input_timestamps_unstable_v1_protocol_init :: () {
    input_timestamps_unstable_v1_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: zwp_input_timestamps_manager_v1::get_keyboard_timestamps */
        *zwp_input_timestamps_v1_interface,   // 1
        *wl_keyboard_interface,   // 2
        /* REQUEST: zwp_input_timestamps_manager_v1::get_pointer_timestamps */
        *zwp_input_timestamps_v1_interface,   // 3
        *wl_pointer_interface,   // 4
        /* REQUEST: zwp_input_timestamps_manager_v1::get_touch_timestamps */
        *zwp_input_timestamps_v1_interface,   // 5
        *wl_touch_interface,   // 6
        /* EVENT: zwp_input_timestamps_v1::timestamp */
        null,  // 7
        null,  // 8
        null,  // 9
    ];

    zwp_input_timestamps_manager_v1_requests[0] = .{"destroy", "", input_timestamps_unstable_v1_types_storage.data + 0};
    zwp_input_timestamps_manager_v1_requests[1] = .{"get_keyboard_timestamps", "no", input_timestamps_unstable_v1_types_storage.data + 1};
    zwp_input_timestamps_manager_v1_requests[2] = .{"get_pointer_timestamps", "no", input_timestamps_unstable_v1_types_storage.data + 3};
    zwp_input_timestamps_manager_v1_requests[3] = .{"get_touch_timestamps", "no", input_timestamps_unstable_v1_types_storage.data + 5};
    zwp_input_timestamps_manager_v1_interface = .{
        "zwp_input_timestamps_manager_v1", 1,
        zwp_input_timestamps_manager_v1_requests.count, zwp_input_timestamps_manager_v1_requests.data,
        0, null,
    };

    zwp_input_timestamps_v1_requests[0] = .{"destroy", "", input_timestamps_unstable_v1_types_storage.data + 0};
    zwp_input_timestamps_v1_events[0] = .{"timestamp", "uuu", input_timestamps_unstable_v1_types_storage.data + 7};
    zwp_input_timestamps_v1_interface = .{
        "zwp_input_timestamps_v1", 1,
        zwp_input_timestamps_v1_requests.count, zwp_input_timestamps_v1_requests.data,
        zwp_input_timestamps_v1_events.count, zwp_input_timestamps_v1_events.data,
    };
}


#scope_file
input_timestamps_unstable_v1_types_storage: []*wl_interface;

zwp_input_timestamps_manager_v1_requests: [4]wl_message;

zwp_input_timestamps_v1_requests: [1]wl_message;
zwp_input_timestamps_v1_events  : [1]wl_message;

#assert size_of(zwp_input_timestamps_manager_v1) == 0 "wayland-scanner bug: zwp_input_timestamps_manager_v1 is non-empty";
#assert size_of(zwp_input_timestamps_v1) == 0 "wayland-scanner bug: zwp_input_timestamps_v1 is non-empty";
