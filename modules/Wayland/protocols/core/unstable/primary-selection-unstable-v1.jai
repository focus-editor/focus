/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: wp_primary_selection_unstable_v1
 */

zwp_primary_selection_device_manager_v1_interface: wl_interface;
zwp_primary_selection_device_manager_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_primary_selection_device_manager_v1_interface;

    set_user_data :: inline (self: *zwp_primary_selection_device_manager_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_primary_selection_device_manager_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_primary_selection_device_manager_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    create_source :: inline (self: *zwp_primary_selection_device_manager_v1) -> *zwp_primary_selection_source_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ZWP_PRIMARY_SELECTION_DEVICE_MANAGER_V1_CREATE_SOURCE,
            *zwp_primary_selection_source_v1_interface, wl_proxy.get_version(self), 0,
            null);
        return cast(*zwp_primary_selection_source_v1) ret;
    }

    get_device :: inline (self: *zwp_primary_selection_device_manager_v1, seat: *wl_seat) -> *zwp_primary_selection_device_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ZWP_PRIMARY_SELECTION_DEVICE_MANAGER_V1_GET_DEVICE,
            *zwp_primary_selection_device_v1_interface, wl_proxy.get_version(self), 0,
            null, seat);
        return cast(*zwp_primary_selection_device_v1) ret;
    }

    destroy :: inline (self: *zwp_primary_selection_device_manager_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_PRIMARY_SELECTION_DEVICE_MANAGER_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }
}

ZWP_PRIMARY_SELECTION_DEVICE_MANAGER_V1_CREATE_SOURCE       : u32 : 0;
ZWP_PRIMARY_SELECTION_DEVICE_MANAGER_V1_GET_DEVICE          : u32 : 1;
ZWP_PRIMARY_SELECTION_DEVICE_MANAGER_V1_DESTROY             : u32 : 2;
ZWP_PRIMARY_SELECTION_DEVICE_MANAGER_V1_CREATE_SOURCE_SINCE : u32 : 1;
ZWP_PRIMARY_SELECTION_DEVICE_MANAGER_V1_GET_DEVICE_SINCE    : u32 : 1;
ZWP_PRIMARY_SELECTION_DEVICE_MANAGER_V1_DESTROY_SINCE       : u32 : 1;

zwp_primary_selection_device_v1_interface: wl_interface;
zwp_primary_selection_device_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_primary_selection_device_v1_interface;

    set_user_data :: inline (self: *zwp_primary_selection_device_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_primary_selection_device_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_primary_selection_device_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    set_selection :: inline (self: *zwp_primary_selection_device_v1, source: *zwp_primary_selection_source_v1, serial: u32) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_PRIMARY_SELECTION_DEVICE_V1_SET_SELECTION,
            null, wl_proxy.get_version(self), 0,
            source, serial);
    }

    destroy :: inline (self: *zwp_primary_selection_device_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_PRIMARY_SELECTION_DEVICE_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *zwp_primary_selection_device_v1, listener: *zwp_primary_selection_device_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_PRIMARY_SELECTION_DEVICE_V1_SET_SELECTION       : u32 : 0;
ZWP_PRIMARY_SELECTION_DEVICE_V1_DESTROY             : u32 : 1;
ZWP_PRIMARY_SELECTION_DEVICE_V1_SET_SELECTION_SINCE : u32 : 1;
ZWP_PRIMARY_SELECTION_DEVICE_V1_DESTROY_SINCE       : u32 : 1;
ZWP_PRIMARY_SELECTION_DEVICE_V1_DATA_OFFER_SINCE    : u32 : 1;
ZWP_PRIMARY_SELECTION_DEVICE_V1_SELECTION_SINCE     : u32 : 1;

zwp_primary_selection_device_v1_listener :: struct {
    data_offer := _stubs_.data_offer;
    selection  := _stubs_.selection;

    _stubs_ :: struct {
        data_offer :: (data: *void,
            self: *zwp_primary_selection_device_v1,
            offer: *zwp_primary_selection_offer_v1) -> void #c_call {}
        selection :: (data: *void,
            self: *zwp_primary_selection_device_v1,
            id: *zwp_primary_selection_offer_v1) -> void #c_call {}
    }
}

zwp_primary_selection_offer_v1_interface: wl_interface;
zwp_primary_selection_offer_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_primary_selection_offer_v1_interface;

    set_user_data :: inline (self: *zwp_primary_selection_offer_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_primary_selection_offer_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_primary_selection_offer_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    receive :: inline (self: *zwp_primary_selection_offer_v1, mime_type: *u8, fd: s32) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_PRIMARY_SELECTION_OFFER_V1_RECEIVE,
            null, wl_proxy.get_version(self), 0,
            mime_type, fd);
    }

    destroy :: inline (self: *zwp_primary_selection_offer_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_PRIMARY_SELECTION_OFFER_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *zwp_primary_selection_offer_v1, listener: *zwp_primary_selection_offer_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_PRIMARY_SELECTION_OFFER_V1_RECEIVE       : u32 : 0;
ZWP_PRIMARY_SELECTION_OFFER_V1_DESTROY       : u32 : 1;
ZWP_PRIMARY_SELECTION_OFFER_V1_RECEIVE_SINCE : u32 : 1;
ZWP_PRIMARY_SELECTION_OFFER_V1_DESTROY_SINCE : u32 : 1;
ZWP_PRIMARY_SELECTION_OFFER_V1_OFFER_SINCE   : u32 : 1;

zwp_primary_selection_offer_v1_listener :: struct {
    offer := _stubs_.offer;

    _stubs_ :: struct {
        offer :: (data: *void,
            self: *zwp_primary_selection_offer_v1,
            mime_type: *u8) -> void #c_call {}
    }
}

zwp_primary_selection_source_v1_interface: wl_interface;
zwp_primary_selection_source_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_primary_selection_source_v1_interface;

    set_user_data :: inline (self: *zwp_primary_selection_source_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_primary_selection_source_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_primary_selection_source_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    offer :: inline (self: *zwp_primary_selection_source_v1, mime_type: *u8) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_PRIMARY_SELECTION_SOURCE_V1_OFFER,
            null, wl_proxy.get_version(self), 0,
            mime_type);
    }

    destroy :: inline (self: *zwp_primary_selection_source_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_PRIMARY_SELECTION_SOURCE_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *zwp_primary_selection_source_v1, listener: *zwp_primary_selection_source_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_PRIMARY_SELECTION_SOURCE_V1_OFFER           : u32 : 0;
ZWP_PRIMARY_SELECTION_SOURCE_V1_DESTROY         : u32 : 1;
ZWP_PRIMARY_SELECTION_SOURCE_V1_OFFER_SINCE     : u32 : 1;
ZWP_PRIMARY_SELECTION_SOURCE_V1_DESTROY_SINCE   : u32 : 1;
ZWP_PRIMARY_SELECTION_SOURCE_V1_SEND_SINCE      : u32 : 1;
ZWP_PRIMARY_SELECTION_SOURCE_V1_CANCELLED_SINCE : u32 : 1;

zwp_primary_selection_source_v1_listener :: struct {
    send      := _stubs_.send;
    cancelled := _stubs_.cancelled;

    _stubs_ :: struct {
        send :: (data: *void,
            self: *zwp_primary_selection_source_v1,
            mime_type: *u8,
            fd: s32) -> void #c_call {}
        cancelled :: (data: *void,
            self: *zwp_primary_selection_source_v1) -> void #c_call {}
    }
}


#scope_module
wp_primary_selection_unstable_v1_protocol_init :: () {
    wp_primary_selection_unstable_v1_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: zwp_primary_selection_device_manager_v1::create_source */
        *zwp_primary_selection_source_v1_interface,   // 1
        /* REQUEST: zwp_primary_selection_device_manager_v1::get_device */
        *zwp_primary_selection_device_v1_interface,   // 2
        *wl_seat_interface,   // 3
        /* REQUEST: zwp_primary_selection_device_v1::set_selection */
        *zwp_primary_selection_source_v1_interface,   // 4
        null,  // 5
        /* EVENT: zwp_primary_selection_device_v1::data_offer */
        *zwp_primary_selection_offer_v1_interface,  // 6
        /* EVENT: zwp_primary_selection_device_v1::selection */
        *zwp_primary_selection_offer_v1_interface,  // 7
        /* REQUEST: zwp_primary_selection_offer_v1::receive */
        null,  // 8
        null,  // 9
        /* EVENT: zwp_primary_selection_offer_v1::offer */
        null,  // 10
        /* REQUEST: zwp_primary_selection_source_v1::offer */
        null,  // 11
        /* EVENT: zwp_primary_selection_source_v1::send */
        null,  // 12
        null,  // 13
    ];

    zwp_primary_selection_device_manager_v1_requests[0] = .{"create_source", "n", wp_primary_selection_unstable_v1_types_storage.data + 1};
    zwp_primary_selection_device_manager_v1_requests[1] = .{"get_device", "no", wp_primary_selection_unstable_v1_types_storage.data + 2};
    zwp_primary_selection_device_manager_v1_requests[2] = .{"destroy", "", wp_primary_selection_unstable_v1_types_storage.data + 0};
    zwp_primary_selection_device_manager_v1_interface = .{
        "zwp_primary_selection_device_manager_v1", 1,
        zwp_primary_selection_device_manager_v1_requests.count, zwp_primary_selection_device_manager_v1_requests.data,
        0, null,
    };

    zwp_primary_selection_device_v1_requests[0] = .{"set_selection", "?ou", wp_primary_selection_unstable_v1_types_storage.data + 4};
    zwp_primary_selection_device_v1_requests[1] = .{"destroy", "", wp_primary_selection_unstable_v1_types_storage.data + 0};
    zwp_primary_selection_device_v1_events[0] = .{"data_offer", "n", wp_primary_selection_unstable_v1_types_storage.data + 6};
    zwp_primary_selection_device_v1_events[1] = .{"selection", "?o", wp_primary_selection_unstable_v1_types_storage.data + 7};
    zwp_primary_selection_device_v1_interface = .{
        "zwp_primary_selection_device_v1", 1,
        zwp_primary_selection_device_v1_requests.count, zwp_primary_selection_device_v1_requests.data,
        zwp_primary_selection_device_v1_events.count, zwp_primary_selection_device_v1_events.data,
    };

    zwp_primary_selection_offer_v1_requests[0] = .{"receive", "sh", wp_primary_selection_unstable_v1_types_storage.data + 8};
    zwp_primary_selection_offer_v1_requests[1] = .{"destroy", "", wp_primary_selection_unstable_v1_types_storage.data + 0};
    zwp_primary_selection_offer_v1_events[0] = .{"offer", "s", wp_primary_selection_unstable_v1_types_storage.data + 10};
    zwp_primary_selection_offer_v1_interface = .{
        "zwp_primary_selection_offer_v1", 1,
        zwp_primary_selection_offer_v1_requests.count, zwp_primary_selection_offer_v1_requests.data,
        zwp_primary_selection_offer_v1_events.count, zwp_primary_selection_offer_v1_events.data,
    };

    zwp_primary_selection_source_v1_requests[0] = .{"offer", "s", wp_primary_selection_unstable_v1_types_storage.data + 11};
    zwp_primary_selection_source_v1_requests[1] = .{"destroy", "", wp_primary_selection_unstable_v1_types_storage.data + 0};
    zwp_primary_selection_source_v1_events[0] = .{"send", "sh", wp_primary_selection_unstable_v1_types_storage.data + 12};
    zwp_primary_selection_source_v1_events[1] = .{"cancelled", "", wp_primary_selection_unstable_v1_types_storage.data + 0};
    zwp_primary_selection_source_v1_interface = .{
        "zwp_primary_selection_source_v1", 1,
        zwp_primary_selection_source_v1_requests.count, zwp_primary_selection_source_v1_requests.data,
        zwp_primary_selection_source_v1_events.count, zwp_primary_selection_source_v1_events.data,
    };
}


#scope_file
wp_primary_selection_unstable_v1_types_storage: []*wl_interface;

zwp_primary_selection_device_manager_v1_requests: [3]wl_message;

zwp_primary_selection_device_v1_requests: [2]wl_message;
zwp_primary_selection_device_v1_events  : [2]wl_message;

zwp_primary_selection_offer_v1_requests: [2]wl_message;
zwp_primary_selection_offer_v1_events  : [1]wl_message;

zwp_primary_selection_source_v1_requests: [2]wl_message;
zwp_primary_selection_source_v1_events  : [2]wl_message;

#assert size_of(zwp_primary_selection_device_manager_v1) == 0 "wayland-scanner bug: zwp_primary_selection_device_manager_v1 is non-empty";
#assert size_of(zwp_primary_selection_device_v1) == 0 "wayland-scanner bug: zwp_primary_selection_device_v1 is non-empty";
#assert size_of(zwp_primary_selection_offer_v1) == 0 "wayland-scanner bug: zwp_primary_selection_offer_v1 is non-empty";
#assert size_of(zwp_primary_selection_source_v1) == 0 "wayland-scanner bug: zwp_primary_selection_source_v1 is non-empty";
