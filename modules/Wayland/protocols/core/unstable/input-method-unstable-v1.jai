/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: input_method_unstable_v1
 */

zwp_input_method_context_v1_interface: wl_interface;
zwp_input_method_context_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_input_method_context_v1_interface;

    set_user_data :: inline (self: *zwp_input_method_context_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_input_method_context_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_input_method_context_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_input_method_context_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_INPUT_METHOD_CONTEXT_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    commit_string :: inline (self: *zwp_input_method_context_v1, serial: u32, text: *u8) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_INPUT_METHOD_CONTEXT_V1_COMMIT_STRING,
            null, wl_proxy.get_version(self), 0,
            serial, text);
    }

    preedit_string :: inline (self: *zwp_input_method_context_v1, serial: u32, text: *u8, commit: *u8) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_INPUT_METHOD_CONTEXT_V1_PREEDIT_STRING,
            null, wl_proxy.get_version(self), 0,
            serial, text, commit);
    }

    preedit_styling :: inline (self: *zwp_input_method_context_v1, index: u32, length: u32, style: u32) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_INPUT_METHOD_CONTEXT_V1_PREEDIT_STYLING,
            null, wl_proxy.get_version(self), 0,
            index, length, style);
    }

    preedit_cursor :: inline (self: *zwp_input_method_context_v1, index: s32) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_INPUT_METHOD_CONTEXT_V1_PREEDIT_CURSOR,
            null, wl_proxy.get_version(self), 0,
            index);
    }

    delete_surrounding_text :: inline (self: *zwp_input_method_context_v1, index: s32, length: u32) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_INPUT_METHOD_CONTEXT_V1_DELETE_SURROUNDING_TEXT,
            null, wl_proxy.get_version(self), 0,
            index, length);
    }

    cursor_position :: inline (self: *zwp_input_method_context_v1, index: s32, anchor: s32) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_INPUT_METHOD_CONTEXT_V1_CURSOR_POSITION,
            null, wl_proxy.get_version(self), 0,
            index, anchor);
    }

    modifiers_map :: inline (self: *zwp_input_method_context_v1, map: *wl_array) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_INPUT_METHOD_CONTEXT_V1_MODIFIERS_MAP,
            null, wl_proxy.get_version(self), 0,
            map);
    }

    keysym :: inline (self: *zwp_input_method_context_v1, serial: u32, time: u32, sym: u32, state: u32, modifiers: u32) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_INPUT_METHOD_CONTEXT_V1_KEYSYM,
            null, wl_proxy.get_version(self), 0,
            serial, time, sym, state, modifiers);
    }

    grab_keyboard :: inline (self: *zwp_input_method_context_v1) -> *wl_keyboard #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ZWP_INPUT_METHOD_CONTEXT_V1_GRAB_KEYBOARD,
            *wl_keyboard_interface, wl_proxy.get_version(self), 0,
            null);
        return cast(*wl_keyboard) ret;
    }

    key :: inline (self: *zwp_input_method_context_v1, serial: u32, time: u32, key: u32, state: u32) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_INPUT_METHOD_CONTEXT_V1_KEY,
            null, wl_proxy.get_version(self), 0,
            serial, time, key, state);
    }

    modifiers :: inline (self: *zwp_input_method_context_v1, serial: u32, mods_depressed: u32, mods_latched: u32, mods_locked: u32, group: u32) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_INPUT_METHOD_CONTEXT_V1_MODIFIERS,
            null, wl_proxy.get_version(self), 0,
            serial, mods_depressed, mods_latched, mods_locked, group);
    }

    language :: inline (self: *zwp_input_method_context_v1, serial: u32, language: *u8) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_INPUT_METHOD_CONTEXT_V1_LANGUAGE,
            null, wl_proxy.get_version(self), 0,
            serial, language);
    }

    text_direction :: inline (self: *zwp_input_method_context_v1, serial: u32, direction: u32) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_INPUT_METHOD_CONTEXT_V1_TEXT_DIRECTION,
            null, wl_proxy.get_version(self), 0,
            serial, direction);
    }

    add_listener :: inline (self: *zwp_input_method_context_v1, listener: *zwp_input_method_context_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_INPUT_METHOD_CONTEXT_V1_DESTROY                       : u32 : 0;
ZWP_INPUT_METHOD_CONTEXT_V1_COMMIT_STRING                 : u32 : 1;
ZWP_INPUT_METHOD_CONTEXT_V1_PREEDIT_STRING                : u32 : 2;
ZWP_INPUT_METHOD_CONTEXT_V1_PREEDIT_STYLING               : u32 : 3;
ZWP_INPUT_METHOD_CONTEXT_V1_PREEDIT_CURSOR                : u32 : 4;
ZWP_INPUT_METHOD_CONTEXT_V1_DELETE_SURROUNDING_TEXT       : u32 : 5;
ZWP_INPUT_METHOD_CONTEXT_V1_CURSOR_POSITION               : u32 : 6;
ZWP_INPUT_METHOD_CONTEXT_V1_MODIFIERS_MAP                 : u32 : 7;
ZWP_INPUT_METHOD_CONTEXT_V1_KEYSYM                        : u32 : 8;
ZWP_INPUT_METHOD_CONTEXT_V1_GRAB_KEYBOARD                 : u32 : 9;
ZWP_INPUT_METHOD_CONTEXT_V1_KEY                           : u32 : 10;
ZWP_INPUT_METHOD_CONTEXT_V1_MODIFIERS                     : u32 : 11;
ZWP_INPUT_METHOD_CONTEXT_V1_LANGUAGE                      : u32 : 12;
ZWP_INPUT_METHOD_CONTEXT_V1_TEXT_DIRECTION                : u32 : 13;
ZWP_INPUT_METHOD_CONTEXT_V1_DESTROY_SINCE                 : u32 : 1;
ZWP_INPUT_METHOD_CONTEXT_V1_COMMIT_STRING_SINCE           : u32 : 1;
ZWP_INPUT_METHOD_CONTEXT_V1_PREEDIT_STRING_SINCE          : u32 : 1;
ZWP_INPUT_METHOD_CONTEXT_V1_PREEDIT_STYLING_SINCE         : u32 : 1;
ZWP_INPUT_METHOD_CONTEXT_V1_PREEDIT_CURSOR_SINCE          : u32 : 1;
ZWP_INPUT_METHOD_CONTEXT_V1_DELETE_SURROUNDING_TEXT_SINCE : u32 : 1;
ZWP_INPUT_METHOD_CONTEXT_V1_CURSOR_POSITION_SINCE         : u32 : 1;
ZWP_INPUT_METHOD_CONTEXT_V1_MODIFIERS_MAP_SINCE           : u32 : 1;
ZWP_INPUT_METHOD_CONTEXT_V1_KEYSYM_SINCE                  : u32 : 1;
ZWP_INPUT_METHOD_CONTEXT_V1_GRAB_KEYBOARD_SINCE           : u32 : 1;
ZWP_INPUT_METHOD_CONTEXT_V1_KEY_SINCE                     : u32 : 1;
ZWP_INPUT_METHOD_CONTEXT_V1_MODIFIERS_SINCE               : u32 : 1;
ZWP_INPUT_METHOD_CONTEXT_V1_LANGUAGE_SINCE                : u32 : 1;
ZWP_INPUT_METHOD_CONTEXT_V1_TEXT_DIRECTION_SINCE          : u32 : 1;
ZWP_INPUT_METHOD_CONTEXT_V1_SURROUNDING_TEXT_SINCE        : u32 : 1;
ZWP_INPUT_METHOD_CONTEXT_V1_RESET_SINCE                   : u32 : 1;
ZWP_INPUT_METHOD_CONTEXT_V1_CONTENT_TYPE_SINCE            : u32 : 1;
ZWP_INPUT_METHOD_CONTEXT_V1_INVOKE_ACTION_SINCE           : u32 : 1;
ZWP_INPUT_METHOD_CONTEXT_V1_COMMIT_STATE_SINCE            : u32 : 1;
ZWP_INPUT_METHOD_CONTEXT_V1_PREFERRED_LANGUAGE_SINCE      : u32 : 1;

zwp_input_method_context_v1_listener :: struct {
    surrounding_text   := _stubs_.surrounding_text;
    reset              := _stubs_.reset;
    content_type       := _stubs_.content_type;
    invoke_action      := _stubs_.invoke_action;
    commit_state       := _stubs_.commit_state;
    preferred_language := _stubs_.preferred_language;

    _stubs_ :: struct {
        surrounding_text :: (data: *void,
            self: *zwp_input_method_context_v1,
            text: *u8,
            cursor: u32,
            anchor: u32) -> void #c_call {}
        reset :: (data: *void,
            self: *zwp_input_method_context_v1) -> void #c_call {}
        content_type :: (data: *void,
            self: *zwp_input_method_context_v1,
            hint: u32,
            purpose: u32) -> void #c_call {}
        invoke_action :: (data: *void,
            self: *zwp_input_method_context_v1,
            button: u32,
            index: u32) -> void #c_call {}
        commit_state :: (data: *void,
            self: *zwp_input_method_context_v1,
            serial: u32) -> void #c_call {}
        preferred_language :: (data: *void,
            self: *zwp_input_method_context_v1,
            language: *u8) -> void #c_call {}
    }
}

zwp_input_method_v1_interface: wl_interface;
zwp_input_method_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_input_method_v1_interface;

    set_user_data :: inline (self: *zwp_input_method_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_input_method_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_input_method_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_input_method_v1) #c_call {
        wl_proxy.destroy(self);
    }

    add_listener :: inline (self: *zwp_input_method_v1, listener: *zwp_input_method_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_INPUT_METHOD_V1_ACTIVATE_SINCE   : u32 : 1;
ZWP_INPUT_METHOD_V1_DEACTIVATE_SINCE : u32 : 1;

zwp_input_method_v1_listener :: struct {
    activate   := _stubs_.activate;
    deactivate := _stubs_.deactivate;

    _stubs_ :: struct {
        activate :: (data: *void,
            self: *zwp_input_method_v1,
            id: *zwp_input_method_context_v1) -> void #c_call {}
        deactivate :: (data: *void,
            self: *zwp_input_method_v1,
            context: *zwp_input_method_context_v1) -> void #c_call {}
    }
}

zwp_input_panel_v1_interface: wl_interface;
zwp_input_panel_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_input_panel_v1_interface;

    set_user_data :: inline (self: *zwp_input_panel_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_input_panel_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_input_panel_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_input_panel_v1) #c_call {
        wl_proxy.destroy(self);
    }

    get_input_panel_surface :: inline (self: *zwp_input_panel_v1, surface: *wl_surface) -> *zwp_input_panel_surface_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ZWP_INPUT_PANEL_V1_GET_INPUT_PANEL_SURFACE,
            *zwp_input_panel_surface_v1_interface, wl_proxy.get_version(self), 0,
            null, surface);
        return cast(*zwp_input_panel_surface_v1) ret;
    }
}

ZWP_INPUT_PANEL_V1_GET_INPUT_PANEL_SURFACE       : u32 : 0;
ZWP_INPUT_PANEL_V1_GET_INPUT_PANEL_SURFACE_SINCE : u32 : 1;

zwp_input_panel_surface_v1_interface: wl_interface;
zwp_input_panel_surface_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_input_panel_surface_v1_interface;

    /* ENUM: zwp_input_panel_surface_v1::position */
    position_center_bottom : u32 : 0;

    set_user_data :: inline (self: *zwp_input_panel_surface_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_input_panel_surface_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_input_panel_surface_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_input_panel_surface_v1) #c_call {
        wl_proxy.destroy(self);
    }

    set_toplevel :: inline (self: *zwp_input_panel_surface_v1, output: *wl_output, position: u32) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_INPUT_PANEL_SURFACE_V1_SET_TOPLEVEL,
            null, wl_proxy.get_version(self), 0,
            output, position);
    }

    set_overlay_panel :: inline (self: *zwp_input_panel_surface_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_INPUT_PANEL_SURFACE_V1_SET_OVERLAY_PANEL,
            null, wl_proxy.get_version(self), 0);
    }
}

ZWP_INPUT_PANEL_SURFACE_V1_SET_TOPLEVEL            : u32 : 0;
ZWP_INPUT_PANEL_SURFACE_V1_SET_OVERLAY_PANEL       : u32 : 1;
ZWP_INPUT_PANEL_SURFACE_V1_SET_TOPLEVEL_SINCE      : u32 : 1;
ZWP_INPUT_PANEL_SURFACE_V1_SET_OVERLAY_PANEL_SINCE : u32 : 1;


#scope_module
input_method_unstable_v1_protocol_init :: () {
    input_method_unstable_v1_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: zwp_input_method_context_v1::commit_string */
        null,  // 1
        null,  // 2
        /* REQUEST: zwp_input_method_context_v1::preedit_string */
        null,  // 3
        null,  // 4
        null,  // 5
        /* REQUEST: zwp_input_method_context_v1::preedit_styling */
        null,  // 6
        null,  // 7
        null,  // 8
        /* REQUEST: zwp_input_method_context_v1::preedit_cursor */
        null,  // 9
        /* REQUEST: zwp_input_method_context_v1::delete_surrounding_text */
        null,  // 10
        null,  // 11
        /* REQUEST: zwp_input_method_context_v1::cursor_position */
        null,  // 12
        null,  // 13
        /* REQUEST: zwp_input_method_context_v1::modifiers_map */
        null,  // 14
        /* REQUEST: zwp_input_method_context_v1::keysym */
        null,  // 15
        null,  // 16
        null,  // 17
        null,  // 18
        null,  // 19
        /* REQUEST: zwp_input_method_context_v1::grab_keyboard */
        *wl_keyboard_interface,   // 20
        /* REQUEST: zwp_input_method_context_v1::key */
        null,  // 21
        null,  // 22
        null,  // 23
        null,  // 24
        /* REQUEST: zwp_input_method_context_v1::modifiers */
        null,  // 25
        null,  // 26
        null,  // 27
        null,  // 28
        null,  // 29
        /* REQUEST: zwp_input_method_context_v1::language */
        null,  // 30
        null,  // 31
        /* REQUEST: zwp_input_method_context_v1::text_direction */
        null,  // 32
        null,  // 33
        /* EVENT: zwp_input_method_context_v1::surrounding_text */
        null,  // 34
        null,  // 35
        null,  // 36
        /* EVENT: zwp_input_method_context_v1::content_type */
        null,  // 37
        null,  // 38
        /* EVENT: zwp_input_method_context_v1::invoke_action */
        null,  // 39
        null,  // 40
        /* EVENT: zwp_input_method_context_v1::commit_state */
        null,  // 41
        /* EVENT: zwp_input_method_context_v1::preferred_language */
        null,  // 42
        /* EVENT: zwp_input_method_v1::activate */
        *zwp_input_method_context_v1_interface,  // 43
        /* EVENT: zwp_input_method_v1::deactivate */
        *zwp_input_method_context_v1_interface,  // 44
        /* REQUEST: zwp_input_panel_v1::get_input_panel_surface */
        *zwp_input_panel_surface_v1_interface,   // 45
        *wl_surface_interface,   // 46
        /* REQUEST: zwp_input_panel_surface_v1::set_toplevel */
        *wl_output_interface,   // 47
        null,  // 48
    ];

    zwp_input_method_context_v1_requests[0] = .{"destroy", "", input_method_unstable_v1_types_storage.data + 0};
    zwp_input_method_context_v1_requests[1] = .{"commit_string", "us", input_method_unstable_v1_types_storage.data + 1};
    zwp_input_method_context_v1_requests[2] = .{"preedit_string", "uss", input_method_unstable_v1_types_storage.data + 3};
    zwp_input_method_context_v1_requests[3] = .{"preedit_styling", "uuu", input_method_unstable_v1_types_storage.data + 6};
    zwp_input_method_context_v1_requests[4] = .{"preedit_cursor", "i", input_method_unstable_v1_types_storage.data + 9};
    zwp_input_method_context_v1_requests[5] = .{"delete_surrounding_text", "iu", input_method_unstable_v1_types_storage.data + 10};
    zwp_input_method_context_v1_requests[6] = .{"cursor_position", "ii", input_method_unstable_v1_types_storage.data + 12};
    zwp_input_method_context_v1_requests[7] = .{"modifiers_map", "a", input_method_unstable_v1_types_storage.data + 14};
    zwp_input_method_context_v1_requests[8] = .{"keysym", "uuuuu", input_method_unstable_v1_types_storage.data + 15};
    zwp_input_method_context_v1_requests[9] = .{"grab_keyboard", "n", input_method_unstable_v1_types_storage.data + 20};
    zwp_input_method_context_v1_requests[10] = .{"key", "uuuu", input_method_unstable_v1_types_storage.data + 21};
    zwp_input_method_context_v1_requests[11] = .{"modifiers", "uuuuu", input_method_unstable_v1_types_storage.data + 25};
    zwp_input_method_context_v1_requests[12] = .{"language", "us", input_method_unstable_v1_types_storage.data + 30};
    zwp_input_method_context_v1_requests[13] = .{"text_direction", "uu", input_method_unstable_v1_types_storage.data + 32};
    zwp_input_method_context_v1_events[0] = .{"surrounding_text", "suu", input_method_unstable_v1_types_storage.data + 34};
    zwp_input_method_context_v1_events[1] = .{"reset", "", input_method_unstable_v1_types_storage.data + 0};
    zwp_input_method_context_v1_events[2] = .{"content_type", "uu", input_method_unstable_v1_types_storage.data + 37};
    zwp_input_method_context_v1_events[3] = .{"invoke_action", "uu", input_method_unstable_v1_types_storage.data + 39};
    zwp_input_method_context_v1_events[4] = .{"commit_state", "u", input_method_unstable_v1_types_storage.data + 41};
    zwp_input_method_context_v1_events[5] = .{"preferred_language", "s", input_method_unstable_v1_types_storage.data + 42};
    zwp_input_method_context_v1_interface = .{
        "zwp_input_method_context_v1", 1,
        zwp_input_method_context_v1_requests.count, zwp_input_method_context_v1_requests.data,
        zwp_input_method_context_v1_events.count, zwp_input_method_context_v1_events.data,
    };

    zwp_input_method_v1_events[0] = .{"activate", "n", input_method_unstable_v1_types_storage.data + 43};
    zwp_input_method_v1_events[1] = .{"deactivate", "o", input_method_unstable_v1_types_storage.data + 44};
    zwp_input_method_v1_interface = .{
        "zwp_input_method_v1", 1,
        0, null,
        zwp_input_method_v1_events.count, zwp_input_method_v1_events.data,
    };

    zwp_input_panel_v1_requests[0] = .{"get_input_panel_surface", "no", input_method_unstable_v1_types_storage.data + 45};
    zwp_input_panel_v1_interface = .{
        "zwp_input_panel_v1", 1,
        zwp_input_panel_v1_requests.count, zwp_input_panel_v1_requests.data,
        0, null,
    };

    zwp_input_panel_surface_v1_requests[0] = .{"set_toplevel", "ou", input_method_unstable_v1_types_storage.data + 47};
    zwp_input_panel_surface_v1_requests[1] = .{"set_overlay_panel", "", input_method_unstable_v1_types_storage.data + 0};
    zwp_input_panel_surface_v1_interface = .{
        "zwp_input_panel_surface_v1", 1,
        zwp_input_panel_surface_v1_requests.count, zwp_input_panel_surface_v1_requests.data,
        0, null,
    };
}


#scope_file
input_method_unstable_v1_types_storage: []*wl_interface;

zwp_input_method_context_v1_requests: [14]wl_message;
zwp_input_method_context_v1_events  : [6]wl_message;

zwp_input_method_v1_events  : [2]wl_message;

zwp_input_panel_v1_requests: [1]wl_message;

zwp_input_panel_surface_v1_requests: [2]wl_message;

#assert size_of(zwp_input_method_context_v1) == 0 "wayland-scanner bug: zwp_input_method_context_v1 is non-empty";
#assert size_of(zwp_input_method_v1) == 0 "wayland-scanner bug: zwp_input_method_v1 is non-empty";
#assert size_of(zwp_input_panel_v1) == 0 "wayland-scanner bug: zwp_input_panel_v1 is non-empty";
#assert size_of(zwp_input_panel_surface_v1) == 0 "wayland-scanner bug: zwp_input_panel_surface_v1 is non-empty";
