/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: tablet_unstable_v2
 */

zwp_tablet_manager_v2_interface: wl_interface;
zwp_tablet_manager_v2 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_tablet_manager_v2_interface;

    set_user_data :: inline (self: *zwp_tablet_manager_v2, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_tablet_manager_v2) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_tablet_manager_v2) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    get_tablet_seat :: inline (self: *zwp_tablet_manager_v2, seat: *wl_seat) -> *zwp_tablet_seat_v2 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ZWP_TABLET_MANAGER_V2_GET_TABLET_SEAT,
            *zwp_tablet_seat_v2_interface, wl_proxy.get_version(self), 0,
            null, seat);
        return cast(*zwp_tablet_seat_v2) ret;
    }

    destroy :: inline (self: *zwp_tablet_manager_v2) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TABLET_MANAGER_V2_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }
}

ZWP_TABLET_MANAGER_V2_GET_TABLET_SEAT       : u32 : 0;
ZWP_TABLET_MANAGER_V2_DESTROY               : u32 : 1;
ZWP_TABLET_MANAGER_V2_GET_TABLET_SEAT_SINCE : u32 : 1;
ZWP_TABLET_MANAGER_V2_DESTROY_SINCE         : u32 : 1;

zwp_tablet_seat_v2_interface: wl_interface;
zwp_tablet_seat_v2 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_tablet_seat_v2_interface;

    set_user_data :: inline (self: *zwp_tablet_seat_v2, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_tablet_seat_v2) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_tablet_seat_v2) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_tablet_seat_v2) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TABLET_SEAT_V2_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *zwp_tablet_seat_v2, listener: *zwp_tablet_seat_v2_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_TABLET_SEAT_V2_DESTROY            : u32 : 0;
ZWP_TABLET_SEAT_V2_DESTROY_SINCE      : u32 : 1;
ZWP_TABLET_SEAT_V2_TABLET_ADDED_SINCE : u32 : 1;
ZWP_TABLET_SEAT_V2_TOOL_ADDED_SINCE   : u32 : 1;
ZWP_TABLET_SEAT_V2_PAD_ADDED_SINCE    : u32 : 1;

zwp_tablet_seat_v2_listener :: struct {
    tablet_added := _stubs_.tablet_added;
    tool_added   := _stubs_.tool_added;
    pad_added    := _stubs_.pad_added;

    _stubs_ :: struct {
        tablet_added :: (data: *void,
            self: *zwp_tablet_seat_v2,
            id: *zwp_tablet_v2) -> void #c_call {}
        tool_added :: (data: *void,
            self: *zwp_tablet_seat_v2,
            id: *zwp_tablet_tool_v2) -> void #c_call {}
        pad_added :: (data: *void,
            self: *zwp_tablet_seat_v2,
            id: *zwp_tablet_pad_v2) -> void #c_call {}
    }
}

zwp_tablet_tool_v2_interface: wl_interface;
zwp_tablet_tool_v2 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_tablet_tool_v2_interface;

    /* ENUM: zwp_tablet_tool_v2::type */
    type_pen      : u32 : 0x140;
    type_eraser   : u32 : 0x141;
    type_brush    : u32 : 0x142;
    type_pencil   : u32 : 0x143;
    type_airbrush : u32 : 0x144;
    type_finger   : u32 : 0x145;
    type_mouse    : u32 : 0x146;
    type_lens     : u32 : 0x147;

    /* ENUM: zwp_tablet_tool_v2::capability */
    capability_tilt     : u32 : 1;
    capability_pressure : u32 : 2;
    capability_distance : u32 : 3;
    capability_rotation : u32 : 4;
    capability_slider   : u32 : 5;
    capability_wheel    : u32 : 6;

    /* ENUM: zwp_tablet_tool_v2::button_state */
    button_state_released : u32 : 0;
    button_state_pressed  : u32 : 1;

    /* ENUM: zwp_tablet_tool_v2::error */
    error_role : u32 : 0;

    set_user_data :: inline (self: *zwp_tablet_tool_v2, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_tablet_tool_v2) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_tablet_tool_v2) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    set_cursor :: inline (self: *zwp_tablet_tool_v2, serial: u32, surface: *wl_surface, hotspot_x: s32, hotspot_y: s32) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TABLET_TOOL_V2_SET_CURSOR,
            null, wl_proxy.get_version(self), 0,
            serial, surface, hotspot_x, hotspot_y);
    }

    destroy :: inline (self: *zwp_tablet_tool_v2) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TABLET_TOOL_V2_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *zwp_tablet_tool_v2, listener: *zwp_tablet_tool_v2_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_TABLET_TOOL_V2_SET_CURSOR              : u32 : 0;
ZWP_TABLET_TOOL_V2_DESTROY                 : u32 : 1;
ZWP_TABLET_TOOL_V2_SET_CURSOR_SINCE        : u32 : 1;
ZWP_TABLET_TOOL_V2_DESTROY_SINCE           : u32 : 1;
ZWP_TABLET_TOOL_V2_TYPE_SINCE              : u32 : 1;
ZWP_TABLET_TOOL_V2_HARDWARE_SERIAL_SINCE   : u32 : 1;
ZWP_TABLET_TOOL_V2_HARDWARE_ID_WACOM_SINCE : u32 : 1;
ZWP_TABLET_TOOL_V2_CAPABILITY_SINCE        : u32 : 1;
ZWP_TABLET_TOOL_V2_DONE_SINCE              : u32 : 1;
ZWP_TABLET_TOOL_V2_REMOVED_SINCE           : u32 : 1;
ZWP_TABLET_TOOL_V2_PROXIMITY_IN_SINCE      : u32 : 1;
ZWP_TABLET_TOOL_V2_PROXIMITY_OUT_SINCE     : u32 : 1;
ZWP_TABLET_TOOL_V2_DOWN_SINCE              : u32 : 1;
ZWP_TABLET_TOOL_V2_UP_SINCE                : u32 : 1;
ZWP_TABLET_TOOL_V2_MOTION_SINCE            : u32 : 1;
ZWP_TABLET_TOOL_V2_PRESSURE_SINCE          : u32 : 1;
ZWP_TABLET_TOOL_V2_DISTANCE_SINCE          : u32 : 1;
ZWP_TABLET_TOOL_V2_TILT_SINCE              : u32 : 1;
ZWP_TABLET_TOOL_V2_ROTATION_SINCE          : u32 : 1;
ZWP_TABLET_TOOL_V2_SLIDER_SINCE            : u32 : 1;
ZWP_TABLET_TOOL_V2_WHEEL_SINCE             : u32 : 1;
ZWP_TABLET_TOOL_V2_BUTTON_SINCE            : u32 : 1;
ZWP_TABLET_TOOL_V2_FRAME_SINCE             : u32 : 1;

zwp_tablet_tool_v2_listener :: struct {
    type              := _stubs_.type;
    hardware_serial   := _stubs_.hardware_serial;
    hardware_id_wacom := _stubs_.hardware_id_wacom;
    capability        := _stubs_.capability;
    done              := _stubs_.done;
    removed           := _stubs_.removed;
    proximity_in      := _stubs_.proximity_in;
    proximity_out     := _stubs_.proximity_out;
    down              := _stubs_.down;
    up                := _stubs_.up;
    motion            := _stubs_.motion;
    pressure          := _stubs_.pressure;
    distance          := _stubs_.distance;
    tilt              := _stubs_.tilt;
    rotation          := _stubs_.rotation;
    slider            := _stubs_.slider;
    wheel             := _stubs_.wheel;
    button            := _stubs_.button;
    frame             := _stubs_.frame;

    _stubs_ :: struct {
        type :: (data: *void,
            self: *zwp_tablet_tool_v2,
            tool_type: u32) -> void #c_call {}
        hardware_serial :: (data: *void,
            self: *zwp_tablet_tool_v2,
            hardware_serial_hi: u32,
            hardware_serial_lo: u32) -> void #c_call {}
        hardware_id_wacom :: (data: *void,
            self: *zwp_tablet_tool_v2,
            hardware_id_hi: u32,
            hardware_id_lo: u32) -> void #c_call {}
        capability :: (data: *void,
            self: *zwp_tablet_tool_v2,
            capability: u32) -> void #c_call {}
        done :: (data: *void,
            self: *zwp_tablet_tool_v2) -> void #c_call {}
        removed :: (data: *void,
            self: *zwp_tablet_tool_v2) -> void #c_call {}
        proximity_in :: (data: *void,
            self: *zwp_tablet_tool_v2,
            serial: u32,
            tablet: *zwp_tablet_v2,
            surface: *wl_surface) -> void #c_call {}
        proximity_out :: (data: *void,
            self: *zwp_tablet_tool_v2) -> void #c_call {}
        down :: (data: *void,
            self: *zwp_tablet_tool_v2,
            serial: u32) -> void #c_call {}
        up :: (data: *void,
            self: *zwp_tablet_tool_v2) -> void #c_call {}
        motion :: (data: *void,
            self: *zwp_tablet_tool_v2,
            x: wl_fixed_t,
            y: wl_fixed_t) -> void #c_call {}
        pressure :: (data: *void,
            self: *zwp_tablet_tool_v2,
            pressure: u32) -> void #c_call {}
        distance :: (data: *void,
            self: *zwp_tablet_tool_v2,
            distance: u32) -> void #c_call {}
        tilt :: (data: *void,
            self: *zwp_tablet_tool_v2,
            tilt_x: wl_fixed_t,
            tilt_y: wl_fixed_t) -> void #c_call {}
        rotation :: (data: *void,
            self: *zwp_tablet_tool_v2,
            degrees: wl_fixed_t) -> void #c_call {}
        slider :: (data: *void,
            self: *zwp_tablet_tool_v2,
            position: s32) -> void #c_call {}
        wheel :: (data: *void,
            self: *zwp_tablet_tool_v2,
            degrees: wl_fixed_t,
            clicks: s32) -> void #c_call {}
        button :: (data: *void,
            self: *zwp_tablet_tool_v2,
            serial: u32,
            button: u32,
            state: u32) -> void #c_call {}
        frame :: (data: *void,
            self: *zwp_tablet_tool_v2,
            time: u32) -> void #c_call {}
    }
}

zwp_tablet_v2_interface: wl_interface;
zwp_tablet_v2 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_tablet_v2_interface;

    set_user_data :: inline (self: *zwp_tablet_v2, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_tablet_v2) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_tablet_v2) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_tablet_v2) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TABLET_V2_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *zwp_tablet_v2, listener: *zwp_tablet_v2_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_TABLET_V2_DESTROY       : u32 : 0;
ZWP_TABLET_V2_DESTROY_SINCE : u32 : 1;
ZWP_TABLET_V2_NAME_SINCE    : u32 : 1;
ZWP_TABLET_V2_ID_SINCE      : u32 : 1;
ZWP_TABLET_V2_PATH_SINCE    : u32 : 1;
ZWP_TABLET_V2_DONE_SINCE    : u32 : 1;
ZWP_TABLET_V2_REMOVED_SINCE : u32 : 1;

zwp_tablet_v2_listener :: struct {
    name    := _stubs_.name;
    id      := _stubs_.id;
    path    := _stubs_.path;
    done    := _stubs_.done;
    removed := _stubs_.removed;

    _stubs_ :: struct {
        name :: (data: *void,
            self: *zwp_tablet_v2,
            name: *u8) -> void #c_call {}
        id :: (data: *void,
            self: *zwp_tablet_v2,
            vid: u32,
            pid: u32) -> void #c_call {}
        path :: (data: *void,
            self: *zwp_tablet_v2,
            path: *u8) -> void #c_call {}
        done :: (data: *void,
            self: *zwp_tablet_v2) -> void #c_call {}
        removed :: (data: *void,
            self: *zwp_tablet_v2) -> void #c_call {}
    }
}

zwp_tablet_pad_ring_v2_interface: wl_interface;
zwp_tablet_pad_ring_v2 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_tablet_pad_ring_v2_interface;

    /* ENUM: zwp_tablet_pad_ring_v2::source */
    source_finger : u32 : 1;

    set_user_data :: inline (self: *zwp_tablet_pad_ring_v2, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_tablet_pad_ring_v2) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_tablet_pad_ring_v2) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    set_feedback :: inline (self: *zwp_tablet_pad_ring_v2, description: *u8, serial: u32) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TABLET_PAD_RING_V2_SET_FEEDBACK,
            null, wl_proxy.get_version(self), 0,
            description, serial);
    }

    destroy :: inline (self: *zwp_tablet_pad_ring_v2) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TABLET_PAD_RING_V2_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *zwp_tablet_pad_ring_v2, listener: *zwp_tablet_pad_ring_v2_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_TABLET_PAD_RING_V2_SET_FEEDBACK       : u32 : 0;
ZWP_TABLET_PAD_RING_V2_DESTROY            : u32 : 1;
ZWP_TABLET_PAD_RING_V2_SET_FEEDBACK_SINCE : u32 : 1;
ZWP_TABLET_PAD_RING_V2_DESTROY_SINCE      : u32 : 1;
ZWP_TABLET_PAD_RING_V2_SOURCE_SINCE       : u32 : 1;
ZWP_TABLET_PAD_RING_V2_ANGLE_SINCE        : u32 : 1;
ZWP_TABLET_PAD_RING_V2_STOP_SINCE         : u32 : 1;
ZWP_TABLET_PAD_RING_V2_FRAME_SINCE        : u32 : 1;

zwp_tablet_pad_ring_v2_listener :: struct {
    source := _stubs_.source;
    angle  := _stubs_.angle;
    stop   := _stubs_.stop;
    frame  := _stubs_.frame;

    _stubs_ :: struct {
        source :: (data: *void,
            self: *zwp_tablet_pad_ring_v2,
            source: u32) -> void #c_call {}
        angle :: (data: *void,
            self: *zwp_tablet_pad_ring_v2,
            degrees: wl_fixed_t) -> void #c_call {}
        stop :: (data: *void,
            self: *zwp_tablet_pad_ring_v2) -> void #c_call {}
        frame :: (data: *void,
            self: *zwp_tablet_pad_ring_v2,
            time: u32) -> void #c_call {}
    }
}

zwp_tablet_pad_strip_v2_interface: wl_interface;
zwp_tablet_pad_strip_v2 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_tablet_pad_strip_v2_interface;

    /* ENUM: zwp_tablet_pad_strip_v2::source */
    source_finger : u32 : 1;

    set_user_data :: inline (self: *zwp_tablet_pad_strip_v2, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_tablet_pad_strip_v2) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_tablet_pad_strip_v2) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    set_feedback :: inline (self: *zwp_tablet_pad_strip_v2, description: *u8, serial: u32) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TABLET_PAD_STRIP_V2_SET_FEEDBACK,
            null, wl_proxy.get_version(self), 0,
            description, serial);
    }

    destroy :: inline (self: *zwp_tablet_pad_strip_v2) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TABLET_PAD_STRIP_V2_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *zwp_tablet_pad_strip_v2, listener: *zwp_tablet_pad_strip_v2_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_TABLET_PAD_STRIP_V2_SET_FEEDBACK       : u32 : 0;
ZWP_TABLET_PAD_STRIP_V2_DESTROY            : u32 : 1;
ZWP_TABLET_PAD_STRIP_V2_SET_FEEDBACK_SINCE : u32 : 1;
ZWP_TABLET_PAD_STRIP_V2_DESTROY_SINCE      : u32 : 1;
ZWP_TABLET_PAD_STRIP_V2_SOURCE_SINCE       : u32 : 1;
ZWP_TABLET_PAD_STRIP_V2_POSITION_SINCE     : u32 : 1;
ZWP_TABLET_PAD_STRIP_V2_STOP_SINCE         : u32 : 1;
ZWP_TABLET_PAD_STRIP_V2_FRAME_SINCE        : u32 : 1;

zwp_tablet_pad_strip_v2_listener :: struct {
    source   := _stubs_.source;
    position := _stubs_.position;
    stop     := _stubs_.stop;
    frame    := _stubs_.frame;

    _stubs_ :: struct {
        source :: (data: *void,
            self: *zwp_tablet_pad_strip_v2,
            source: u32) -> void #c_call {}
        position :: (data: *void,
            self: *zwp_tablet_pad_strip_v2,
            position: u32) -> void #c_call {}
        stop :: (data: *void,
            self: *zwp_tablet_pad_strip_v2) -> void #c_call {}
        frame :: (data: *void,
            self: *zwp_tablet_pad_strip_v2,
            time: u32) -> void #c_call {}
    }
}

zwp_tablet_pad_group_v2_interface: wl_interface;
zwp_tablet_pad_group_v2 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_tablet_pad_group_v2_interface;

    set_user_data :: inline (self: *zwp_tablet_pad_group_v2, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_tablet_pad_group_v2) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_tablet_pad_group_v2) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_tablet_pad_group_v2) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TABLET_PAD_GROUP_V2_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *zwp_tablet_pad_group_v2, listener: *zwp_tablet_pad_group_v2_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_TABLET_PAD_GROUP_V2_DESTROY           : u32 : 0;
ZWP_TABLET_PAD_GROUP_V2_DESTROY_SINCE     : u32 : 1;
ZWP_TABLET_PAD_GROUP_V2_BUTTONS_SINCE     : u32 : 1;
ZWP_TABLET_PAD_GROUP_V2_RING_SINCE        : u32 : 1;
ZWP_TABLET_PAD_GROUP_V2_STRIP_SINCE       : u32 : 1;
ZWP_TABLET_PAD_GROUP_V2_MODES_SINCE       : u32 : 1;
ZWP_TABLET_PAD_GROUP_V2_DONE_SINCE        : u32 : 1;
ZWP_TABLET_PAD_GROUP_V2_MODE_SWITCH_SINCE : u32 : 1;

zwp_tablet_pad_group_v2_listener :: struct {
    buttons     := _stubs_.buttons;
    ring        := _stubs_.ring;
    strip       := _stubs_.strip;
    modes       := _stubs_.modes;
    done        := _stubs_.done;
    mode_switch := _stubs_.mode_switch;

    _stubs_ :: struct {
        buttons :: (data: *void,
            self: *zwp_tablet_pad_group_v2,
            buttons: *wl_array) -> void #c_call {}
        ring :: (data: *void,
            self: *zwp_tablet_pad_group_v2,
            ring: *zwp_tablet_pad_ring_v2) -> void #c_call {}
        strip :: (data: *void,
            self: *zwp_tablet_pad_group_v2,
            strip: *zwp_tablet_pad_strip_v2) -> void #c_call {}
        modes :: (data: *void,
            self: *zwp_tablet_pad_group_v2,
            modes: u32) -> void #c_call {}
        done :: (data: *void,
            self: *zwp_tablet_pad_group_v2) -> void #c_call {}
        mode_switch :: (data: *void,
            self: *zwp_tablet_pad_group_v2,
            time: u32,
            serial: u32,
            mode: u32) -> void #c_call {}
    }
}

zwp_tablet_pad_v2_interface: wl_interface;
zwp_tablet_pad_v2 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_tablet_pad_v2_interface;

    /* ENUM: zwp_tablet_pad_v2::button_state */
    button_state_released : u32 : 0;
    button_state_pressed  : u32 : 1;

    set_user_data :: inline (self: *zwp_tablet_pad_v2, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_tablet_pad_v2) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_tablet_pad_v2) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    set_feedback :: inline (self: *zwp_tablet_pad_v2, button: u32, description: *u8, serial: u32) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TABLET_PAD_V2_SET_FEEDBACK,
            null, wl_proxy.get_version(self), 0,
            button, description, serial);
    }

    destroy :: inline (self: *zwp_tablet_pad_v2) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TABLET_PAD_V2_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *zwp_tablet_pad_v2, listener: *zwp_tablet_pad_v2_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_TABLET_PAD_V2_SET_FEEDBACK       : u32 : 0;
ZWP_TABLET_PAD_V2_DESTROY            : u32 : 1;
ZWP_TABLET_PAD_V2_SET_FEEDBACK_SINCE : u32 : 1;
ZWP_TABLET_PAD_V2_DESTROY_SINCE      : u32 : 1;
ZWP_TABLET_PAD_V2_GROUP_SINCE        : u32 : 1;
ZWP_TABLET_PAD_V2_PATH_SINCE         : u32 : 1;
ZWP_TABLET_PAD_V2_BUTTONS_SINCE      : u32 : 1;
ZWP_TABLET_PAD_V2_DONE_SINCE         : u32 : 1;
ZWP_TABLET_PAD_V2_BUTTON_SINCE       : u32 : 1;
ZWP_TABLET_PAD_V2_ENTER_SINCE        : u32 : 1;
ZWP_TABLET_PAD_V2_LEAVE_SINCE        : u32 : 1;
ZWP_TABLET_PAD_V2_REMOVED_SINCE      : u32 : 1;

zwp_tablet_pad_v2_listener :: struct {
    group   := _stubs_.group;
    path    := _stubs_.path;
    buttons := _stubs_.buttons;
    done    := _stubs_.done;
    button  := _stubs_.button;
    enter   := _stubs_.enter;
    leave   := _stubs_.leave;
    removed := _stubs_.removed;

    _stubs_ :: struct {
        group :: (data: *void,
            self: *zwp_tablet_pad_v2,
            pad_group: *zwp_tablet_pad_group_v2) -> void #c_call {}
        path :: (data: *void,
            self: *zwp_tablet_pad_v2,
            path: *u8) -> void #c_call {}
        buttons :: (data: *void,
            self: *zwp_tablet_pad_v2,
            buttons: u32) -> void #c_call {}
        done :: (data: *void,
            self: *zwp_tablet_pad_v2) -> void #c_call {}
        button :: (data: *void,
            self: *zwp_tablet_pad_v2,
            time: u32,
            button: u32,
            state: u32) -> void #c_call {}
        enter :: (data: *void,
            self: *zwp_tablet_pad_v2,
            serial: u32,
            tablet: *zwp_tablet_v2,
            surface: *wl_surface) -> void #c_call {}
        leave :: (data: *void,
            self: *zwp_tablet_pad_v2,
            serial: u32,
            surface: *wl_surface) -> void #c_call {}
        removed :: (data: *void,
            self: *zwp_tablet_pad_v2) -> void #c_call {}
    }
}


#scope_module
tablet_unstable_v2_protocol_init :: () {
    tablet_unstable_v2_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: zwp_tablet_manager_v2::get_tablet_seat */
        *zwp_tablet_seat_v2_interface,   // 1
        *wl_seat_interface,   // 2
        /* EVENT: zwp_tablet_seat_v2::tablet_added */
        *zwp_tablet_v2_interface,  // 3
        /* EVENT: zwp_tablet_seat_v2::tool_added */
        *zwp_tablet_tool_v2_interface,  // 4
        /* EVENT: zwp_tablet_seat_v2::pad_added */
        *zwp_tablet_pad_v2_interface,  // 5
        /* REQUEST: zwp_tablet_tool_v2::set_cursor */
        null,  // 6
        *wl_surface_interface,   // 7
        null,  // 8
        null,  // 9
        /* EVENT: zwp_tablet_tool_v2::type */
        null,  // 10
        /* EVENT: zwp_tablet_tool_v2::hardware_serial */
        null,  // 11
        null,  // 12
        /* EVENT: zwp_tablet_tool_v2::hardware_id_wacom */
        null,  // 13
        null,  // 14
        /* EVENT: zwp_tablet_tool_v2::capability */
        null,  // 15
        /* EVENT: zwp_tablet_tool_v2::proximity_in */
        null,  // 16
        *zwp_tablet_v2_interface,  // 17
        *wl_surface_interface,  // 18
        /* EVENT: zwp_tablet_tool_v2::down */
        null,  // 19
        /* EVENT: zwp_tablet_tool_v2::motion */
        null,  // 20
        null,  // 21
        /* EVENT: zwp_tablet_tool_v2::pressure */
        null,  // 22
        /* EVENT: zwp_tablet_tool_v2::distance */
        null,  // 23
        /* EVENT: zwp_tablet_tool_v2::tilt */
        null,  // 24
        null,  // 25
        /* EVENT: zwp_tablet_tool_v2::rotation */
        null,  // 26
        /* EVENT: zwp_tablet_tool_v2::slider */
        null,  // 27
        /* EVENT: zwp_tablet_tool_v2::wheel */
        null,  // 28
        null,  // 29
        /* EVENT: zwp_tablet_tool_v2::button */
        null,  // 30
        null,  // 31
        null,  // 32
        /* EVENT: zwp_tablet_tool_v2::frame */
        null,  // 33
        /* EVENT: zwp_tablet_v2::name */
        null,  // 34
        /* EVENT: zwp_tablet_v2::id */
        null,  // 35
        null,  // 36
        /* EVENT: zwp_tablet_v2::path */
        null,  // 37
        /* REQUEST: zwp_tablet_pad_ring_v2::set_feedback */
        null,  // 38
        null,  // 39
        /* EVENT: zwp_tablet_pad_ring_v2::source */
        null,  // 40
        /* EVENT: zwp_tablet_pad_ring_v2::angle */
        null,  // 41
        /* EVENT: zwp_tablet_pad_ring_v2::frame */
        null,  // 42
        /* REQUEST: zwp_tablet_pad_strip_v2::set_feedback */
        null,  // 43
        null,  // 44
        /* EVENT: zwp_tablet_pad_strip_v2::source */
        null,  // 45
        /* EVENT: zwp_tablet_pad_strip_v2::position */
        null,  // 46
        /* EVENT: zwp_tablet_pad_strip_v2::frame */
        null,  // 47
        /* EVENT: zwp_tablet_pad_group_v2::buttons */
        null,  // 48
        /* EVENT: zwp_tablet_pad_group_v2::ring */
        *zwp_tablet_pad_ring_v2_interface,  // 49
        /* EVENT: zwp_tablet_pad_group_v2::strip */
        *zwp_tablet_pad_strip_v2_interface,  // 50
        /* EVENT: zwp_tablet_pad_group_v2::modes */
        null,  // 51
        /* EVENT: zwp_tablet_pad_group_v2::mode_switch */
        null,  // 52
        null,  // 53
        null,  // 54
        /* REQUEST: zwp_tablet_pad_v2::set_feedback */
        null,  // 55
        null,  // 56
        null,  // 57
        /* EVENT: zwp_tablet_pad_v2::group */
        *zwp_tablet_pad_group_v2_interface,  // 58
        /* EVENT: zwp_tablet_pad_v2::path */
        null,  // 59
        /* EVENT: zwp_tablet_pad_v2::buttons */
        null,  // 60
        /* EVENT: zwp_tablet_pad_v2::button */
        null,  // 61
        null,  // 62
        null,  // 63
        /* EVENT: zwp_tablet_pad_v2::enter */
        null,  // 64
        *zwp_tablet_v2_interface,  // 65
        *wl_surface_interface,  // 66
        /* EVENT: zwp_tablet_pad_v2::leave */
        null,  // 67
        *wl_surface_interface,  // 68
    ];

    zwp_tablet_manager_v2_requests[0] = .{"get_tablet_seat", "no", tablet_unstable_v2_types_storage.data + 1};
    zwp_tablet_manager_v2_requests[1] = .{"destroy", "", tablet_unstable_v2_types_storage.data + 0};
    zwp_tablet_manager_v2_interface = .{
        "zwp_tablet_manager_v2", 1,
        zwp_tablet_manager_v2_requests.count, zwp_tablet_manager_v2_requests.data,
        0, null,
    };

    zwp_tablet_seat_v2_requests[0] = .{"destroy", "", tablet_unstable_v2_types_storage.data + 0};
    zwp_tablet_seat_v2_events[0] = .{"tablet_added", "n", tablet_unstable_v2_types_storage.data + 3};
    zwp_tablet_seat_v2_events[1] = .{"tool_added", "n", tablet_unstable_v2_types_storage.data + 4};
    zwp_tablet_seat_v2_events[2] = .{"pad_added", "n", tablet_unstable_v2_types_storage.data + 5};
    zwp_tablet_seat_v2_interface = .{
        "zwp_tablet_seat_v2", 1,
        zwp_tablet_seat_v2_requests.count, zwp_tablet_seat_v2_requests.data,
        zwp_tablet_seat_v2_events.count, zwp_tablet_seat_v2_events.data,
    };

    zwp_tablet_tool_v2_requests[0] = .{"set_cursor", "u?oii", tablet_unstable_v2_types_storage.data + 6};
    zwp_tablet_tool_v2_requests[1] = .{"destroy", "", tablet_unstable_v2_types_storage.data + 0};
    zwp_tablet_tool_v2_events[0] = .{"type", "u", tablet_unstable_v2_types_storage.data + 10};
    zwp_tablet_tool_v2_events[1] = .{"hardware_serial", "uu", tablet_unstable_v2_types_storage.data + 11};
    zwp_tablet_tool_v2_events[2] = .{"hardware_id_wacom", "uu", tablet_unstable_v2_types_storage.data + 13};
    zwp_tablet_tool_v2_events[3] = .{"capability", "u", tablet_unstable_v2_types_storage.data + 15};
    zwp_tablet_tool_v2_events[4] = .{"done", "", tablet_unstable_v2_types_storage.data + 0};
    zwp_tablet_tool_v2_events[5] = .{"removed", "", tablet_unstable_v2_types_storage.data + 0};
    zwp_tablet_tool_v2_events[6] = .{"proximity_in", "uoo", tablet_unstable_v2_types_storage.data + 16};
    zwp_tablet_tool_v2_events[7] = .{"proximity_out", "", tablet_unstable_v2_types_storage.data + 0};
    zwp_tablet_tool_v2_events[8] = .{"down", "u", tablet_unstable_v2_types_storage.data + 19};
    zwp_tablet_tool_v2_events[9] = .{"up", "", tablet_unstable_v2_types_storage.data + 0};
    zwp_tablet_tool_v2_events[10] = .{"motion", "ff", tablet_unstable_v2_types_storage.data + 20};
    zwp_tablet_tool_v2_events[11] = .{"pressure", "u", tablet_unstable_v2_types_storage.data + 22};
    zwp_tablet_tool_v2_events[12] = .{"distance", "u", tablet_unstable_v2_types_storage.data + 23};
    zwp_tablet_tool_v2_events[13] = .{"tilt", "ff", tablet_unstable_v2_types_storage.data + 24};
    zwp_tablet_tool_v2_events[14] = .{"rotation", "f", tablet_unstable_v2_types_storage.data + 26};
    zwp_tablet_tool_v2_events[15] = .{"slider", "i", tablet_unstable_v2_types_storage.data + 27};
    zwp_tablet_tool_v2_events[16] = .{"wheel", "fi", tablet_unstable_v2_types_storage.data + 28};
    zwp_tablet_tool_v2_events[17] = .{"button", "uuu", tablet_unstable_v2_types_storage.data + 30};
    zwp_tablet_tool_v2_events[18] = .{"frame", "u", tablet_unstable_v2_types_storage.data + 33};
    zwp_tablet_tool_v2_interface = .{
        "zwp_tablet_tool_v2", 1,
        zwp_tablet_tool_v2_requests.count, zwp_tablet_tool_v2_requests.data,
        zwp_tablet_tool_v2_events.count, zwp_tablet_tool_v2_events.data,
    };

    zwp_tablet_v2_requests[0] = .{"destroy", "", tablet_unstable_v2_types_storage.data + 0};
    zwp_tablet_v2_events[0] = .{"name", "s", tablet_unstable_v2_types_storage.data + 34};
    zwp_tablet_v2_events[1] = .{"id", "uu", tablet_unstable_v2_types_storage.data + 35};
    zwp_tablet_v2_events[2] = .{"path", "s", tablet_unstable_v2_types_storage.data + 37};
    zwp_tablet_v2_events[3] = .{"done", "", tablet_unstable_v2_types_storage.data + 0};
    zwp_tablet_v2_events[4] = .{"removed", "", tablet_unstable_v2_types_storage.data + 0};
    zwp_tablet_v2_interface = .{
        "zwp_tablet_v2", 1,
        zwp_tablet_v2_requests.count, zwp_tablet_v2_requests.data,
        zwp_tablet_v2_events.count, zwp_tablet_v2_events.data,
    };

    zwp_tablet_pad_ring_v2_requests[0] = .{"set_feedback", "su", tablet_unstable_v2_types_storage.data + 38};
    zwp_tablet_pad_ring_v2_requests[1] = .{"destroy", "", tablet_unstable_v2_types_storage.data + 0};
    zwp_tablet_pad_ring_v2_events[0] = .{"source", "u", tablet_unstable_v2_types_storage.data + 40};
    zwp_tablet_pad_ring_v2_events[1] = .{"angle", "f", tablet_unstable_v2_types_storage.data + 41};
    zwp_tablet_pad_ring_v2_events[2] = .{"stop", "", tablet_unstable_v2_types_storage.data + 0};
    zwp_tablet_pad_ring_v2_events[3] = .{"frame", "u", tablet_unstable_v2_types_storage.data + 42};
    zwp_tablet_pad_ring_v2_interface = .{
        "zwp_tablet_pad_ring_v2", 1,
        zwp_tablet_pad_ring_v2_requests.count, zwp_tablet_pad_ring_v2_requests.data,
        zwp_tablet_pad_ring_v2_events.count, zwp_tablet_pad_ring_v2_events.data,
    };

    zwp_tablet_pad_strip_v2_requests[0] = .{"set_feedback", "su", tablet_unstable_v2_types_storage.data + 43};
    zwp_tablet_pad_strip_v2_requests[1] = .{"destroy", "", tablet_unstable_v2_types_storage.data + 0};
    zwp_tablet_pad_strip_v2_events[0] = .{"source", "u", tablet_unstable_v2_types_storage.data + 45};
    zwp_tablet_pad_strip_v2_events[1] = .{"position", "u", tablet_unstable_v2_types_storage.data + 46};
    zwp_tablet_pad_strip_v2_events[2] = .{"stop", "", tablet_unstable_v2_types_storage.data + 0};
    zwp_tablet_pad_strip_v2_events[3] = .{"frame", "u", tablet_unstable_v2_types_storage.data + 47};
    zwp_tablet_pad_strip_v2_interface = .{
        "zwp_tablet_pad_strip_v2", 1,
        zwp_tablet_pad_strip_v2_requests.count, zwp_tablet_pad_strip_v2_requests.data,
        zwp_tablet_pad_strip_v2_events.count, zwp_tablet_pad_strip_v2_events.data,
    };

    zwp_tablet_pad_group_v2_requests[0] = .{"destroy", "", tablet_unstable_v2_types_storage.data + 0};
    zwp_tablet_pad_group_v2_events[0] = .{"buttons", "a", tablet_unstable_v2_types_storage.data + 48};
    zwp_tablet_pad_group_v2_events[1] = .{"ring", "n", tablet_unstable_v2_types_storage.data + 49};
    zwp_tablet_pad_group_v2_events[2] = .{"strip", "n", tablet_unstable_v2_types_storage.data + 50};
    zwp_tablet_pad_group_v2_events[3] = .{"modes", "u", tablet_unstable_v2_types_storage.data + 51};
    zwp_tablet_pad_group_v2_events[4] = .{"done", "", tablet_unstable_v2_types_storage.data + 0};
    zwp_tablet_pad_group_v2_events[5] = .{"mode_switch", "uuu", tablet_unstable_v2_types_storage.data + 52};
    zwp_tablet_pad_group_v2_interface = .{
        "zwp_tablet_pad_group_v2", 1,
        zwp_tablet_pad_group_v2_requests.count, zwp_tablet_pad_group_v2_requests.data,
        zwp_tablet_pad_group_v2_events.count, zwp_tablet_pad_group_v2_events.data,
    };

    zwp_tablet_pad_v2_requests[0] = .{"set_feedback", "usu", tablet_unstable_v2_types_storage.data + 55};
    zwp_tablet_pad_v2_requests[1] = .{"destroy", "", tablet_unstable_v2_types_storage.data + 0};
    zwp_tablet_pad_v2_events[0] = .{"group", "n", tablet_unstable_v2_types_storage.data + 58};
    zwp_tablet_pad_v2_events[1] = .{"path", "s", tablet_unstable_v2_types_storage.data + 59};
    zwp_tablet_pad_v2_events[2] = .{"buttons", "u", tablet_unstable_v2_types_storage.data + 60};
    zwp_tablet_pad_v2_events[3] = .{"done", "", tablet_unstable_v2_types_storage.data + 0};
    zwp_tablet_pad_v2_events[4] = .{"button", "uuu", tablet_unstable_v2_types_storage.data + 61};
    zwp_tablet_pad_v2_events[5] = .{"enter", "uoo", tablet_unstable_v2_types_storage.data + 64};
    zwp_tablet_pad_v2_events[6] = .{"leave", "uo", tablet_unstable_v2_types_storage.data + 67};
    zwp_tablet_pad_v2_events[7] = .{"removed", "", tablet_unstable_v2_types_storage.data + 0};
    zwp_tablet_pad_v2_interface = .{
        "zwp_tablet_pad_v2", 1,
        zwp_tablet_pad_v2_requests.count, zwp_tablet_pad_v2_requests.data,
        zwp_tablet_pad_v2_events.count, zwp_tablet_pad_v2_events.data,
    };
}


#scope_file
tablet_unstable_v2_types_storage: []*wl_interface;

zwp_tablet_manager_v2_requests: [2]wl_message;

zwp_tablet_seat_v2_requests: [1]wl_message;
zwp_tablet_seat_v2_events  : [3]wl_message;

zwp_tablet_tool_v2_requests: [2]wl_message;
zwp_tablet_tool_v2_events  : [19]wl_message;

zwp_tablet_v2_requests: [1]wl_message;
zwp_tablet_v2_events  : [5]wl_message;

zwp_tablet_pad_ring_v2_requests: [2]wl_message;
zwp_tablet_pad_ring_v2_events  : [4]wl_message;

zwp_tablet_pad_strip_v2_requests: [2]wl_message;
zwp_tablet_pad_strip_v2_events  : [4]wl_message;

zwp_tablet_pad_group_v2_requests: [1]wl_message;
zwp_tablet_pad_group_v2_events  : [6]wl_message;

zwp_tablet_pad_v2_requests: [2]wl_message;
zwp_tablet_pad_v2_events  : [8]wl_message;

#assert size_of(zwp_tablet_manager_v2) == 0 "wayland-scanner bug: zwp_tablet_manager_v2 is non-empty";
#assert size_of(zwp_tablet_seat_v2) == 0 "wayland-scanner bug: zwp_tablet_seat_v2 is non-empty";
#assert size_of(zwp_tablet_tool_v2) == 0 "wayland-scanner bug: zwp_tablet_tool_v2 is non-empty";
#assert size_of(zwp_tablet_v2) == 0 "wayland-scanner bug: zwp_tablet_v2 is non-empty";
#assert size_of(zwp_tablet_pad_ring_v2) == 0 "wayland-scanner bug: zwp_tablet_pad_ring_v2 is non-empty";
#assert size_of(zwp_tablet_pad_strip_v2) == 0 "wayland-scanner bug: zwp_tablet_pad_strip_v2 is non-empty";
#assert size_of(zwp_tablet_pad_group_v2) == 0 "wayland-scanner bug: zwp_tablet_pad_group_v2 is non-empty";
#assert size_of(zwp_tablet_pad_v2) == 0 "wayland-scanner bug: zwp_tablet_pad_v2 is non-empty";
