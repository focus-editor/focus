/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: tablet_unstable_v1
 */

zwp_tablet_manager_v1_interface: wl_interface;
zwp_tablet_manager_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_tablet_manager_v1_interface;

    set_user_data :: inline (self: *zwp_tablet_manager_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_tablet_manager_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_tablet_manager_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    get_tablet_seat :: inline (self: *zwp_tablet_manager_v1, seat: *wl_seat) -> *zwp_tablet_seat_v1 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ZWP_TABLET_MANAGER_V1_GET_TABLET_SEAT,
            *zwp_tablet_seat_v1_interface, wl_proxy.get_version(self), 0,
            null, seat);
        return cast(*zwp_tablet_seat_v1) ret;
    }

    destroy :: inline (self: *zwp_tablet_manager_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TABLET_MANAGER_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }
}

ZWP_TABLET_MANAGER_V1_GET_TABLET_SEAT       : u32 : 0;
ZWP_TABLET_MANAGER_V1_DESTROY               : u32 : 1;
ZWP_TABLET_MANAGER_V1_GET_TABLET_SEAT_SINCE : u32 : 1;
ZWP_TABLET_MANAGER_V1_DESTROY_SINCE         : u32 : 1;

zwp_tablet_seat_v1_interface: wl_interface;
zwp_tablet_seat_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_tablet_seat_v1_interface;

    set_user_data :: inline (self: *zwp_tablet_seat_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_tablet_seat_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_tablet_seat_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_tablet_seat_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TABLET_SEAT_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *zwp_tablet_seat_v1, listener: *zwp_tablet_seat_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_TABLET_SEAT_V1_DESTROY            : u32 : 0;
ZWP_TABLET_SEAT_V1_DESTROY_SINCE      : u32 : 1;
ZWP_TABLET_SEAT_V1_TABLET_ADDED_SINCE : u32 : 1;
ZWP_TABLET_SEAT_V1_TOOL_ADDED_SINCE   : u32 : 1;

zwp_tablet_seat_v1_listener :: struct {
    tablet_added := _stubs_.tablet_added;
    tool_added   := _stubs_.tool_added;

    _stubs_ :: struct {
        tablet_added :: (data: *void,
            self: *zwp_tablet_seat_v1,
            id: *zwp_tablet_v1) -> void #c_call {}
        tool_added :: (data: *void,
            self: *zwp_tablet_seat_v1,
            id: *zwp_tablet_tool_v1) -> void #c_call {}
    }
}

zwp_tablet_tool_v1_interface: wl_interface;
zwp_tablet_tool_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_tablet_tool_v1_interface;

    /* ENUM: zwp_tablet_tool_v1::type */
    type_pen      : u32 : 0x140;
    type_eraser   : u32 : 0x141;
    type_brush    : u32 : 0x142;
    type_pencil   : u32 : 0x143;
    type_airbrush : u32 : 0x144;
    type_finger   : u32 : 0x145;
    type_mouse    : u32 : 0x146;
    type_lens     : u32 : 0x147;

    /* ENUM: zwp_tablet_tool_v1::capability */
    capability_tilt     : u32 : 1;
    capability_pressure : u32 : 2;
    capability_distance : u32 : 3;
    capability_rotation : u32 : 4;
    capability_slider   : u32 : 5;
    capability_wheel    : u32 : 6;

    /* ENUM: zwp_tablet_tool_v1::button_state */
    button_state_released : u32 : 0;
    button_state_pressed  : u32 : 1;

    /* ENUM: zwp_tablet_tool_v1::error */
    error_role : u32 : 0;

    set_user_data :: inline (self: *zwp_tablet_tool_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_tablet_tool_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_tablet_tool_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    set_cursor :: inline (self: *zwp_tablet_tool_v1, serial: u32, surface: *wl_surface, hotspot_x: s32, hotspot_y: s32) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TABLET_TOOL_V1_SET_CURSOR,
            null, wl_proxy.get_version(self), 0,
            serial, surface, hotspot_x, hotspot_y);
    }

    destroy :: inline (self: *zwp_tablet_tool_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TABLET_TOOL_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *zwp_tablet_tool_v1, listener: *zwp_tablet_tool_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_TABLET_TOOL_V1_SET_CURSOR              : u32 : 0;
ZWP_TABLET_TOOL_V1_DESTROY                 : u32 : 1;
ZWP_TABLET_TOOL_V1_SET_CURSOR_SINCE        : u32 : 1;
ZWP_TABLET_TOOL_V1_DESTROY_SINCE           : u32 : 1;
ZWP_TABLET_TOOL_V1_TYPE_SINCE              : u32 : 1;
ZWP_TABLET_TOOL_V1_HARDWARE_SERIAL_SINCE   : u32 : 1;
ZWP_TABLET_TOOL_V1_HARDWARE_ID_WACOM_SINCE : u32 : 1;
ZWP_TABLET_TOOL_V1_CAPABILITY_SINCE        : u32 : 1;
ZWP_TABLET_TOOL_V1_DONE_SINCE              : u32 : 1;
ZWP_TABLET_TOOL_V1_REMOVED_SINCE           : u32 : 1;
ZWP_TABLET_TOOL_V1_PROXIMITY_IN_SINCE      : u32 : 1;
ZWP_TABLET_TOOL_V1_PROXIMITY_OUT_SINCE     : u32 : 1;
ZWP_TABLET_TOOL_V1_DOWN_SINCE              : u32 : 1;
ZWP_TABLET_TOOL_V1_UP_SINCE                : u32 : 1;
ZWP_TABLET_TOOL_V1_MOTION_SINCE            : u32 : 1;
ZWP_TABLET_TOOL_V1_PRESSURE_SINCE          : u32 : 1;
ZWP_TABLET_TOOL_V1_DISTANCE_SINCE          : u32 : 1;
ZWP_TABLET_TOOL_V1_TILT_SINCE              : u32 : 1;
ZWP_TABLET_TOOL_V1_ROTATION_SINCE          : u32 : 1;
ZWP_TABLET_TOOL_V1_SLIDER_SINCE            : u32 : 1;
ZWP_TABLET_TOOL_V1_WHEEL_SINCE             : u32 : 1;
ZWP_TABLET_TOOL_V1_BUTTON_SINCE            : u32 : 1;
ZWP_TABLET_TOOL_V1_FRAME_SINCE             : u32 : 1;

zwp_tablet_tool_v1_listener :: struct {
    type              := _stubs_.type;
    hardware_serial   := _stubs_.hardware_serial;
    hardware_id_wacom := _stubs_.hardware_id_wacom;
    capability        := _stubs_.capability;
    done              := _stubs_.done;
    removed           := _stubs_.removed;
    proximity_in      := _stubs_.proximity_in;
    proximity_out     := _stubs_.proximity_out;
    down              := _stubs_.down;
    up                := _stubs_.up;
    motion            := _stubs_.motion;
    pressure          := _stubs_.pressure;
    distance          := _stubs_.distance;
    tilt              := _stubs_.tilt;
    rotation          := _stubs_.rotation;
    slider            := _stubs_.slider;
    wheel             := _stubs_.wheel;
    button            := _stubs_.button;
    frame             := _stubs_.frame;

    _stubs_ :: struct {
        type :: (data: *void,
            self: *zwp_tablet_tool_v1,
            tool_type: u32) -> void #c_call {}
        hardware_serial :: (data: *void,
            self: *zwp_tablet_tool_v1,
            hardware_serial_hi: u32,
            hardware_serial_lo: u32) -> void #c_call {}
        hardware_id_wacom :: (data: *void,
            self: *zwp_tablet_tool_v1,
            hardware_id_hi: u32,
            hardware_id_lo: u32) -> void #c_call {}
        capability :: (data: *void,
            self: *zwp_tablet_tool_v1,
            capability: u32) -> void #c_call {}
        done :: (data: *void,
            self: *zwp_tablet_tool_v1) -> void #c_call {}
        removed :: (data: *void,
            self: *zwp_tablet_tool_v1) -> void #c_call {}
        proximity_in :: (data: *void,
            self: *zwp_tablet_tool_v1,
            serial: u32,
            tablet: *zwp_tablet_v1,
            surface: *wl_surface) -> void #c_call {}
        proximity_out :: (data: *void,
            self: *zwp_tablet_tool_v1) -> void #c_call {}
        down :: (data: *void,
            self: *zwp_tablet_tool_v1,
            serial: u32) -> void #c_call {}
        up :: (data: *void,
            self: *zwp_tablet_tool_v1) -> void #c_call {}
        motion :: (data: *void,
            self: *zwp_tablet_tool_v1,
            x: wl_fixed_t,
            y: wl_fixed_t) -> void #c_call {}
        pressure :: (data: *void,
            self: *zwp_tablet_tool_v1,
            pressure: u32) -> void #c_call {}
        distance :: (data: *void,
            self: *zwp_tablet_tool_v1,
            distance: u32) -> void #c_call {}
        tilt :: (data: *void,
            self: *zwp_tablet_tool_v1,
            tilt_x: s32,
            tilt_y: s32) -> void #c_call {}
        rotation :: (data: *void,
            self: *zwp_tablet_tool_v1,
            degrees: s32) -> void #c_call {}
        slider :: (data: *void,
            self: *zwp_tablet_tool_v1,
            position: s32) -> void #c_call {}
        wheel :: (data: *void,
            self: *zwp_tablet_tool_v1,
            degrees: s32,
            clicks: s32) -> void #c_call {}
        button :: (data: *void,
            self: *zwp_tablet_tool_v1,
            serial: u32,
            button: u32,
            state: u32) -> void #c_call {}
        frame :: (data: *void,
            self: *zwp_tablet_tool_v1,
            time: u32) -> void #c_call {}
    }
}

zwp_tablet_v1_interface: wl_interface;
zwp_tablet_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_tablet_v1_interface;

    set_user_data :: inline (self: *zwp_tablet_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_tablet_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_tablet_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_tablet_v1) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TABLET_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *zwp_tablet_v1, listener: *zwp_tablet_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_TABLET_V1_DESTROY       : u32 : 0;
ZWP_TABLET_V1_DESTROY_SINCE : u32 : 1;
ZWP_TABLET_V1_NAME_SINCE    : u32 : 1;
ZWP_TABLET_V1_ID_SINCE      : u32 : 1;
ZWP_TABLET_V1_PATH_SINCE    : u32 : 1;
ZWP_TABLET_V1_DONE_SINCE    : u32 : 1;
ZWP_TABLET_V1_REMOVED_SINCE : u32 : 1;

zwp_tablet_v1_listener :: struct {
    name    := _stubs_.name;
    id      := _stubs_.id;
    path    := _stubs_.path;
    done    := _stubs_.done;
    removed := _stubs_.removed;

    _stubs_ :: struct {
        name :: (data: *void,
            self: *zwp_tablet_v1,
            name: *u8) -> void #c_call {}
        id :: (data: *void,
            self: *zwp_tablet_v1,
            vid: u32,
            pid: u32) -> void #c_call {}
        path :: (data: *void,
            self: *zwp_tablet_v1,
            path: *u8) -> void #c_call {}
        done :: (data: *void,
            self: *zwp_tablet_v1) -> void #c_call {}
        removed :: (data: *void,
            self: *zwp_tablet_v1) -> void #c_call {}
    }
}


#scope_module
tablet_unstable_v1_protocol_init :: () {
    tablet_unstable_v1_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: zwp_tablet_manager_v1::get_tablet_seat */
        *zwp_tablet_seat_v1_interface,   // 1
        *wl_seat_interface,   // 2
        /* EVENT: zwp_tablet_seat_v1::tablet_added */
        *zwp_tablet_v1_interface,  // 3
        /* EVENT: zwp_tablet_seat_v1::tool_added */
        *zwp_tablet_tool_v1_interface,  // 4
        /* REQUEST: zwp_tablet_tool_v1::set_cursor */
        null,  // 5
        *wl_surface_interface,   // 6
        null,  // 7
        null,  // 8
        /* EVENT: zwp_tablet_tool_v1::type */
        null,  // 9
        /* EVENT: zwp_tablet_tool_v1::hardware_serial */
        null,  // 10
        null,  // 11
        /* EVENT: zwp_tablet_tool_v1::hardware_id_wacom */
        null,  // 12
        null,  // 13
        /* EVENT: zwp_tablet_tool_v1::capability */
        null,  // 14
        /* EVENT: zwp_tablet_tool_v1::proximity_in */
        null,  // 15
        *zwp_tablet_v1_interface,  // 16
        *wl_surface_interface,  // 17
        /* EVENT: zwp_tablet_tool_v1::down */
        null,  // 18
        /* EVENT: zwp_tablet_tool_v1::motion */
        null,  // 19
        null,  // 20
        /* EVENT: zwp_tablet_tool_v1::pressure */
        null,  // 21
        /* EVENT: zwp_tablet_tool_v1::distance */
        null,  // 22
        /* EVENT: zwp_tablet_tool_v1::tilt */
        null,  // 23
        null,  // 24
        /* EVENT: zwp_tablet_tool_v1::rotation */
        null,  // 25
        /* EVENT: zwp_tablet_tool_v1::slider */
        null,  // 26
        /* EVENT: zwp_tablet_tool_v1::wheel */
        null,  // 27
        null,  // 28
        /* EVENT: zwp_tablet_tool_v1::button */
        null,  // 29
        null,  // 30
        null,  // 31
        /* EVENT: zwp_tablet_tool_v1::frame */
        null,  // 32
        /* EVENT: zwp_tablet_v1::name */
        null,  // 33
        /* EVENT: zwp_tablet_v1::id */
        null,  // 34
        null,  // 35
        /* EVENT: zwp_tablet_v1::path */
        null,  // 36
    ];

    zwp_tablet_manager_v1_requests[0] = .{"get_tablet_seat", "no", tablet_unstable_v1_types_storage.data + 1};
    zwp_tablet_manager_v1_requests[1] = .{"destroy", "", tablet_unstable_v1_types_storage.data + 0};
    zwp_tablet_manager_v1_interface = .{
        "zwp_tablet_manager_v1", 1,
        zwp_tablet_manager_v1_requests.count, zwp_tablet_manager_v1_requests.data,
        0, null,
    };

    zwp_tablet_seat_v1_requests[0] = .{"destroy", "", tablet_unstable_v1_types_storage.data + 0};
    zwp_tablet_seat_v1_events[0] = .{"tablet_added", "n", tablet_unstable_v1_types_storage.data + 3};
    zwp_tablet_seat_v1_events[1] = .{"tool_added", "n", tablet_unstable_v1_types_storage.data + 4};
    zwp_tablet_seat_v1_interface = .{
        "zwp_tablet_seat_v1", 1,
        zwp_tablet_seat_v1_requests.count, zwp_tablet_seat_v1_requests.data,
        zwp_tablet_seat_v1_events.count, zwp_tablet_seat_v1_events.data,
    };

    zwp_tablet_tool_v1_requests[0] = .{"set_cursor", "u?oii", tablet_unstable_v1_types_storage.data + 5};
    zwp_tablet_tool_v1_requests[1] = .{"destroy", "", tablet_unstable_v1_types_storage.data + 0};
    zwp_tablet_tool_v1_events[0] = .{"type", "u", tablet_unstable_v1_types_storage.data + 9};
    zwp_tablet_tool_v1_events[1] = .{"hardware_serial", "uu", tablet_unstable_v1_types_storage.data + 10};
    zwp_tablet_tool_v1_events[2] = .{"hardware_id_wacom", "uu", tablet_unstable_v1_types_storage.data + 12};
    zwp_tablet_tool_v1_events[3] = .{"capability", "u", tablet_unstable_v1_types_storage.data + 14};
    zwp_tablet_tool_v1_events[4] = .{"done", "", tablet_unstable_v1_types_storage.data + 0};
    zwp_tablet_tool_v1_events[5] = .{"removed", "", tablet_unstable_v1_types_storage.data + 0};
    zwp_tablet_tool_v1_events[6] = .{"proximity_in", "uoo", tablet_unstable_v1_types_storage.data + 15};
    zwp_tablet_tool_v1_events[7] = .{"proximity_out", "", tablet_unstable_v1_types_storage.data + 0};
    zwp_tablet_tool_v1_events[8] = .{"down", "u", tablet_unstable_v1_types_storage.data + 18};
    zwp_tablet_tool_v1_events[9] = .{"up", "", tablet_unstable_v1_types_storage.data + 0};
    zwp_tablet_tool_v1_events[10] = .{"motion", "ff", tablet_unstable_v1_types_storage.data + 19};
    zwp_tablet_tool_v1_events[11] = .{"pressure", "u", tablet_unstable_v1_types_storage.data + 21};
    zwp_tablet_tool_v1_events[12] = .{"distance", "u", tablet_unstable_v1_types_storage.data + 22};
    zwp_tablet_tool_v1_events[13] = .{"tilt", "ii", tablet_unstable_v1_types_storage.data + 23};
    zwp_tablet_tool_v1_events[14] = .{"rotation", "i", tablet_unstable_v1_types_storage.data + 25};
    zwp_tablet_tool_v1_events[15] = .{"slider", "i", tablet_unstable_v1_types_storage.data + 26};
    zwp_tablet_tool_v1_events[16] = .{"wheel", "ii", tablet_unstable_v1_types_storage.data + 27};
    zwp_tablet_tool_v1_events[17] = .{"button", "uuu", tablet_unstable_v1_types_storage.data + 29};
    zwp_tablet_tool_v1_events[18] = .{"frame", "u", tablet_unstable_v1_types_storage.data + 32};
    zwp_tablet_tool_v1_interface = .{
        "zwp_tablet_tool_v1", 1,
        zwp_tablet_tool_v1_requests.count, zwp_tablet_tool_v1_requests.data,
        zwp_tablet_tool_v1_events.count, zwp_tablet_tool_v1_events.data,
    };

    zwp_tablet_v1_requests[0] = .{"destroy", "", tablet_unstable_v1_types_storage.data + 0};
    zwp_tablet_v1_events[0] = .{"name", "s", tablet_unstable_v1_types_storage.data + 33};
    zwp_tablet_v1_events[1] = .{"id", "uu", tablet_unstable_v1_types_storage.data + 34};
    zwp_tablet_v1_events[2] = .{"path", "s", tablet_unstable_v1_types_storage.data + 36};
    zwp_tablet_v1_events[3] = .{"done", "", tablet_unstable_v1_types_storage.data + 0};
    zwp_tablet_v1_events[4] = .{"removed", "", tablet_unstable_v1_types_storage.data + 0};
    zwp_tablet_v1_interface = .{
        "zwp_tablet_v1", 1,
        zwp_tablet_v1_requests.count, zwp_tablet_v1_requests.data,
        zwp_tablet_v1_events.count, zwp_tablet_v1_events.data,
    };
}


#scope_file
tablet_unstable_v1_types_storage: []*wl_interface;

zwp_tablet_manager_v1_requests: [2]wl_message;

zwp_tablet_seat_v1_requests: [1]wl_message;
zwp_tablet_seat_v1_events  : [2]wl_message;

zwp_tablet_tool_v1_requests: [2]wl_message;
zwp_tablet_tool_v1_events  : [19]wl_message;

zwp_tablet_v1_requests: [1]wl_message;
zwp_tablet_v1_events  : [5]wl_message;

#assert size_of(zwp_tablet_manager_v1) == 0 "wayland-scanner bug: zwp_tablet_manager_v1 is non-empty";
#assert size_of(zwp_tablet_seat_v1) == 0 "wayland-scanner bug: zwp_tablet_seat_v1 is non-empty";
#assert size_of(zwp_tablet_tool_v1) == 0 "wayland-scanner bug: zwp_tablet_tool_v1 is non-empty";
#assert size_of(zwp_tablet_v1) == 0 "wayland-scanner bug: zwp_tablet_v1 is non-empty";
