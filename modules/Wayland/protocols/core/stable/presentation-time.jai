/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: presentation_time
 */

wp_presentation_interface: wl_interface;
wp_presentation :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *wp_presentation_interface;

    /* ENUM: wp_presentation::error */
    error_invalid_timestamp : u32 : 0;
    error_invalid_flag      : u32 : 1;

    set_user_data :: inline (self: *wp_presentation, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *wp_presentation) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *wp_presentation) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *wp_presentation) #c_call {
        wl_proxy.marshal_flags(
            self, WP_PRESENTATION_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    feedback :: inline (self: *wp_presentation, surface: *wl_surface) -> *wp_presentation_feedback #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, WP_PRESENTATION_FEEDBACK,
            *wp_presentation_feedback_interface, wl_proxy.get_version(self), 0,
            surface, null);
        return cast(*wp_presentation_feedback) ret;
    }

    add_listener :: inline (self: *wp_presentation, listener: *wp_presentation_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

WP_PRESENTATION_DESTROY        : u32 : 0;
WP_PRESENTATION_FEEDBACK       : u32 : 1;
WP_PRESENTATION_DESTROY_SINCE  : u32 : 1;
WP_PRESENTATION_FEEDBACK_SINCE : u32 : 1;
WP_PRESENTATION_CLOCK_ID_SINCE : u32 : 1;

wp_presentation_listener :: struct {
    clock_id := _stubs_.clock_id;

    _stubs_ :: struct {
        clock_id :: (data: *void,
            self: *wp_presentation,
            clk_id: u32) -> void #c_call {}
    }
}

wp_presentation_feedback_interface: wl_interface;
wp_presentation_feedback :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *wp_presentation_feedback_interface;

    /* ENUM: wp_presentation_feedback::kind */
    kind_vsync         : u32 : 0x1;
    kind_hw_clock      : u32 : 0x2;
    kind_hw_completion : u32 : 0x4;
    kind_zero_copy     : u32 : 0x8;

    set_user_data :: inline (self: *wp_presentation_feedback, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *wp_presentation_feedback) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *wp_presentation_feedback) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *wp_presentation_feedback) #c_call {
        wl_proxy.destroy(self);
    }

    add_listener :: inline (self: *wp_presentation_feedback, listener: *wp_presentation_feedback_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}
WP_PRESENTATION_FEEDBACK_SYNC_OUTPUT_SINCE : u32 : 1;
WP_PRESENTATION_FEEDBACK_PRESENTED_SINCE   : u32 : 1;
WP_PRESENTATION_FEEDBACK_DISCARDED_SINCE   : u32 : 1;

wp_presentation_feedback_listener :: struct {
    sync_output := _stubs_.sync_output;
    presented   := _stubs_.presented;
    discarded   := _stubs_.discarded;

    _stubs_ :: struct {
        sync_output :: (data: *void,
            self: *wp_presentation_feedback,
            output: *wl_output) -> void #c_call {}
        presented :: (data: *void,
            self: *wp_presentation_feedback,
            tv_sec_hi: u32,
            tv_sec_lo: u32,
            tv_nsec: u32,
            refresh: u32,
            seq_hi: u32,
            seq_lo: u32,
            flags: u32) -> void #c_call {}
        discarded :: (data: *void,
            self: *wp_presentation_feedback) -> void #c_call {}
    }
}


#scope_module
presentation_time_protocol_init :: () {
    presentation_time_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: wp_presentation::feedback */
        *wl_surface_interface,   // 1
        *wp_presentation_feedback_interface,   // 2
        /* EVENT: wp_presentation::clock_id */
        null,  // 3
        /* EVENT: wp_presentation_feedback::sync_output */
        *wl_output_interface,  // 4
        /* EVENT: wp_presentation_feedback::presented */
        null,  // 5
        null,  // 6
        null,  // 7
        null,  // 8
        null,  // 9
        null,  // 10
        null,  // 11
    ];

    wp_presentation_requests[0] = .{"destroy", "", presentation_time_types_storage.data + 0};
    wp_presentation_requests[1] = .{"feedback", "on", presentation_time_types_storage.data + 1};
    wp_presentation_events[0] = .{"clock_id", "u", presentation_time_types_storage.data + 3};
    wp_presentation_interface = .{
        "wp_presentation", 1,
        wp_presentation_requests.count, wp_presentation_requests.data,
        wp_presentation_events.count, wp_presentation_events.data,
    };

    wp_presentation_feedback_events[0] = .{"sync_output", "o", presentation_time_types_storage.data + 4};
    wp_presentation_feedback_events[1] = .{"presented", "uuuuuuu", presentation_time_types_storage.data + 5};
    wp_presentation_feedback_events[2] = .{"discarded", "", presentation_time_types_storage.data + 0};
    wp_presentation_feedback_interface = .{
        "wp_presentation_feedback", 1,
        0, null,
        wp_presentation_feedback_events.count, wp_presentation_feedback_events.data,
    };
}


#scope_file
presentation_time_types_storage: []*wl_interface;

wp_presentation_requests: [2]wl_message;
wp_presentation_events  : [1]wl_message;

wp_presentation_feedback_events  : [3]wl_message;

#assert size_of(wp_presentation) == 0 "wayland-scanner bug: wp_presentation is non-empty";
#assert size_of(wp_presentation_feedback) == 0 "wayland-scanner bug: wp_presentation_feedback is non-empty";
