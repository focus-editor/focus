/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: viewporter
 */

wp_viewporter_interface: wl_interface;
wp_viewporter :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *wp_viewporter_interface;

    /* ENUM: wp_viewporter::error */
    error_viewport_exists : u32 : 0;

    set_user_data :: inline (self: *wp_viewporter, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *wp_viewporter) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *wp_viewporter) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *wp_viewporter) #c_call {
        wl_proxy.marshal_flags(
            self, WP_VIEWPORTER_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    get_viewport :: inline (self: *wp_viewporter, surface: *wl_surface) -> *wp_viewport #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, WP_VIEWPORTER_GET_VIEWPORT,
            *wp_viewport_interface, wl_proxy.get_version(self), 0,
            null, surface);
        return cast(*wp_viewport) ret;
    }
}

WP_VIEWPORTER_DESTROY            : u32 : 0;
WP_VIEWPORTER_GET_VIEWPORT       : u32 : 1;
WP_VIEWPORTER_DESTROY_SINCE      : u32 : 1;
WP_VIEWPORTER_GET_VIEWPORT_SINCE : u32 : 1;

wp_viewport_interface: wl_interface;
wp_viewport :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *wp_viewport_interface;

    /* ENUM: wp_viewport::error */
    error_bad_value     : u32 : 0;
    error_bad_size      : u32 : 1;
    error_out_of_buffer : u32 : 2;
    error_no_surface    : u32 : 3;

    set_user_data :: inline (self: *wp_viewport, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *wp_viewport) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *wp_viewport) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *wp_viewport) #c_call {
        wl_proxy.marshal_flags(
            self, WP_VIEWPORT_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    set_source :: inline (self: *wp_viewport, x: wl_fixed_t, y: wl_fixed_t, width: wl_fixed_t, height: wl_fixed_t) #c_call {
        wl_proxy.marshal_flags(
            self, WP_VIEWPORT_SET_SOURCE,
            null, wl_proxy.get_version(self), 0,
            x, y, width, height);
    }

    set_destination :: inline (self: *wp_viewport, width: s32, height: s32) #c_call {
        wl_proxy.marshal_flags(
            self, WP_VIEWPORT_SET_DESTINATION,
            null, wl_proxy.get_version(self), 0,
            width, height);
    }
}

WP_VIEWPORT_DESTROY               : u32 : 0;
WP_VIEWPORT_SET_SOURCE            : u32 : 1;
WP_VIEWPORT_SET_DESTINATION       : u32 : 2;
WP_VIEWPORT_DESTROY_SINCE         : u32 : 1;
WP_VIEWPORT_SET_SOURCE_SINCE      : u32 : 1;
WP_VIEWPORT_SET_DESTINATION_SINCE : u32 : 1;


#scope_module
viewporter_protocol_init :: () {
    viewporter_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: wp_viewporter::get_viewport */
        *wp_viewport_interface,   // 1
        *wl_surface_interface,   // 2
        /* REQUEST: wp_viewport::set_source */
        null,  // 3
        null,  // 4
        null,  // 5
        null,  // 6
        /* REQUEST: wp_viewport::set_destination */
        null,  // 7
        null,  // 8
    ];

    wp_viewporter_requests[0] = .{"destroy", "", viewporter_types_storage.data + 0};
    wp_viewporter_requests[1] = .{"get_viewport", "no", viewporter_types_storage.data + 1};
    wp_viewporter_interface = .{
        "wp_viewporter", 1,
        wp_viewporter_requests.count, wp_viewporter_requests.data,
        0, null,
    };

    wp_viewport_requests[0] = .{"destroy", "", viewporter_types_storage.data + 0};
    wp_viewport_requests[1] = .{"set_source", "ffff", viewporter_types_storage.data + 3};
    wp_viewport_requests[2] = .{"set_destination", "ii", viewporter_types_storage.data + 7};
    wp_viewport_interface = .{
        "wp_viewport", 1,
        wp_viewport_requests.count, wp_viewport_requests.data,
        0, null,
    };
}


#scope_file
viewporter_types_storage: []*wl_interface;

wp_viewporter_requests: [2]wl_message;

wp_viewport_requests: [3]wl_message;

#assert size_of(wp_viewporter) == 0 "wayland-scanner bug: wp_viewporter is non-empty";
#assert size_of(wp_viewport) == 0 "wayland-scanner bug: wp_viewport is non-empty";
