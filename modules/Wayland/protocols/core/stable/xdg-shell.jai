/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: xdg_shell
 */

xdg_wm_base_interface: wl_interface;
xdg_wm_base :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *xdg_wm_base_interface;

    /* ENUM: xdg_wm_base::error */
    error_role                  : u32 : 0;
    error_defunct_surfaces      : u32 : 1;
    error_not_the_topmost_popup : u32 : 2;
    error_invalid_popup_parent  : u32 : 3;
    error_invalid_surface_state : u32 : 4;
    error_invalid_positioner    : u32 : 5;
    error_unresponsive          : u32 : 6;

    set_user_data :: inline (self: *xdg_wm_base, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *xdg_wm_base) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *xdg_wm_base) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *xdg_wm_base) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_WM_BASE_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    create_positioner :: inline (self: *xdg_wm_base) -> *xdg_positioner #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, XDG_WM_BASE_CREATE_POSITIONER,
            *xdg_positioner_interface, wl_proxy.get_version(self), 0,
            null);
        return cast(*xdg_positioner) ret;
    }

    get_xdg_surface :: inline (self: *xdg_wm_base, surface: *wl_surface) -> *xdg_surface #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, XDG_WM_BASE_GET_XDG_SURFACE,
            *xdg_surface_interface, wl_proxy.get_version(self), 0,
            null, surface);
        return cast(*xdg_surface) ret;
    }

    pong :: inline (self: *xdg_wm_base, serial: u32) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_WM_BASE_PONG,
            null, wl_proxy.get_version(self), 0,
            serial);
    }

    add_listener :: inline (self: *xdg_wm_base, listener: *xdg_wm_base_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

XDG_WM_BASE_DESTROY                 : u32 : 0;
XDG_WM_BASE_CREATE_POSITIONER       : u32 : 1;
XDG_WM_BASE_GET_XDG_SURFACE         : u32 : 2;
XDG_WM_BASE_PONG                    : u32 : 3;
XDG_WM_BASE_DESTROY_SINCE           : u32 : 1;
XDG_WM_BASE_CREATE_POSITIONER_SINCE : u32 : 1;
XDG_WM_BASE_GET_XDG_SURFACE_SINCE   : u32 : 1;
XDG_WM_BASE_PONG_SINCE              : u32 : 1;
XDG_WM_BASE_PING_SINCE              : u32 : 1;

xdg_wm_base_listener :: struct {
    ping := _stubs_.ping;

    _stubs_ :: struct {
        ping :: (data: *void,
            self: *xdg_wm_base,
            serial: u32) -> void #c_call {}
    }
}

xdg_positioner_interface: wl_interface;
xdg_positioner :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *xdg_positioner_interface;

    /* ENUM: xdg_positioner::error */
    error_invalid_input : u32 : 0;

    /* ENUM: xdg_positioner::anchor */
    anchor_none         : u32 : 0;
    anchor_top          : u32 : 1;
    anchor_bottom       : u32 : 2;
    anchor_left         : u32 : 3;
    anchor_right        : u32 : 4;
    anchor_top_left     : u32 : 5;
    anchor_bottom_left  : u32 : 6;
    anchor_top_right    : u32 : 7;
    anchor_bottom_right : u32 : 8;

    /* ENUM: xdg_positioner::gravity */
    gravity_none         : u32 : 0;
    gravity_top          : u32 : 1;
    gravity_bottom       : u32 : 2;
    gravity_left         : u32 : 3;
    gravity_right        : u32 : 4;
    gravity_top_left     : u32 : 5;
    gravity_bottom_left  : u32 : 6;
    gravity_top_right    : u32 : 7;
    gravity_bottom_right : u32 : 8;

    /* ENUM: xdg_positioner::constraint_adjustment */
    constraint_adjustment_none     : u32 : 0;
    constraint_adjustment_slide_x  : u32 : 1;
    constraint_adjustment_slide_y  : u32 : 2;
    constraint_adjustment_flip_x   : u32 : 4;
    constraint_adjustment_flip_y   : u32 : 8;
    constraint_adjustment_resize_x : u32 : 16;
    constraint_adjustment_resize_y : u32 : 32;

    set_user_data :: inline (self: *xdg_positioner, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *xdg_positioner) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *xdg_positioner) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *xdg_positioner) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_POSITIONER_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    set_size :: inline (self: *xdg_positioner, width: s32, height: s32) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_POSITIONER_SET_SIZE,
            null, wl_proxy.get_version(self), 0,
            width, height);
    }

    set_anchor_rect :: inline (self: *xdg_positioner, x: s32, y: s32, width: s32, height: s32) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_POSITIONER_SET_ANCHOR_RECT,
            null, wl_proxy.get_version(self), 0,
            x, y, width, height);
    }

    set_anchor :: inline (self: *xdg_positioner, anchor: u32) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_POSITIONER_SET_ANCHOR,
            null, wl_proxy.get_version(self), 0,
            anchor);
    }

    set_gravity :: inline (self: *xdg_positioner, gravity: u32) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_POSITIONER_SET_GRAVITY,
            null, wl_proxy.get_version(self), 0,
            gravity);
    }

    set_constraint_adjustment :: inline (self: *xdg_positioner, constraint_adjustment: u32) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_POSITIONER_SET_CONSTRAINT_ADJUSTMENT,
            null, wl_proxy.get_version(self), 0,
            constraint_adjustment);
    }

    set_offset :: inline (self: *xdg_positioner, x: s32, y: s32) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_POSITIONER_SET_OFFSET,
            null, wl_proxy.get_version(self), 0,
            x, y);
    }

    set_reactive :: inline (self: *xdg_positioner) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_POSITIONER_SET_REACTIVE,
            null, wl_proxy.get_version(self), 0);
    }

    set_parent_size :: inline (self: *xdg_positioner, parent_width: s32, parent_height: s32) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_POSITIONER_SET_PARENT_SIZE,
            null, wl_proxy.get_version(self), 0,
            parent_width, parent_height);
    }

    set_parent_configure :: inline (self: *xdg_positioner, serial: u32) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_POSITIONER_SET_PARENT_CONFIGURE,
            null, wl_proxy.get_version(self), 0,
            serial);
    }
}

XDG_POSITIONER_DESTROY                         : u32 : 0;
XDG_POSITIONER_SET_SIZE                        : u32 : 1;
XDG_POSITIONER_SET_ANCHOR_RECT                 : u32 : 2;
XDG_POSITIONER_SET_ANCHOR                      : u32 : 3;
XDG_POSITIONER_SET_GRAVITY                     : u32 : 4;
XDG_POSITIONER_SET_CONSTRAINT_ADJUSTMENT       : u32 : 5;
XDG_POSITIONER_SET_OFFSET                      : u32 : 6;
XDG_POSITIONER_SET_REACTIVE                    : u32 : 7;
XDG_POSITIONER_SET_PARENT_SIZE                 : u32 : 8;
XDG_POSITIONER_SET_PARENT_CONFIGURE            : u32 : 9;
XDG_POSITIONER_DESTROY_SINCE                   : u32 : 1;
XDG_POSITIONER_SET_SIZE_SINCE                  : u32 : 1;
XDG_POSITIONER_SET_ANCHOR_RECT_SINCE           : u32 : 1;
XDG_POSITIONER_SET_ANCHOR_SINCE                : u32 : 1;
XDG_POSITIONER_SET_GRAVITY_SINCE               : u32 : 1;
XDG_POSITIONER_SET_CONSTRAINT_ADJUSTMENT_SINCE : u32 : 1;
XDG_POSITIONER_SET_OFFSET_SINCE                : u32 : 1;
XDG_POSITIONER_SET_REACTIVE_SINCE              : u32 : 3;
XDG_POSITIONER_SET_PARENT_SIZE_SINCE           : u32 : 3;
XDG_POSITIONER_SET_PARENT_CONFIGURE_SINCE      : u32 : 3;

xdg_surface_interface: wl_interface;
xdg_surface :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *xdg_surface_interface;

    /* ENUM: xdg_surface::error */
    error_not_constructed     : u32 : 1;
    error_already_constructed : u32 : 2;
    error_unconfigured_buffer : u32 : 3;
    error_invalid_serial      : u32 : 4;
    error_invalid_size        : u32 : 5;
    error_defunct_role_object : u32 : 6;

    set_user_data :: inline (self: *xdg_surface, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *xdg_surface) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *xdg_surface) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *xdg_surface) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_SURFACE_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    get_toplevel :: inline (self: *xdg_surface) -> *xdg_toplevel #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, XDG_SURFACE_GET_TOPLEVEL,
            *xdg_toplevel_interface, wl_proxy.get_version(self), 0,
            null);
        return cast(*xdg_toplevel) ret;
    }

    get_popup :: inline (self: *xdg_surface, parent: *xdg_surface, positioner: *xdg_positioner) -> *xdg_popup #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, XDG_SURFACE_GET_POPUP,
            *xdg_popup_interface, wl_proxy.get_version(self), 0,
            null, parent, positioner);
        return cast(*xdg_popup) ret;
    }

    set_window_geometry :: inline (self: *xdg_surface, x: s32, y: s32, width: s32, height: s32) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_SURFACE_SET_WINDOW_GEOMETRY,
            null, wl_proxy.get_version(self), 0,
            x, y, width, height);
    }

    ack_configure :: inline (self: *xdg_surface, serial: u32) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_SURFACE_ACK_CONFIGURE,
            null, wl_proxy.get_version(self), 0,
            serial);
    }

    add_listener :: inline (self: *xdg_surface, listener: *xdg_surface_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

XDG_SURFACE_DESTROY                   : u32 : 0;
XDG_SURFACE_GET_TOPLEVEL              : u32 : 1;
XDG_SURFACE_GET_POPUP                 : u32 : 2;
XDG_SURFACE_SET_WINDOW_GEOMETRY       : u32 : 3;
XDG_SURFACE_ACK_CONFIGURE             : u32 : 4;
XDG_SURFACE_DESTROY_SINCE             : u32 : 1;
XDG_SURFACE_GET_TOPLEVEL_SINCE        : u32 : 1;
XDG_SURFACE_GET_POPUP_SINCE           : u32 : 1;
XDG_SURFACE_SET_WINDOW_GEOMETRY_SINCE : u32 : 1;
XDG_SURFACE_ACK_CONFIGURE_SINCE       : u32 : 1;
XDG_SURFACE_CONFIGURE_SINCE           : u32 : 1;

xdg_surface_listener :: struct {
    configure := _stubs_.configure;

    _stubs_ :: struct {
        configure :: (data: *void,
            self: *xdg_surface,
            serial: u32) -> void #c_call {}
    }
}

xdg_toplevel_interface: wl_interface;
xdg_toplevel :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *xdg_toplevel_interface;

    /* ENUM: xdg_toplevel::error */
    error_invalid_resize_edge : u32 : 0;
    error_invalid_parent      : u32 : 1;
    error_invalid_size        : u32 : 2;

    /* ENUM: xdg_toplevel::resize_edge */
    resize_edge_none         : u32 : 0;
    resize_edge_top          : u32 : 1;
    resize_edge_bottom       : u32 : 2;
    resize_edge_left         : u32 : 4;
    resize_edge_top_left     : u32 : 5;
    resize_edge_bottom_left  : u32 : 6;
    resize_edge_right        : u32 : 8;
    resize_edge_top_right    : u32 : 9;
    resize_edge_bottom_right : u32 : 10;

    /* ENUM: xdg_toplevel::state */
    state_maximized    : u32 : 1;
    state_fullscreen   : u32 : 2;
    state_resizing     : u32 : 3;
    state_activated    : u32 : 4;
    state_tiled_left   : u32 : 5;
    state_tiled_right  : u32 : 6;
    state_tiled_top    : u32 : 7;
    state_tiled_bottom : u32 : 8;

    /* ENUM: xdg_toplevel::wm_capabilities */
    wm_capabilities_window_menu : u32 : 1;
    wm_capabilities_maximize    : u32 : 2;
    wm_capabilities_fullscreen  : u32 : 3;
    wm_capabilities_minimize    : u32 : 4;

    set_user_data :: inline (self: *xdg_toplevel, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *xdg_toplevel) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *xdg_toplevel) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *xdg_toplevel) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_TOPLEVEL_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    set_parent :: inline (self: *xdg_toplevel, parent: *xdg_toplevel) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_TOPLEVEL_SET_PARENT,
            null, wl_proxy.get_version(self), 0,
            parent);
    }

    set_title :: inline (self: *xdg_toplevel, title: *u8) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_TOPLEVEL_SET_TITLE,
            null, wl_proxy.get_version(self), 0,
            title);
    }

    set_app_id :: inline (self: *xdg_toplevel, app_id: *u8) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_TOPLEVEL_SET_APP_ID,
            null, wl_proxy.get_version(self), 0,
            app_id);
    }

    show_window_menu :: inline (self: *xdg_toplevel, seat: *wl_seat, serial: u32, x: s32, y: s32) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_TOPLEVEL_SHOW_WINDOW_MENU,
            null, wl_proxy.get_version(self), 0,
            seat, serial, x, y);
    }

    move :: inline (self: *xdg_toplevel, seat: *wl_seat, serial: u32) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_TOPLEVEL_MOVE,
            null, wl_proxy.get_version(self), 0,
            seat, serial);
    }

    resize :: inline (self: *xdg_toplevel, seat: *wl_seat, serial: u32, edges: u32) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_TOPLEVEL_RESIZE,
            null, wl_proxy.get_version(self), 0,
            seat, serial, edges);
    }

    set_max_size :: inline (self: *xdg_toplevel, width: s32, height: s32) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_TOPLEVEL_SET_MAX_SIZE,
            null, wl_proxy.get_version(self), 0,
            width, height);
    }

    set_min_size :: inline (self: *xdg_toplevel, width: s32, height: s32) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_TOPLEVEL_SET_MIN_SIZE,
            null, wl_proxy.get_version(self), 0,
            width, height);
    }

    set_maximized :: inline (self: *xdg_toplevel) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_TOPLEVEL_SET_MAXIMIZED,
            null, wl_proxy.get_version(self), 0);
    }

    unset_maximized :: inline (self: *xdg_toplevel) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_TOPLEVEL_UNSET_MAXIMIZED,
            null, wl_proxy.get_version(self), 0);
    }

    set_fullscreen :: inline (self: *xdg_toplevel, output: *wl_output) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_TOPLEVEL_SET_FULLSCREEN,
            null, wl_proxy.get_version(self), 0,
            output);
    }

    unset_fullscreen :: inline (self: *xdg_toplevel) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_TOPLEVEL_UNSET_FULLSCREEN,
            null, wl_proxy.get_version(self), 0);
    }

    set_minimized :: inline (self: *xdg_toplevel) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_TOPLEVEL_SET_MINIMIZED,
            null, wl_proxy.get_version(self), 0);
    }

    add_listener :: inline (self: *xdg_toplevel, listener: *xdg_toplevel_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

XDG_TOPLEVEL_DESTROY                : u32 : 0;
XDG_TOPLEVEL_SET_PARENT             : u32 : 1;
XDG_TOPLEVEL_SET_TITLE              : u32 : 2;
XDG_TOPLEVEL_SET_APP_ID             : u32 : 3;
XDG_TOPLEVEL_SHOW_WINDOW_MENU       : u32 : 4;
XDG_TOPLEVEL_MOVE                   : u32 : 5;
XDG_TOPLEVEL_RESIZE                 : u32 : 6;
XDG_TOPLEVEL_SET_MAX_SIZE           : u32 : 7;
XDG_TOPLEVEL_SET_MIN_SIZE           : u32 : 8;
XDG_TOPLEVEL_SET_MAXIMIZED          : u32 : 9;
XDG_TOPLEVEL_UNSET_MAXIMIZED        : u32 : 10;
XDG_TOPLEVEL_SET_FULLSCREEN         : u32 : 11;
XDG_TOPLEVEL_UNSET_FULLSCREEN       : u32 : 12;
XDG_TOPLEVEL_SET_MINIMIZED          : u32 : 13;
XDG_TOPLEVEL_DESTROY_SINCE          : u32 : 1;
XDG_TOPLEVEL_SET_PARENT_SINCE       : u32 : 1;
XDG_TOPLEVEL_SET_TITLE_SINCE        : u32 : 1;
XDG_TOPLEVEL_SET_APP_ID_SINCE       : u32 : 1;
XDG_TOPLEVEL_SHOW_WINDOW_MENU_SINCE : u32 : 1;
XDG_TOPLEVEL_MOVE_SINCE             : u32 : 1;
XDG_TOPLEVEL_RESIZE_SINCE           : u32 : 1;
XDG_TOPLEVEL_SET_MAX_SIZE_SINCE     : u32 : 1;
XDG_TOPLEVEL_SET_MIN_SIZE_SINCE     : u32 : 1;
XDG_TOPLEVEL_SET_MAXIMIZED_SINCE    : u32 : 1;
XDG_TOPLEVEL_UNSET_MAXIMIZED_SINCE  : u32 : 1;
XDG_TOPLEVEL_SET_FULLSCREEN_SINCE   : u32 : 1;
XDG_TOPLEVEL_UNSET_FULLSCREEN_SINCE : u32 : 1;
XDG_TOPLEVEL_SET_MINIMIZED_SINCE    : u32 : 1;
XDG_TOPLEVEL_CONFIGURE_SINCE        : u32 : 1;
XDG_TOPLEVEL_CLOSE_SINCE            : u32 : 1;
XDG_TOPLEVEL_CONFIGURE_BOUNDS_SINCE : u32 : 4;
XDG_TOPLEVEL_WM_CAPABILITIES_SINCE  : u32 : 5;

xdg_toplevel_listener :: struct {
    configure        := _stubs_.configure;
    close            := _stubs_.close;
    configure_bounds := _stubs_.configure_bounds;
    wm_capabilities  := _stubs_.wm_capabilities;

    _stubs_ :: struct {
        configure :: (data: *void,
            self: *xdg_toplevel,
            width: s32,
            height: s32,
            states: *wl_array) -> void #c_call {}
        close :: (data: *void,
            self: *xdg_toplevel) -> void #c_call {}
        configure_bounds :: (data: *void,
            self: *xdg_toplevel,
            width: s32,
            height: s32) -> void #c_call {}
        wm_capabilities :: (data: *void,
            self: *xdg_toplevel,
            capabilities: *wl_array) -> void #c_call {}
    }
}

xdg_popup_interface: wl_interface;
xdg_popup :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *xdg_popup_interface;

    /* ENUM: xdg_popup::error */
    error_invalid_grab : u32 : 0;

    set_user_data :: inline (self: *xdg_popup, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *xdg_popup) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *xdg_popup) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *xdg_popup) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_POPUP_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    grab :: inline (self: *xdg_popup, seat: *wl_seat, serial: u32) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_POPUP_GRAB,
            null, wl_proxy.get_version(self), 0,
            seat, serial);
    }

    reposition :: inline (self: *xdg_popup, positioner: *xdg_positioner, token: u32) #c_call {
        wl_proxy.marshal_flags(
            self, XDG_POPUP_REPOSITION,
            null, wl_proxy.get_version(self), 0,
            positioner, token);
    }

    add_listener :: inline (self: *xdg_popup, listener: *xdg_popup_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

XDG_POPUP_DESTROY            : u32 : 0;
XDG_POPUP_GRAB               : u32 : 1;
XDG_POPUP_REPOSITION         : u32 : 2;
XDG_POPUP_DESTROY_SINCE      : u32 : 1;
XDG_POPUP_GRAB_SINCE         : u32 : 1;
XDG_POPUP_REPOSITION_SINCE   : u32 : 3;
XDG_POPUP_CONFIGURE_SINCE    : u32 : 1;
XDG_POPUP_POPUP_DONE_SINCE   : u32 : 1;
XDG_POPUP_REPOSITIONED_SINCE : u32 : 3;

xdg_popup_listener :: struct {
    configure    := _stubs_.configure;
    popup_done   := _stubs_.popup_done;
    repositioned := _stubs_.repositioned;

    _stubs_ :: struct {
        configure :: (data: *void,
            self: *xdg_popup,
            x: s32,
            y: s32,
            width: s32,
            height: s32) -> void #c_call {}
        popup_done :: (data: *void,
            self: *xdg_popup) -> void #c_call {}
        repositioned :: (data: *void,
            self: *xdg_popup,
            token: u32) -> void #c_call {}
    }
}


#scope_module
xdg_shell_protocol_init :: () {
    xdg_shell_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: xdg_wm_base::create_positioner */
        *xdg_positioner_interface,   // 1
        /* REQUEST: xdg_wm_base::get_xdg_surface */
        *xdg_surface_interface,   // 2
        *wl_surface_interface,   // 3
        /* REQUEST: xdg_wm_base::pong */
        null,  // 4
        /* EVENT: xdg_wm_base::ping */
        null,  // 5
        /* REQUEST: xdg_positioner::set_size */
        null,  // 6
        null,  // 7
        /* REQUEST: xdg_positioner::set_anchor_rect */
        null,  // 8
        null,  // 9
        null,  // 10
        null,  // 11
        /* REQUEST: xdg_positioner::set_anchor */
        null,  // 12
        /* REQUEST: xdg_positioner::set_gravity */
        null,  // 13
        /* REQUEST: xdg_positioner::set_constraint_adjustment */
        null,  // 14
        /* REQUEST: xdg_positioner::set_offset */
        null,  // 15
        null,  // 16
        /* REQUEST: xdg_positioner::set_parent_size */
        null,  // 17
        null,  // 18
        /* REQUEST: xdg_positioner::set_parent_configure */
        null,  // 19
        /* REQUEST: xdg_surface::get_toplevel */
        *xdg_toplevel_interface,   // 20
        /* REQUEST: xdg_surface::get_popup */
        *xdg_popup_interface,   // 21
        *xdg_surface_interface,   // 22
        *xdg_positioner_interface,   // 23
        /* REQUEST: xdg_surface::set_window_geometry */
        null,  // 24
        null,  // 25
        null,  // 26
        null,  // 27
        /* REQUEST: xdg_surface::ack_configure */
        null,  // 28
        /* EVENT: xdg_surface::configure */
        null,  // 29
        /* REQUEST: xdg_toplevel::set_parent */
        *xdg_toplevel_interface,   // 30
        /* REQUEST: xdg_toplevel::set_title */
        null,  // 31
        /* REQUEST: xdg_toplevel::set_app_id */
        null,  // 32
        /* REQUEST: xdg_toplevel::show_window_menu */
        *wl_seat_interface,   // 33
        null,  // 34
        null,  // 35
        null,  // 36
        /* REQUEST: xdg_toplevel::move */
        *wl_seat_interface,   // 37
        null,  // 38
        /* REQUEST: xdg_toplevel::resize */
        *wl_seat_interface,   // 39
        null,  // 40
        null,  // 41
        /* REQUEST: xdg_toplevel::set_max_size */
        null,  // 42
        null,  // 43
        /* REQUEST: xdg_toplevel::set_min_size */
        null,  // 44
        null,  // 45
        /* REQUEST: xdg_toplevel::set_fullscreen */
        *wl_output_interface,   // 46
        /* EVENT: xdg_toplevel::configure */
        null,  // 47
        null,  // 48
        null,  // 49
        /* EVENT: xdg_toplevel::configure_bounds */
        null,  // 50
        null,  // 51
        /* EVENT: xdg_toplevel::wm_capabilities */
        null,  // 52
        /* REQUEST: xdg_popup::grab */
        *wl_seat_interface,   // 53
        null,  // 54
        /* REQUEST: xdg_popup::reposition */
        *xdg_positioner_interface,   // 55
        null,  // 56
        /* EVENT: xdg_popup::configure */
        null,  // 57
        null,  // 58
        null,  // 59
        null,  // 60
        /* EVENT: xdg_popup::repositioned */
        null,  // 61
    ];

    xdg_wm_base_requests[0] = .{"destroy", "", xdg_shell_types_storage.data + 0};
    xdg_wm_base_requests[1] = .{"create_positioner", "n", xdg_shell_types_storage.data + 1};
    xdg_wm_base_requests[2] = .{"get_xdg_surface", "no", xdg_shell_types_storage.data + 2};
    xdg_wm_base_requests[3] = .{"pong", "u", xdg_shell_types_storage.data + 4};
    xdg_wm_base_events[0] = .{"ping", "u", xdg_shell_types_storage.data + 5};
    xdg_wm_base_interface = .{
        "xdg_wm_base", 5,
        xdg_wm_base_requests.count, xdg_wm_base_requests.data,
        xdg_wm_base_events.count, xdg_wm_base_events.data,
    };

    xdg_positioner_requests[0] = .{"destroy", "", xdg_shell_types_storage.data + 0};
    xdg_positioner_requests[1] = .{"set_size", "ii", xdg_shell_types_storage.data + 6};
    xdg_positioner_requests[2] = .{"set_anchor_rect", "iiii", xdg_shell_types_storage.data + 8};
    xdg_positioner_requests[3] = .{"set_anchor", "u", xdg_shell_types_storage.data + 12};
    xdg_positioner_requests[4] = .{"set_gravity", "u", xdg_shell_types_storage.data + 13};
    xdg_positioner_requests[5] = .{"set_constraint_adjustment", "u", xdg_shell_types_storage.data + 14};
    xdg_positioner_requests[6] = .{"set_offset", "ii", xdg_shell_types_storage.data + 15};
    xdg_positioner_requests[7] = .{"set_reactive", "", xdg_shell_types_storage.data + 0};
    xdg_positioner_requests[8] = .{"set_parent_size", "ii", xdg_shell_types_storage.data + 17};
    xdg_positioner_requests[9] = .{"set_parent_configure", "u", xdg_shell_types_storage.data + 19};
    xdg_positioner_interface = .{
        "xdg_positioner", 5,
        xdg_positioner_requests.count, xdg_positioner_requests.data,
        0, null,
    };

    xdg_surface_requests[0] = .{"destroy", "", xdg_shell_types_storage.data + 0};
    xdg_surface_requests[1] = .{"get_toplevel", "n", xdg_shell_types_storage.data + 20};
    xdg_surface_requests[2] = .{"get_popup", "n?oo", xdg_shell_types_storage.data + 21};
    xdg_surface_requests[3] = .{"set_window_geometry", "iiii", xdg_shell_types_storage.data + 24};
    xdg_surface_requests[4] = .{"ack_configure", "u", xdg_shell_types_storage.data + 28};
    xdg_surface_events[0] = .{"configure", "u", xdg_shell_types_storage.data + 29};
    xdg_surface_interface = .{
        "xdg_surface", 5,
        xdg_surface_requests.count, xdg_surface_requests.data,
        xdg_surface_events.count, xdg_surface_events.data,
    };

    xdg_toplevel_requests[0] = .{"destroy", "", xdg_shell_types_storage.data + 0};
    xdg_toplevel_requests[1] = .{"set_parent", "?o", xdg_shell_types_storage.data + 30};
    xdg_toplevel_requests[2] = .{"set_title", "s", xdg_shell_types_storage.data + 31};
    xdg_toplevel_requests[3] = .{"set_app_id", "s", xdg_shell_types_storage.data + 32};
    xdg_toplevel_requests[4] = .{"show_window_menu", "ouii", xdg_shell_types_storage.data + 33};
    xdg_toplevel_requests[5] = .{"move", "ou", xdg_shell_types_storage.data + 37};
    xdg_toplevel_requests[6] = .{"resize", "ouu", xdg_shell_types_storage.data + 39};
    xdg_toplevel_requests[7] = .{"set_max_size", "ii", xdg_shell_types_storage.data + 42};
    xdg_toplevel_requests[8] = .{"set_min_size", "ii", xdg_shell_types_storage.data + 44};
    xdg_toplevel_requests[9] = .{"set_maximized", "", xdg_shell_types_storage.data + 0};
    xdg_toplevel_requests[10] = .{"unset_maximized", "", xdg_shell_types_storage.data + 0};
    xdg_toplevel_requests[11] = .{"set_fullscreen", "?o", xdg_shell_types_storage.data + 46};
    xdg_toplevel_requests[12] = .{"unset_fullscreen", "", xdg_shell_types_storage.data + 0};
    xdg_toplevel_requests[13] = .{"set_minimized", "", xdg_shell_types_storage.data + 0};
    xdg_toplevel_events[0] = .{"configure", "iia", xdg_shell_types_storage.data + 47};
    xdg_toplevel_events[1] = .{"close", "", xdg_shell_types_storage.data + 0};
    xdg_toplevel_events[2] = .{"configure_bounds", "ii", xdg_shell_types_storage.data + 50};
    xdg_toplevel_events[3] = .{"wm_capabilities", "a", xdg_shell_types_storage.data + 52};
    xdg_toplevel_interface = .{
        "xdg_toplevel", 5,
        xdg_toplevel_requests.count, xdg_toplevel_requests.data,
        xdg_toplevel_events.count, xdg_toplevel_events.data,
    };

    xdg_popup_requests[0] = .{"destroy", "", xdg_shell_types_storage.data + 0};
    xdg_popup_requests[1] = .{"grab", "ou", xdg_shell_types_storage.data + 53};
    xdg_popup_requests[2] = .{"reposition", "ou", xdg_shell_types_storage.data + 55};
    xdg_popup_events[0] = .{"configure", "iiii", xdg_shell_types_storage.data + 57};
    xdg_popup_events[1] = .{"popup_done", "", xdg_shell_types_storage.data + 0};
    xdg_popup_events[2] = .{"repositioned", "u", xdg_shell_types_storage.data + 61};
    xdg_popup_interface = .{
        "xdg_popup", 5,
        xdg_popup_requests.count, xdg_popup_requests.data,
        xdg_popup_events.count, xdg_popup_events.data,
    };
}


#scope_file
xdg_shell_types_storage: []*wl_interface;

xdg_wm_base_requests: [4]wl_message;
xdg_wm_base_events  : [1]wl_message;

xdg_positioner_requests: [10]wl_message;

xdg_surface_requests: [5]wl_message;
xdg_surface_events  : [1]wl_message;

xdg_toplevel_requests: [14]wl_message;
xdg_toplevel_events  : [4]wl_message;

xdg_popup_requests: [3]wl_message;
xdg_popup_events  : [3]wl_message;

#assert size_of(xdg_wm_base) == 0 "wayland-scanner bug: xdg_wm_base is non-empty";
#assert size_of(xdg_positioner) == 0 "wayland-scanner bug: xdg_positioner is non-empty";
#assert size_of(xdg_surface) == 0 "wayland-scanner bug: xdg_surface is non-empty";
#assert size_of(xdg_toplevel) == 0 "wayland-scanner bug: xdg_toplevel is non-empty";
#assert size_of(xdg_popup) == 0 "wayland-scanner bug: xdg_popup is non-empty";
